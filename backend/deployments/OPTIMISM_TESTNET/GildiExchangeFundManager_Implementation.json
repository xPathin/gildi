{
  "address": "0xBB04bfA235F242b31205269dE2db6dFEa2b3f596",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "releaseId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "FundNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCurrency",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ParamError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "releaseId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fundParticipant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "amountCurrency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payoutCurrency",
          "type": "address"
        }
      ],
      "name": "FundAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "releaseId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fundParticipant",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "returnedTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "FundCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "releaseId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fundParticipant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "FundClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "releaseId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payoutToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "swapRequested",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "swapSuccessful",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "slippageBps",
          "type": "uint16"
        }
      ],
      "name": "FundTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEFAULT_SLIPPAGE_BPS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAllFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundParticipant",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_slippageBps",
          "type": "uint16"
        }
      ],
      "name": "claimAllFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundParticipant",
          "type": "address"
        }
      ],
      "name": "claimAllFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        }
      ],
      "name": "claimAllFundsByReleaseId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fundParticipant",
          "type": "address"
        }
      ],
      "name": "claimFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fundParticipant",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_slippageBps",
          "type": "uint16"
        }
      ],
      "name": "claimFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_participant",
          "type": "address"
        }
      ],
      "name": "fetchPendingFundAmounts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "releaseId",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "participants",
              "type": "address[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currencyAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct IGildiExchangeFundManager.FundAmount[]",
              "name": "amounts",
              "type": "tuple[]"
            },
            {
              "internalType": "bool",
              "name": "claimable",
              "type": "bool"
            }
          ],
          "internalType": "struct GildiExchangeFundManager.PendingFundAmounts[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_participant",
          "type": "address"
        }
      ],
      "name": "getReleaseFundAmount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currencyAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IGildiExchangeFundManager.FundAmount",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        }
      ],
      "name": "getReleaseFundParticipants",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_participant",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cursor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_length",
          "type": "uint256"
        }
      ],
      "name": "getReleaseFunds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "fundParticipant",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isProxyOperation",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "currencyAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct IGildiExchangeFundManager.FundAmount",
              "name": "amount",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "payoutCurrency",
              "type": "address"
            }
          ],
          "internalType": "struct IGildiExchangeFundManager.Fund[]",
          "name": "funds",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "nextCursor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReleaseIdsWithFunds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gildiExchange",
      "outputs": [
        {
          "internalType": "contract IGildiExchange",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_participant",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isProxyOperation",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_amountCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_payoutCurrency",
          "type": "address"
        }
      ],
      "name": "handleAddToFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_batchSize",
          "type": "uint256"
        }
      ],
      "name": "handleCancelReleaseFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "processed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gildiExchange",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        }
      ],
      "name": "releaseHasFunds",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8e32ec380670e6e657a2b831bb9ce5cb2fd6bdf345da4805e525c58e3b5c0978",
  "receipt": {
    "to": null,
    "from": "0xdda45D610A204EB5CB204e9d49920F788296C676",
    "contractAddress": "0xBB04bfA235F242b31205269dE2db6dFEa2b3f596",
    "transactionIndex": 2,
    "gasUsed": "4471928",
    "logsBloom": "0x
    "blockHash": "0xc272c8d2096331b9dfaa861dcdeeb5d020d36961d4efd6413baa2603e3a7c195",
    "transactionHash": "0x8e32ec380670e6e657a2b831bb9ce5cb2fd6bdf345da4805e525c58e3b5c0978",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 33535344,
        "transactionHash": "0x8e32ec380670e6e657a2b831bb9ce5cb2fd6bdf345da4805e525c58e3b5c0978",
        "address": "0xBB04bfA235F242b31205269dE2db6dFEa2b3f596",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0xc272c8d2096331b9dfaa861dcdeeb5d020d36961d4efd6413baa2603e3a7c195"
      }
    ],
    "blockNumber": 33535344,
    "cumulativeGasUsed": "4539024",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "1e10828a34271bc2b619ac58f0876cd3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"releaseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"FundNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCurrency\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ParamError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"releaseId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundParticipant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"amountCurrency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payoutCurrency\",\"type\":\"address\"}],\"name\":\"FundAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"releaseId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundParticipant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"returnedTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"FundCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"releaseId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundParticipant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"FundClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"releaseId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payoutToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapRequested\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapSuccessful\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"slippageBps\",\"type\":\"uint16\"}],\"name\":\"FundTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_SLIPPAGE_BPS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundParticipant\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_slippageBps\",\"type\":\"uint16\"}],\"name\":\"claimAllFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundParticipant\",\"type\":\"address\"}],\"name\":\"claimAllFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"}],\"name\":\"claimAllFundsByReleaseId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fundParticipant\",\"type\":\"address\"}],\"name\":\"claimFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fundParticipant\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_slippageBps\",\"type\":\"uint16\"}],\"name\":\"claimFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"fetchPendingFundAmounts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"releaseId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"}],\"internalType\":\"struct IGildiExchangeFundManager.FundAmount[]\",\"name\":\"amounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"claimable\",\"type\":\"bool\"}],\"internalType\":\"struct GildiExchangeFundManager.PendingFundAmounts[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"getReleaseFundAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"}],\"internalType\":\"struct IGildiExchangeFundManager.FundAmount\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"}],\"name\":\"getReleaseFundParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"getReleaseFunds\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundParticipant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isProxyOperation\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"}],\"internalType\":\"struct IGildiExchangeFundManager.FundAmount\",\"name\":\"amount\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"payoutCurrency\",\"type\":\"address\"}],\"internalType\":\"struct IGildiExchangeFundManager.Fund[]\",\"name\":\"funds\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nextCursor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReleaseIdsWithFunds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gildiExchange\",\"outputs\":[{\"internalType\":\"contract IGildiExchange\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isProxyOperation\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_amountCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_payoutCurrency\",\"type\":\"address\"}],\"name\":\"handleAddToFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_batchSize\",\"type\":\"uint256\"}],\"name\":\"handleCancelReleaseFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"processed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gildiExchange\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"}],\"name\":\"releaseHasFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Gildi Company\",\"custom:security-contact\":\"security@gildi.io\",\"errors\":{\"FundNotFound(uint256,address)\":[{\"details\":\"Error thrown when a fund is not found\",\"params\":{\"participant\":\"The address of the fund participant\",\"releaseId\":\"The ID of the release\"}}],\"InvalidCaller()\":[{\"details\":\"Emitted when the caller is invalid\"}],\"InvalidCurrency()\":[{\"details\":\"Error thrown when an incompatible currency is provided\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotAllowed()\":[{\"details\":\"Emitted when an operation is not allowed for the caller\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ParamError()\":[{\"details\":\"Emitted when a function parameter is invalid or out-of-range (e.g. zero batchSize, zero price, etc.)\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"FundAdded(uint256,address,uint256,address,address)\":{\"params\":{\"amount\":\"The amount added\",\"amountCurrency\":\"The currency of the fund amount\",\"fundParticipant\":\"The fund participant (seller or fee participant)\",\"payoutCurrency\":\"The currency to payout in\",\"releaseId\":\"The ID of the release\"}},\"FundCancelled(uint256,address,address,uint256,address)\":{\"params\":{\"amount\":\"The amount returned\",\"currency\":\"The currency of the fund\",\"fundParticipant\":\"The fund participant (seller or fee participant)\",\"releaseId\":\"The ID of the release\",\"returnedTo\":\"The address that received the returned funds\"}},\"FundClaimed(uint256,address,uint256,address)\":{\"params\":{\"amount\":\"The amount claimed\",\"currency\":\"The currency of the fund\",\"fundParticipant\":\"The fund participant (seller or fee participant) claiming funds\",\"releaseId\":\"The ID of the release\"}},\"FundTransferred(uint256,address,address,address,uint256,address,uint256,bool,bool,uint16)\":{\"params\":{\"amount\":\"The amount of source token\",\"from\":\"The contract address (normally this contract)\",\"payoutToken\":\"The token received by the recipient (may differ from sourceToken if swapped)\",\"releaseId\":\"The ID of the release\",\"slippageBps\":\"The slippage tolerance in basis points used for swaps\",\"sourceToken\":\"The source token used for payment\",\"swapAmount\":\"The amount received after swap (if performed)\",\"swapRequested\":\"Whether a token swap was requested\",\"swapSuccessful\":\"Whether the swap was successful (if requested)\",\"to\":\"The fund participant receiving the funds\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"claimAllFunds(address)\":{\"params\":{\"_fundParticipant\":\"The address of the fund participant\"}},\"claimAllFunds(address,uint16)\":{\"params\":{\"_fundParticipant\":\"The address of the fund participant\",\"_slippageBps\":\"Optional slippage tolerance in basis points (100 = 1%, 500 = 5%)\"}},\"claimAllFundsByReleaseId(uint256)\":{\"params\":{\"_releaseId\":\"The ID of the release\"}},\"claimFunds(uint256,address)\":{\"params\":{\"_fundParticipant\":\"The address of the fund participant\",\"_releaseId\":\"The ID of the release\"}},\"claimFunds(uint256,address,uint16)\":{\"params\":{\"_fundParticipant\":\"The address of the fund participant\",\"_releaseId\":\"The ID of the release\",\"_slippageBps\":\"Optional slippage tolerance in basis points (100 = 1%, 500 = 5%)\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"fetchPendingFundAmounts(uint256,address)\":{\"details\":\"if releaseId is 0, fetches for all releases, if participant is 0, fetches for all participants\",\"params\":{\"_participant\":\"The address of the fund participant\",\"_releaseId\":\"The ID of the release\"},\"returns\":{\"_0\":\"An array of pending fund amounts with claimable status\"}},\"getReleaseFundAmount(uint256,address)\":{\"params\":{\"_participant\":\"The address of the fund participant\",\"_releaseId\":\"The ID of the release\"},\"returns\":{\"_0\":\"The fund amount details\"}},\"getReleaseFundParticipants(uint256)\":{\"params\":{\"_releaseId\":\"The ID of the release\"},\"returns\":{\"_0\":\"An array of participant addresses\"}},\"getReleaseFunds(uint256,address,uint256,uint256)\":{\"params\":{\"_cursor\":\"The starting index for pagination\",\"_length\":\"The number of funds to retrieve\",\"_participant\":\"The address of the fund participant\",\"_releaseId\":\"The ID of the release\"},\"returns\":{\"funds\":\"An array of funds\",\"nextCursor\":\"The next cursor for pagination\"}},\"getReleaseIdsWithFunds()\":{\"returns\":{\"_0\":\"An array of release IDs that currently have active funds\"}},\"handleAddToFund(uint256,address,address,address,bool,uint256,address,address)\":{\"params\":{\"_amount\":\"The amount to add to fund\",\"_amountCurrency\":\"The currency of the fund amount\",\"_buyer\":\"The address of the buyer\",\"_isProxyOperation\":\"Whether this is a proxy operation\",\"_operator\":\"The address of the operator\",\"_participant\":\"The address of the fund participant\",\"_payoutCurrency\":\"The currency to payout in\",\"_releaseId\":\"The ID of the release\"}},\"handleCancelReleaseFunds(uint256,uint256)\":{\"params\":{\"_batchSize\":\"The number of funds to process in this batch\",\"_releaseId\":\"The ID of the release\"},\"returns\":{\"processed\":\"The number of funds processed\"}},\"initialize(address)\":{\"params\":{\"_gildiExchange\":\"The address of the GildiExchange contract\"}},\"releaseHasFunds(uint256)\":{\"params\":{\"_releaseId\":\"The ID of the release\"},\"returns\":{\"_0\":\"True if the release has funds, false otherwise\"}}},\"stateVariables\":{\"releaseFundAmountByParticipant\":{\"details\":\"releaseId => participant => amount\"},\"releaseFundParticipants\":{\"details\":\"releaseId => participants[]\"},\"releaseFundsByParticipant\":{\"details\":\"releaseId => participant => funds[]\"}},\"title\":\"Gildi Exchange Fund Manager\",\"version\":1},\"userdoc\":{\"events\":{\"FundAdded(uint256,address,uint256,address,address)\":{\"notice\":\"Emitted when an fund is added\"},\"FundCancelled(uint256,address,address,uint256,address)\":{\"notice\":\"Emitted when an fund is cancelled and funds are returned\"},\"FundClaimed(uint256,address,uint256,address)\":{\"notice\":\"Emitted when a user claims funds\"},\"FundTransferred(uint256,address,address,address,uint256,address,uint256,bool,bool,uint16)\":{\"notice\":\"Emitted when funds are transferred to a participant\"}},\"kind\":\"user\",\"methods\":{\"DEFAULT_SLIPPAGE_BPS()\":{\"notice\":\"Default slippage tolerance in basis points (1%)\"},\"claimAllFunds()\":{\"notice\":\"Claims all funds for all participants across all releases\"},\"claimAllFunds(address)\":{\"notice\":\"Claims all funds for a participant across all releases with default slippage (5%)\"},\"claimAllFunds(address,uint16)\":{\"notice\":\"Claims all funds for a participant across all releases\"},\"claimAllFundsByReleaseId(uint256)\":{\"notice\":\"Claims all funds for all participants of a specific release\"},\"claimFunds(uint256,address)\":{\"notice\":\"Claims funds for a participant of a release with default slippage (5%)\"},\"claimFunds(uint256,address,uint16)\":{\"notice\":\"Claims funds for a participant of a release\"},\"fetchPendingFundAmounts(uint256,address)\":{\"notice\":\"Fetches pending fund amounts for a participant and release\"},\"getReleaseFundAmount(uint256,address)\":{\"notice\":\"Gets the total fund amount for a participant of a release\"},\"getReleaseFundParticipants(uint256)\":{\"notice\":\"Gets all fund participants for a release\"},\"getReleaseFunds(uint256,address,uint256,uint256)\":{\"notice\":\"Retrieves funds for a participant of a release\"},\"getReleaseIdsWithFunds()\":{\"notice\":\"Gets all release IDs that have funds\"},\"gildiExchange()\":{\"notice\":\"The GildiExchange contract that calls this contract\"},\"handleAddToFund(uint256,address,address,address,bool,uint256,address,address)\":{\"notice\":\"Adds funds to fund for a participant\"},\"handleCancelReleaseFunds(uint256,uint256)\":{\"notice\":\"Cancels funds for a release in batches\"},\"initialize(address)\":{\"notice\":\"Initializes the contract\"},\"releaseHasFunds(uint256)\":{\"notice\":\"Checks if a release has any funds\"}},\"notice\":\"Manages fund functionality for the Gildi Exchange marketplace.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/marketplace/exchange/GildiExchangeFundManager.sol\":\"GildiExchangeFundManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\\n        return INITIALIZABLE_STORAGE;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        bytes32 slot = _initializableStorageSlot();\\n        assembly {\\n            $.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\\n\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xbff9f59c84e5337689161ce7641c0ef8e872d6a7536fbc1f5133f128887aba3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[ERC].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {IERC1155Receiver-onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {IERC1155Receiver-onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf189f9b417fe1931e1ab706838aff1128528694a9fcdb5ff7665197f2ca57d09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Arrays.sol)\\n// This file was procedurally generated from scripts/generate/templates/Arrays.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Comparators} from \\\"./Comparators.sol\\\";\\nimport {SlotDerivation} from \\\"./SlotDerivation.sol\\\";\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using SlotDerivation for bytes32;\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Sort an array of uint256 (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        uint256[] memory array,\\n        function(uint256, uint256) pure returns (bool) comp\\n    ) internal pure returns (uint256[] memory) {\\n        _quickSort(_begin(array), _end(array), comp);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of uint256 in increasing order.\\n     */\\n    function sort(uint256[] memory array) internal pure returns (uint256[] memory) {\\n        sort(array, Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Sort an array of address (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        address[] memory array,\\n        function(address, address) pure returns (bool) comp\\n    ) internal pure returns (address[] memory) {\\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of address in increasing order.\\n     */\\n    function sort(address[] memory array) internal pure returns (address[] memory) {\\n        sort(_castToUint256Array(array), Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Sort an array of bytes32 (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        bytes32[] memory array,\\n        function(bytes32, bytes32) pure returns (bool) comp\\n    ) internal pure returns (bytes32[] memory) {\\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of bytes32 in increasing order.\\n     */\\n    function sort(bytes32[] memory array) internal pure returns (bytes32[] memory) {\\n        sort(_castToUint256Array(array), Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Performs a quick sort of a segment of memory. The segment sorted starts at `begin` (inclusive), and stops\\n     * at end (exclusive). Sorting follows the `comp` comparator.\\n     *\\n     * Invariant: `begin <= end`. This is the case when initially called by {sort} and is preserved in subcalls.\\n     *\\n     * IMPORTANT: Memory locations between `begin` and `end` are not validated/zeroed. This function should\\n     * be used only if the limits are within a memory array.\\n     */\\n    function _quickSort(uint256 begin, uint256 end, function(uint256, uint256) pure returns (bool) comp) private pure {\\n        unchecked {\\n            if (end - begin < 0x40) return;\\n\\n            // Use first element as pivot\\n            uint256 pivot = _mload(begin);\\n            // Position where the pivot should be at the end of the loop\\n            uint256 pos = begin;\\n\\n            for (uint256 it = begin + 0x20; it < end; it += 0x20) {\\n                if (comp(_mload(it), pivot)) {\\n                    // If the value stored at the iterator's position comes before the pivot, we increment the\\n                    // position of the pivot and move the value there.\\n                    pos += 0x20;\\n                    _swap(pos, it);\\n                }\\n            }\\n\\n            _swap(begin, pos); // Swap pivot into place\\n            _quickSort(begin, pos, comp); // Sort the left side of the pivot\\n            _quickSort(pos + 0x20, end, comp); // Sort the right side of the pivot\\n        }\\n    }\\n\\n    /**\\n     * @dev Pointer to the memory location of the first element of `array`.\\n     */\\n    function _begin(uint256[] memory array) private pure returns (uint256 ptr) {\\n        assembly (\\\"memory-safe\\\") {\\n            ptr := add(array, 0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Pointer to the memory location of the first memory word (32bytes) after `array`. This is the memory word\\n     * that comes just after the last element of the array.\\n     */\\n    function _end(uint256[] memory array) private pure returns (uint256 ptr) {\\n        unchecked {\\n            return _begin(array) + array.length * 0x20;\\n        }\\n    }\\n\\n    /**\\n     * @dev Load memory word (as a uint256) at location `ptr`.\\n     */\\n    function _mload(uint256 ptr) private pure returns (uint256 value) {\\n        assembly {\\n            value := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @dev Swaps the elements memory location `ptr1` and `ptr2`.\\n     */\\n    function _swap(uint256 ptr1, uint256 ptr2) private pure {\\n        assembly {\\n            let value1 := mload(ptr1)\\n            let value2 := mload(ptr2)\\n            mstore(ptr1, value2)\\n            mstore(ptr2, value1)\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast address memory array to uint256 memory array\\n    function _castToUint256Array(address[] memory input) private pure returns (uint256[] memory output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast bytes32 memory array to uint256 memory array\\n    function _castToUint256Array(bytes32[] memory input) private pure returns (uint256[] memory output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast address comp function to uint256 comp function\\n    function _castToUint256Comp(\\n        function(address, address) pure returns (bool) input\\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast bytes32 comp function to uint256 comp function\\n    function _castToUint256Comp(\\n        function(bytes32, bytes32) pure returns (bool) input\\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * NOTE: The `array` is expected to be sorted in ascending order, and to\\n     * contain no repeated elements.\\n     *\\n     * IMPORTANT: Deprecated. This implementation behaves as {lowerBound} but lacks\\n     * support for repeated elements in the array. The {lowerBound} function should\\n     * be used instead.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Searches an `array` sorted in ascending order and returns the first\\n     * index that contains a value greater or equal than `element`. If no such index\\n     * exists (i.e. all values in the array are strictly less than `element`), the array\\n     * length is returned. Time complexity O(log n).\\n     *\\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/lower_bound[lower_bound].\\n     */\\n    function lowerBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value < element) {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Searches an `array` sorted in ascending order and returns the first\\n     * index that contains a value strictly greater than `element`. If no such index\\n     * exists (i.e. all values in the array are strictly less than `element`), the array\\n     * length is returned. Time complexity O(log n).\\n     *\\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/upper_bound[upper_bound].\\n     */\\n    function upperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Same as {lowerBound}, but with an array in memory.\\n     */\\n    function lowerBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeMemoryAccess(array, mid) < element) {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Same as {upperBound}, but with an array in memory.\\n     */\\n    function upperBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeMemoryAccess(array, mid) > element) {\\n                high = mid;\\n            } else {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes[] storage arr, uint256 pos) internal pure returns (StorageSlot.BytesSlot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getBytesSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(string[] storage arr, uint256 pos) internal pure returns (StorageSlot.StringSlot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getStringSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(bytes32[] memory arr, uint256 pos) internal pure returns (bytes32 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(bytes[] memory arr, uint256 pos) internal pure returns (bytes memory res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(string[] memory arr, uint256 pos) internal pure returns (string memory res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(address[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(bytes32[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(uint256[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(bytes[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(string[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa4b9958797e0e9cde82a090525e90f80d5745ba1c67ee72b488bd3087498a17e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Comparators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Comparators.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to compare values.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Comparators {\\n    function lt(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a < b;\\n    }\\n\\n    function gt(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a > b;\\n    }\\n}\\n\",\"keccak256\":\"0x302eecd8cf323b4690e3494a7d960b3cbce077032ab8ef655b323cdd136cec58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SlotDerivation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/SlotDerivation.sol)\\n// This file was procedurally generated from scripts/generate/templates/SlotDerivation.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for computing storage (and transient storage) locations from namespaces and deriving slots\\n * corresponding to standard patterns. The derivation method for array and mapping matches the storage layout used by\\n * the solidity language / compiler.\\n *\\n * See https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays[Solidity docs for mappings and dynamic arrays.].\\n *\\n * Example usage:\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using StorageSlot for bytes32;\\n *     using SlotDerivation for bytes32;\\n *\\n *     // Declare a namespace\\n *     string private constant _NAMESPACE = \\\"<namespace>\\\"; // eg. OpenZeppelin.Slot\\n *\\n *     function setValueInNamespace(uint256 key, address newValue) internal {\\n *         _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value = newValue;\\n *     }\\n *\\n *     function getValueInNamespace(uint256 key) internal view returns (address) {\\n *         return _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {StorageSlot}.\\n *\\n * NOTE: This library provides a way to manipulate storage locations in a non-standard way. Tooling for checking\\n * upgrade safety will ignore the slots accessed through this library.\\n *\\n * _Available since v5.1._\\n */\\nlibrary SlotDerivation {\\n    /**\\n     * @dev Derive an ERC-7201 slot from a string (namespace).\\n     */\\n    function erc7201Slot(string memory namespace) internal pure returns (bytes32 slot) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, sub(keccak256(add(namespace, 0x20), mload(namespace)), 1))\\n            slot := and(keccak256(0x00, 0x20), not(0xff))\\n        }\\n    }\\n\\n    /**\\n     * @dev Add an offset to a slot to get the n-th element of a structure or an array.\\n     */\\n    function offset(bytes32 slot, uint256 pos) internal pure returns (bytes32 result) {\\n        unchecked {\\n            return bytes32(uint256(slot) + pos);\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of the first element in an array from the slot where the length is stored.\\n     */\\n    function deriveArray(bytes32 slot) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, slot)\\n            result := keccak256(0x00, 0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, address key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, and(key, shr(96, not(0))))\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bool key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, iszero(iszero(key)))\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bytes32 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, uint256 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, int256 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, string memory key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            let length := mload(key)\\n            let begin := add(key, 0x20)\\n            let end := add(begin, length)\\n            let cache := mload(end)\\n            mstore(end, slot)\\n            result := keccak256(begin, add(length, 0x20))\\n            mstore(end, cache)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bytes memory key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            let length := mload(key)\\n            let begin := add(key, 0x20)\\n            let end := add(begin, length)\\n            let cache := mload(end)\\n            mstore(end, slot)\\n            result := keccak256(begin, add(length, 0x20))\\n            mstore(end, cache)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67672e4ca1dafdcc661d4eba8475cfac631fa0933309258e3af7644b92e1fb26\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Arrays} from \\\"../Arrays.sol\\\";\\nimport {Math} from \\\"../math/Math.sol\\\";\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n * - Set can be cleared (all elements removed) in O(n).\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * The following types are supported:\\n *\\n * - `bytes32` (`Bytes32Set`) since v3.3.0\\n * - `address` (`AddressSet`) since v3.3.0\\n * - `uint256` (`UintSet`) since v3.3.0\\n * - `string` (`StringSet`) since v5.4.0\\n * - `bytes` (`BytesSet`) since v5.4.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: This function has an unbounded cost that scales with set size. Developers should keep in mind that\\n     * using it may render the function uncallable if the set grows to the point where clearing it consumes too much\\n     * gas to fit in a block.\\n     */\\n    function _clear(Set storage set) private {\\n        uint256 len = _length(set);\\n        for (uint256 i = 0; i < len; ++i) {\\n            delete set._positions[set._values[i]];\\n        }\\n        Arrays.unsafeSetLength(set._values, 0);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    /**\\n     * @dev Return a slice of the set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set, uint256 start, uint256 end) private view returns (bytes32[] memory) {\\n        unchecked {\\n            end = Math.min(end, _length(set));\\n            start = Math.min(start, end);\\n\\n            uint256 len = end - start;\\n            bytes32[] memory result = new bytes32[](len);\\n            for (uint256 i = 0; i < len; ++i) {\\n                result[i] = Arrays.unsafeAccess(set._values, start + i).value;\\n            }\\n            return result;\\n        }\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function clear(Bytes32Set storage set) internal {\\n        _clear(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return a slice of the set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner, start, end);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function clear(AddressSet storage set) internal {\\n        _clear(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return a slice of the set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner, start, end);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function clear(UintSet storage set) internal {\\n        _clear(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return a slice of the set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner, start, end);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    struct StringSet {\\n        // Storage of set values\\n        string[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(string value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(StringSet storage set, string memory value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(StringSet storage set, string memory value) internal returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                string memory lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function clear(StringSet storage set) internal {\\n        uint256 len = length(set);\\n        for (uint256 i = 0; i < len; ++i) {\\n            delete set._positions[set._values[i]];\\n        }\\n        Arrays.unsafeSetLength(set._values, 0);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(StringSet storage set, string memory value) internal view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(StringSet storage set) internal view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(StringSet storage set, uint256 index) internal view returns (string memory) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(StringSet storage set) internal view returns (string[] memory) {\\n        return set._values;\\n    }\\n\\n    /**\\n     * @dev Return a slice of the set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(StringSet storage set, uint256 start, uint256 end) internal view returns (string[] memory) {\\n        unchecked {\\n            end = Math.min(end, length(set));\\n            start = Math.min(start, end);\\n\\n            uint256 len = end - start;\\n            string[] memory result = new string[](len);\\n            for (uint256 i = 0; i < len; ++i) {\\n                result[i] = Arrays.unsafeAccess(set._values, start + i).value;\\n            }\\n            return result;\\n        }\\n    }\\n\\n    struct BytesSet {\\n        // Storage of set values\\n        bytes[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(BytesSet storage set, bytes memory value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(BytesSet storage set, bytes memory value) internal returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes memory lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function clear(BytesSet storage set) internal {\\n        uint256 len = length(set);\\n        for (uint256 i = 0; i < len; ++i) {\\n            delete set._positions[set._values[i]];\\n        }\\n        Arrays.unsafeSetLength(set._values, 0);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(BytesSet storage set, bytes memory value) internal view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(BytesSet storage set) internal view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(BytesSet storage set, uint256 index) internal view returns (bytes memory) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(BytesSet storage set) internal view returns (bytes[] memory) {\\n        return set._values;\\n    }\\n\\n    /**\\n     * @dev Return a slice of the set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(BytesSet storage set, uint256 start, uint256 end) internal view returns (bytes[] memory) {\\n        unchecked {\\n            end = Math.min(end, length(set));\\n            start = Math.min(start, end);\\n\\n            uint256 len = end - start;\\n            bytes[] memory result = new bytes[](len);\\n            for (uint256 i = 0; i < len; ++i) {\\n                result[i] = Arrays.unsafeAccess(set._values, start + i).value;\\n            }\\n            return result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1fc283df727585919c3db301b948a3e827aee16917457ad7f916db9da2228e77\",\"license\":\"MIT\"},\"contracts/interfaces/manager/IGildiManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\n\\n/// @title IGildiManager\\n/// @notice Interface for the Gildi Manager.\\n/// @custom:security-contact security@gildi.io\\n/// @author Patrick Fischer (Pathin) > https://pathin.me\\ninterface IGildiManager is IERC165 {\\n    /// @notice A user share.\\n    struct UserShare {\\n        /// @notice The user address.\\n        address user;\\n        /// @notice The number shares owned by the user.\\n        uint256 shares;\\n    }\\n\\n    /// @notice A report of the shares owned by a user in a specific time period.\\n    struct SharesReport {\\n        /// @notice The token ID.\\n        uint256 tokenId;\\n        /// @notice The start timestamp of the report.\\n        uint256 start;\\n        /// @notice The end timestamp of the report.\\n        uint256 end;\\n        /// @notice The total number of shares owned by all users.\\n        uint256 totalNumberOfShares;\\n        /// @notice The shares owned by each user.\\n        UserShare[] userShares;\\n        /// @notice Info for Pagination, if there are more results.\\n        bool hasMore;\\n        /// @notice Next cursor for Pagination.\\n        uint256 nextCursor;\\n    }\\n\\n    struct TokenBalance {\\n        uint256 tokenId;\\n        uint256 amount;\\n        uint256 lockedAmount;\\n    }\\n\\n    /// @notice A GILDI RWA release.\\n    struct RWARelease {\\n        /// @notice The token ID of the release (equal to release id).\\n        uint256 tokenId;\\n        /// @notice If the release is locked.\\n        bool locked;\\n        /// @notice When the release was unlocked.\\n        uint256 unlockedAt;\\n        /// @notice If the release is in the initial sale.\\n        bool inInitialSale;\\n        /// @notice The total number of shares.\\n        uint256 totalShares;\\n        /// @notice The number of unassigned shares.\\n        uint256 unassignedShares;\\n        /// @notice The number of burned shares.\\n        uint256 burnedShares;\\n        /// @notice The release is deleting.\\n        bool deleting;\\n        /// @notice The number of shares deleted.\\n        uint256 deletedShares;\\n        /// @notice The timestamp of the creation.\\n        uint256 createdAt;\\n    }\\n\\n    /// @notice Fetches all the release IDs.\\n    /// @return An array of all the release IDs.\\n    function getAllReleaseIds() external view returns (uint256[] memory);\\n\\n    /// @notice Create a new release.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    /// @param _amount The amount of the token.\\n    /// @param _ownershipTrackingTimePeriod The time period in which we aggregate the shares owned by a user.\\n    function createNewRelease(uint256 _releaseId, uint256 _amount, uint256 _ownershipTrackingTimePeriod) external;\\n\\n    /// @notice Assigns the user shares to a royalty rights release in a batch operation.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    /// @param _sharesBatch The shares to assign.\\n    /// @dev The shares are assigned in a batch to prevent gas limit issues.\\n    function assignShares(uint256 _releaseId, UserShare[] calldata _sharesBatch) external;\\n\\n    /// @notice Starts the initial sale of a release.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    function startInitialSale(uint256 _releaseId) external;\\n\\n    /// @notice Cancels the initial sale of a release.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    function cancelInitialSale(uint256 _releaseId) external;\\n\\n    /// @notice Ends the initial sale of a release.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    function endInitialSale(uint256 _releaseId) external;\\n\\n    /// @notice Check if a release exists.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    /// @return True if the release exists, false otherwise.\\n    function releaseExists(uint256 _releaseId) external view returns (bool);\\n\\n    /// @notice Deletes a release in batches.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    /// @param _batchSizeOwners The number of owners to delete in a batch.\\n    /// @dev Batch deletion is used to prevent gas limit issues.\\n    function batchDeleteRelease(uint256 _releaseId, uint256 _batchSizeOwners) external;\\n\\n    /// @notice Unlocks a release.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    function unlockRelease(uint256 _releaseId) external;\\n\\n    /// @notice Deposits royalty rights tokens into the manager.\\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\\n    /// @param _account The account to deposit the tokens to.\\n    /// @param _amount The amount of tokens to deposit.\\n    function deposit(uint256 _tokenId, address _account, uint256 _amount) external;\\n\\n    /// @notice Withdraws royalty rights tokens from the manager.\\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\\n    /// @param _account The account to withdraw the tokens from.\\n    /// @param _amount The amount of tokens to withdraw.\\n    function withdraw(uint256 _tokenId, address _account, uint256 _amount) external;\\n\\n    /// @notice Locks tokens for a user.\\n    /// @param _account The account to lock the tokens for.\\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\\n    /// @param _amountToLock The amount of tokens to lock.\\n    function lockTokens(address _account, uint256 _tokenId, uint256 _amountToLock) external;\\n\\n    /// @notice Unlocks tokens for a user.\\n    /// @param _account The account to unlock the tokens for.\\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\\n    /// @param _amountToUnlock The amount of tokens to unlock.\\n    function unlockTokens(address _account, uint256 _tokenId, uint256 _amountToUnlock) external;\\n\\n    /// @notice Transfers ownership of a release's shares to another user.\\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\\n    /// @param _from The address of the current owner.\\n    /// @param _to The address of the new owner.\\n    /// @param _amount The amount of shares to transfer.\\n    function transferOwnership(uint256 _tokenId, address _from, address _to, uint256 _amount) external;\\n\\n    /// @notice Transfers ownership of a release's shares to another user during the initial sale.\\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\\n    /// @param _from The address of the current owner.\\n    /// @param _to The address of the new owner.\\n    /// @param _amount The amount of shares to transfer.\\n    function transferOwnershipInitialSale(uint256 _tokenId, address _from, address _to, uint256 _amount) external;\\n\\n    /// @notice Gets a release by its ID.\\n    /// @param _releaseId The release ID.\\n    /// @return The release.\\n    function getReleaseById(uint256 _releaseId) external view returns (RWARelease memory);\\n\\n    /// @notice Checks if the release is locked.\\n    /// @param _releaseId The release ID.\\n    /// @return True if the release is locked, false otherwise.\\n    function isLocked(uint256 _releaseId) external view returns (bool);\\n\\n    /// @notice Returns if the release is in the initial sale.\\n    /// @param _releaseId The release ID.\\n    /// @return True if the release is in the initial sale, false otherwise.\\n    function isInInitialSale(uint256 _releaseId) external view returns (bool);\\n\\n    /// @notice Fetches the available balance of a user for a specific token.\\n    /// @param _tokenId The token ID.\\n    /// @param _account The account to fetch the balance for.\\n    /// @return The available balance of the user for the token.\\n    function getAvailableBalance(uint256 _tokenId, address _account) external view returns (uint256);\\n\\n    /// @notice Fetch the shares of a release owned by a user in a specific time period paginated.\\n    /// @param _releaseId The release ID.\\n    /// @param _start The start timestamp.\\n    /// @param _end The end timestamp (exclusive).\\n    /// @param _cursor The cursor for pagination.\\n    /// @param _limit The limit for pagination.\\n    function fetchSharesInPeriod(\\n        uint256 _releaseId,\\n        uint256 _start,\\n        uint256 _end,\\n        uint256 _cursor,\\n        uint256 _limit\\n    ) external view returns (SharesReport memory);\\n\\n    /// @notice Fetches the balance of a user for all tokens.\\n    /// @param _account The account to fetch the balance for.\\n    function balanceOf(address _account) external view returns (TokenBalance[] memory);\\n\\n    /// @notice Fetches the balance of a user for a specific token.\\n    /// @param _tokenId The token ID.\\n    /// @param _account The account to fetch the balance for.\\n    function balanceOf(uint256 _tokenId, address _account) external view returns (TokenBalance memory);\\n\\n    /// @notice Checks if the release is fully assigned.\\n    function isFullyAssigned(uint256 _releaseId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8d005682185f1eb885e73880eb7259a70aaba04c43c7c447ba872b8171101f51\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/marketplace/exchange/IGildiExchange.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\nimport {IAccessControl} from '@openzeppelin/contracts/access/IAccessControl.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IGildiManager} from '../../manager/IGildiManager.sol';\\nimport {IGildiPriceOracle} from '../../oracles/price/IGildiPriceOracle.sol';\\nimport {IGildiExchangeOrderBook} from './IGildiExchangeOrderBook.sol';\\nimport {IGildiExchangeFundManager} from './IGildiExchangeFundManager.sol';\\nimport {IGildiExchangePaymentProcessor} from './IGildiExchangePaymentProcessor.sol';\\nimport {IGildiExchangePaymentAggregator} from './IGildiExchangePaymentAggregator.sol';\\n\\n/// @title IGildiExchange\\n/// @notice Interface for the Gildi Exchange.\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\ninterface IGildiExchange is IAccessControl {\\n    /// @notice Represents a fee/burn receiver with an address and a basis points value and the currency to receive in.\\n    struct Receiver {\\n        /// @dev The address that receives the fee\\n        address receiverAddress;\\n        /// @dev The currency in which the fee is paid\\n        address payoutCurrency;\\n        /// @dev The value in basis points\\n        uint16 value;\\n    }\\n\\n    /// @notice Represents a top-level fee distribution with an address and optional sub-fee receivers.\\n    struct FeeDistribution {\\n        /// @dev The primary fee receiver\\n        Receiver feeReceiver;\\n        /// @dev Used to distribute a portion of the parent fee, e.g., burn a fraction\\n        Receiver[] subFeeReceivers;\\n    }\\n\\n    /// @notice Application environment settings\\n    struct AppEnvironment {\\n        /// @dev Application settings including dependencies\\n        AppSettings settings;\\n        /// @dev The basis points denominator for percentage calculations\\n        uint16 basisPoints;\\n        /// @dev The admin role identifier\\n        bytes32 adminRole;\\n        /// @dev The marketplace manager role identifier\\n        bytes32 marketplaceManagerRole;\\n        /// @dev The claimer role identifier\\n        bytes32 claimerRole;\\n    }\\n\\n    /// @notice Application settings\\n    struct AppSettings {\\n        /// @dev The number of decimals for price asking\\n        uint8 priceAskDecimals;\\n        /// @dev The fee distribution structure\\n        FeeDistribution[] fees;\\n        /// @dev The marketplace currency\\n        IERC20 marketplaceCurrency;\\n        /// @dev The maximum number of buys per transaction\\n        uint256 maxBuyPerTransaction;\\n        /// @dev The Gildi manager interface\\n        IGildiManager gildiManager;\\n        /// @dev The order book interface\\n        IGildiExchangeOrderBook orderBook;\\n        /// @dev The price oracle interface\\n        IGildiPriceOracle gildiPriceOracle;\\n        /// @dev The fund manager interface\\n        IGildiExchangeFundManager fundManager;\\n        /// @dev The payment processor interface\\n        IGildiExchangePaymentProcessor paymentProcessor;\\n        /// @dev The payment aggregator interface\\n        IGildiExchangePaymentAggregator paymentAggregator;\\n    }\\n\\n    /// @notice Purchases tokens of a release\\n    /// @dev Sweeps the floor\\n    /// @param _releaseId The ID of the release\\n    /// @param _amount The amount of tokens to purchase\\n    /// @param _maxTotalPrice The maximum total price to spend in Marketplace Currency\\n    /// @param _beneficiary The address to send the tokens to\\n    /// @param _isProxyOperation Whether the operation is a proxy operation\\n    /// @return amountSpent The amount of Marketplace Currency spent\\n    /// @return amountUsdSpent The amount spent in USD\\n    function purchase(\\n        uint256 _releaseId,\\n        uint256 _amount,\\n        uint256 _maxTotalPrice,\\n        address _beneficiary,\\n        bool _isProxyOperation\\n    ) external returns (uint256 amountSpent, uint256 amountUsdSpent);\\n\\n    /// @notice Transfer a token in the context of the Gildi Exchange\\n    /// @param _from The address to transfer from\\n    /// @param _to The address to transfer to\\n    /// @param _value The amount to transfer\\n    /// @param _amountCurrency The currency of the amount\\n    function transferTokenInContext(address _from, address _to, uint256 _value, address _amountCurrency) external;\\n\\n    /// @notice Tries to burn a token in the context of the Gildi Exchange\\n    /// @param _from The address to burn from\\n    /// @param _value The amount to burn\\n    /// @param _amountCurrency The currency of the amount\\n    /// @return Whether the burn was successful\\n    function tryBurnTokenInContext(address _from, uint256 _value, address _amountCurrency) external returns (bool);\\n\\n    /// @notice Gets the price needed to pay in marketplace currency to buy `_amountToBuy` units of `_releaseId`.\\n    /// @param _releaseId The ID of the release\\n    /// @param _amountToBuy The amount of tokens to buy\\n    /// @param _buyer The address of the buyer (optional)\\n    /// @return totalPriceInCurrency The total cost in marketplace currency\\n    /// @return asset The asset the price is in\\n    /// @return totalPriceUsd The total price in USD (using exchange's priceAskDecimals)\\n    function quotePricePreview(\\n        uint256 _releaseId,\\n        uint256 _amountToBuy,\\n        address _buyer\\n    ) external view returns (uint256 totalPriceInCurrency, address asset, uint256 totalPriceUsd);\\n\\n    /// @notice Checks if a release is currently in its initial sale period\\n    /// @param _releaseId The ID of the release\\n    /// @return True if the release is in active initial sale, false otherwise\\n    function isInInitialSale(uint256 _releaseId) external view returns (bool);\\n\\n    /// @notice Returns the app environment.\\n    /// @return appEnvironment The app environment\\n    function getAppEnvironment() external view returns (AppEnvironment memory);\\n\\n    /// @notice Gets the active marketplace asset for a release\\n    /// @param _releaseId The ID of the release\\n    /// @return The address of the active marketplace asset for the release\\n    function getActiveMarketplaceReleaseAsset(uint256 _releaseId) external view returns (address);\\n\\n    /// @notice Get the fees of a specific release\\n    /// @param _releaseId The ID of the release\\n    /// @return An array of fee distributions for the release\\n    function getReleaseFees(uint256 _releaseId) external view returns (FeeDistribution[] memory);\\n\\n    /// @notice Get a list of release IDs\\n    /// @param _activeOnly Whether or not to only return active releases\\n    /// @return activeReleases An array of release IDs\\n    function getReleaseIds(bool _activeOnly) external view returns (uint256[] memory);\\n\\n    /// @notice Creates a listing with default slippage\\n    /// @param _releaseId The ID of the release\\n    /// @param _seller The address of the seller\\n    /// @param _pricePerItem The price per item in USD\\n    /// @param _quantity The quantity being listed\\n    /// @param _fundsReceiver The address to receive funds from the sale (if address(0), defaults to seller)\\n    /// @param _payoutCurrency The currency the seller wants to receive payment in\\n    function createListing(\\n        uint256 _releaseId,\\n        address _seller,\\n        uint256 _pricePerItem,\\n        uint256 _quantity,\\n        address _payoutCurrency,\\n        address _fundsReceiver\\n    ) external;\\n\\n    /// @notice Modifies a listing with default slippage\\n    /// @param _listingId The ID of the listing to modify\\n    /// @param _newPricePerItem The new price per item in USD\\n    /// @param _newQuantity The new quantity (if 0, the listing will be removed)\\n    /// @param _payoutCurrency The new payout currency\\n    /// @param _fundsReceiver The address to receive funds from the sale (if address(0), defaults to seller)\\n    function modifyListing(\\n        uint256 _listingId,\\n        uint256 _newPricePerItem,\\n        uint256 _newQuantity,\\n        address _payoutCurrency,\\n        address _fundsReceiver\\n    ) external;\\n\\n    /// @notice Cancels a listing by ID\\n    /// @param _listingId The ID of the listing to cancel\\n    function cancelListing(uint256 _listingId) external;\\n}\\n\",\"keccak256\":\"0x6677168c7caf60c15d5d883cffe5f4a2f958d07d6d4b4ea1cfacf6edc33ec952\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/marketplace/exchange/IGildiExchangeFundManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\n/// @title Gildi Exchange Fund Manager Interface\\n/// @notice Interface for the Gildi Exchange Fund Manager contract.\\n/// @custom:security-contact security@gildi.io\\n/// @author Patrick Fischer (Pathin) > https://pathin.me\\ninterface IGildiExchangeFundManager {\\n    // ========== Structs ==========\\n\\n    /// @notice Represents an fund entry storing the buyer, operator, fundParticipant, and value in Marketplace Currency.\\n    struct Fund {\\n        /// @dev Entity receiving the tokens (beneficiary)\\n        address buyer;\\n        /// @dev Entity that executed the transaction\\n        address operator;\\n        /// @dev Entity with funds in fund (seller or fee recipient)\\n        address fundParticipant;\\n        /// @dev Whether this was executed through a proxy\\n        bool isProxyOperation;\\n        /// @dev Amount in Marketplace Currency\\n        FundAmount amount;\\n        /// @dev Payout currency\\n        address payoutCurrency;\\n    }\\n\\n    /// @notice Represents an amount of tokens in a specific currency\\n    struct FundAmount {\\n        /// @dev The amount of tokens\\n        uint256 value;\\n        /// @dev The address of the currency token\\n        address currencyAddress;\\n    }\\n\\n    // ========== View Functions ==========\\n\\n    /// @notice Checks if a release has any funds\\n    /// @param _releaseId The ID of the release\\n    /// @return True if the release has funds, false otherwise\\n    function releaseHasFunds(uint256 _releaseId) external view returns (bool);\\n\\n    // ========== Non-View Functions ==========\\n\\n    /// @notice Adds funds to fund for a participant\\n    /// @param _releaseId The ID of the release\\n    /// @param _participant The address of the fund participant\\n    /// @param _buyer The address of the buyer\\n    /// @param _operator The address of the operator\\n    /// @param _isProxyOperation Whether this is a proxy operation\\n    /// @param _amount The amount to add to fund\\n    /// @param _amountCurrency The currency of the fund amount\\n    /// @param _payoutCurrency The currency to payout in\\n    function handleAddToFund(\\n        uint256 _releaseId,\\n        address _participant,\\n        address _buyer,\\n        address _operator,\\n        bool _isProxyOperation,\\n        uint256 _amount,\\n        address _amountCurrency,\\n        address _payoutCurrency\\n    ) external;\\n\\n    /// @notice Cancels funds for a release in batches\\n    /// @param _releaseId The ID of the release\\n    /// @param _batchSize The number of funds to process in this batch\\n    /// @return processed The number of funds processed\\n    function handleCancelReleaseFunds(uint256 _releaseId, uint256 _batchSize) external returns (uint256 processed);\\n\\n    /// @notice Claims funds for a participant of a release with custom slippage\\n    /// @param _releaseId The ID of the release\\n    /// @param _fundParticipant The address of the fund participant\\n    /// @param _slippageBps Slippage tolerance in basis points (100 = 1%, 500 = 5%)\\n    function claimFunds(uint256 _releaseId, address _fundParticipant, uint16 _slippageBps) external;\\n\\n    /// @notice Claims funds for a participant of a release with default slippage (5%)\\n    /// @param _releaseId The ID of the release\\n    /// @param _fundParticipant The address of the fund participant\\n    function claimFunds(uint256 _releaseId, address _fundParticipant) external;\\n\\n    /// @notice Claims all funds for a participant across all releases with custom slippage\\n    /// @param _fundParticipant The address of the fund participant\\n    /// @param _slippageBps Slippage tolerance in basis points (100 = 1%, 500 = 5%)\\n    function claimAllFunds(address _fundParticipant, uint16 _slippageBps) external;\\n\\n    /// @notice Claims all funds for a participant across all releases with default slippage (5%)\\n    /// @param _fundParticipant The address of the fund participant\\n    function claimAllFunds(address _fundParticipant) external;\\n}\\n\",\"keccak256\":\"0xeeb65068f4ef93ddff2766e77d514855844ab3402fe8eb2908aacf756af7fc48\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/marketplace/exchange/IGildiExchangeOrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\n/// @title IGildiExchangeOrderBook\\n/// @notice Interface for the Gildi Exchange Order Book, which manages listings and provides order book functionality for the marketplace.\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\ninterface IGildiExchangeOrderBook {\\n    /// @notice Represents a listing in the order book for a specific token release.\\n    struct Listing {\\n        /// @dev A unique identifier for the listing.\\n        uint256 id;\\n        /// @dev The ID of the token release being listed.\\n        uint256 releaseId;\\n        /// @dev The address of the seller who created the listing.\\n        address seller;\\n        /// @dev The price per item in USD.\\n        uint256 pricePerItem;\\n        /// @dev The currency in which the seller wants to receive payment (if different from the active release marketplace currency, a swap will be performed).\\n        address payoutCurrency;\\n        /// @dev The quantity of tokens being listed.\\n        uint256 quantity;\\n        /// @dev Slippage protection in basis points (100 = 1%, 500 = 5%), 0 means no slippage allowed.\\n        uint16 slippageBps;\\n        /// @dev The block timestamp when the listing was created (UNIX timestamp).\\n        uint256 createdAt;\\n        /// @dev The block timestamp when the listing was last modified (UNIX timestamp).\\n        uint256 modifiedAt;\\n        /// @dev The ID of the next listing in the linked list (ordered by price).\\n        uint256 nextListingId;\\n        /// @dev The ID of the previous listing in the linked list (ordered by price).\\n        uint256 prevListingId;\\n        /// @dev Optional address to receive funds from the sale.\\n        address fundsReceiver; // If address(0), defaults to seller\\n    }\\n\\n    /// @notice Contains preview information for a potential purchase.\\n    struct PurchasePreview {\\n        /// @dev The total quantity available for purchase.\\n        uint256 totalQuantityAvailable;\\n        /// @dev The total price in marketplace currency.\\n        uint256 totalPriceInCurrency;\\n        /// @dev The address of the currency used for the purchase.\\n        address currency;\\n        /// @dev The total price in USD (using exchange's priceAskDecimals).\\n        uint256 totalPriceUsd;\\n    }\\n\\n    // ========== View Functions ==========\\n\\n    /// @notice Gets a listing by ID\\n    /// @param _listingId The listing ID\\n    /// @return The listing\\n    function getListing(uint256 _listingId) external view returns (Listing memory);\\n\\n    /// @notice Gets all the listings of a specific seller\\n    /// @param _seller The address of the seller\\n    /// @return An array of listings for the seller\\n    function getListingsOfSeller(address _seller) external view returns (Listing[] memory);\\n\\n    /// @notice Gets all the listings of a specific release, ordered by price\\n    /// @param _releaseId The ID of the release\\n    /// @param _cursor The cursor to start from\\n    /// @param _limit The limit of listings to return\\n    /// @return orderedListings An array of listings for the release\\n    /// @return cursor The cursor to continue from\\n    function getOrderedListings(\\n        uint256 _releaseId,\\n        uint256 _cursor,\\n        uint256 _limit\\n    ) external view returns (Listing[] memory orderedListings, uint256 cursor);\\n\\n    /// @notice Gets the available buy quantity for a user\\n    /// @param _releaseId The release ID\\n    /// @param _user The user address\\n    /// @return The available quantity to buy\\n    function getAvailableBuyQuantity(uint256 _releaseId, address _user) external view returns (uint256);\\n\\n    /// @notice Preview a purchase\\n    /// @param _releaseId The ID of the release to purchase\\n    /// @param _buyer The address of the buyer\\n    /// @param _amountToBuy The amount of tokens to buy\\n    /// @return Preview information for the purchase\\n    function previewPurchase(\\n        uint256 _releaseId,\\n        address _buyer,\\n        uint256 _amountToBuy\\n    ) external view returns (PurchasePreview memory);\\n\\n    /// @notice Gets the first listing ID (with lowest price) for a specific release\\n    /// @param _releaseId The ID of the release\\n    /// @return The ID of the listing with the lowest price for this release\\n    function getHeadListingId(uint256 _releaseId) external view returns (uint256);\\n\\n    /// @notice Gets the next listing ID in the price-ordered linked list\\n    /// @param _listingId The current listing ID\\n    /// @return The ID of the next listing with a higher price, or 0 if none exists\\n    function getNextListingId(uint256 _listingId) external view returns (uint256);\\n\\n    /// @notice Gets the total quantity listed for a specific release\\n    /// @param _releaseId The ID of the release\\n    /// @return The total quantity listed\\n    function listedQuantities(uint256 _releaseId) external view returns (uint256);\\n\\n    // ========== Non-View Functions ==========\\n\\n    /// @notice Creates a listing\\n    /// @param _releaseId The ID of the release\\n    /// @param _seller The address of the seller\\n    /// @param _pricePerItem The price per item\\n    /// @param _quantity The quantity being listed\\n    /// @param _payoutCurrency The payout currency of the listing\\n    /// @param _slippageBps Optional slippage protection in basis points (100 = 1%, 500 = 5%)\\n    /// @dev Takes the slippage setting literally, 0 = no slippage, 10000 = 100%, does not make assumptions about the default, caller must know what they are doing\\n    function handleCreateListing(\\n        uint256 _releaseId,\\n        address _seller,\\n        uint256 _pricePerItem,\\n        uint256 _quantity,\\n        address _payoutCurrency,\\n        address _fundsReceiver,\\n        uint16 _slippageBps\\n    ) external;\\n\\n    /// @notice Modifies an existing listing's price, quantity, and slippage settings\\n    /// @param _listingId The ID of the listing to modify\\n    /// @param _pricePerItem The new price per item\\n    /// @param _quantity The new quantity (if 0, the listing will be removed)\\n    /// @param _payoutCurrency The new payout currency\\n    /// @param _slippageBps Slippage protection in basis points (100 = 1%, 500 = 5%)\\n    /// @dev Takes the slippage setting literally, 0 = no slippage, 10000 = 100%, does not make assumptions about the default, caller must know what they are doing\\n    function handleModifyListing(\\n        uint256 _listingId,\\n        uint256 _pricePerItem,\\n        uint256 _quantity,\\n        address _payoutCurrency,\\n        address _fundsReceiver,\\n        uint16 _slippageBps\\n    ) external;\\n\\n    /// @notice Removes a listing\\n    /// @param _listingId The ID of the listing to cancel\\n    function handleRemoveListing(uint256 _listingId) external;\\n\\n    /// @notice Decreases a listing's quantity after a purchase\\n    /// @param _listingId The ID of the listing\\n    /// @param _quantityToBuy The amount to reduce from the listing's quantity (if this reduces quantity to 0, the listing will be removed)\\n    function handleDecreaseListingQuantity(uint256 _listingId, uint256 _quantityToBuy) external;\\n\\n    /// @notice Unlists all listings of a release in batches.\\n    /// @param _releaseId The ID of the release\\n    /// @param _batchSize The batch size\\n    /// @return processedListings The number of listings processed\\n    function handleUnlistReleaseListings(\\n        uint256 _releaseId,\\n        uint256 _batchSize\\n    ) external returns (uint256 processedListings);\\n}\\n\",\"keccak256\":\"0x0b0980096f2c0300d5980fe93e83b91ba69062043ac6b17a0d36f598b6532c81\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/marketplace/exchange/IGildiExchangePaymentAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\nimport './IGildiExchangeSwapAdapter.sol';\\nimport './IGildiExchange.sol';\\n\\n/// @title IGildiExchangePaymentAggregator\\n/// @notice Interface for marketplace payment operations including swap functionality\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\ninterface IGildiExchangePaymentAggregator {\\n    /// @notice Executes a swap out operation to convert source tokens to a target token.\\n    /// @param _amount The amount of source tokens to swap.\\n    /// @param _sourceCurrency The address of the source token.\\n    /// @param _targetToken The token to swap to.\\n    /// @param _minTargetAmount The minimum amount of target tokens to receive (slippage protection).\\n    /// @param _recipient The recipient of the target tokens.\\n    /// @return targetReceived The amount of target tokens received.\\n    function swapOut(\\n        uint256 _amount,\\n        address _sourceCurrency,\\n        address _targetToken,\\n        uint256 _minTargetAmount,\\n        address _recipient\\n    ) external returns (uint256 targetReceived);\\n\\n    /// @notice Previews a swap out operation to check if there's a valid route and estimate the output amount.\\n    /// @param _amount The amount of source tokens to swap.\\n    /// @param _sourceCurrency The address of the source token.\\n    /// @param _targetToken The token to swap to.\\n    /// @return hasValidRoute Whether there's a valid route for the swap.\\n    /// @return expectedTargetAmount The expected amount of target tokens to receive.\\n    /// @return bestRoute The best route for the swap.\\n    function previewSwapOut(\\n        uint256 _amount,\\n        address _sourceCurrency,\\n        address _targetToken\\n    )\\n        external\\n        view\\n        returns (\\n            bool hasValidRoute,\\n            uint256 expectedTargetAmount,\\n            IGildiExchangeSwapAdapter.QuoteRoute memory bestRoute\\n        );\\n\\n    /// @notice Executes the purchase payment flow.\\n    /// @param _releaseId The release ID.\\n    /// @param _amount The amount to purchase.\\n    /// @param _sourceToken The token used for payment (address(0) means native).\\n    /// @param _sourceMaxAmount Maximum amount of _sourceToken to spend.\\n    /// @return amountUsdSpent The amount spent in USD\\n    function purchase(\\n        uint256 _releaseId,\\n        uint256 _amount,\\n        address _sourceToken,\\n        uint256 _sourceMaxAmount\\n    ) external payable returns (uint256 amountUsdSpent);\\n\\n    /// @notice Estimates the amount of `_sourceToken` required to get `_amount` of `_releaseId` for `_buyer` of the marketplace token and returns the current best route.\\n    /// @param _releaseId The release ID.\\n    /// @param _amount The amount of the release.\\n    /// @param _buyer The buyer of the release.\\n    /// @param _sourceToken The token to swap from.\\n    /// @return sourceNeeded The amount of `_sourceToken` required.\\n    /// @return releaseCurrency The active martketplace currency of the release.\\n    /// @return quoteRoute The route of the quote.\\n    /// @return totalPriceUsd The total price in USD (using exchange's priceAskDecimals).\\n    function estimatePurchase(\\n        uint256 _releaseId,\\n        uint256 _amount,\\n        address _buyer,\\n        address _sourceToken\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 sourceNeeded,\\n            address releaseCurrency,\\n            IGildiExchangeSwapAdapter.QuoteRoute memory quoteRoute,\\n            uint256 totalPriceUsd\\n        );\\n\\n    /// @notice Returns the GildiExchange contract instance.\\n    /// @return The GildiExchange contract.\\n    function getGildiExchange() external view returns (IGildiExchange);\\n}\\n\",\"keccak256\":\"0x5f693a99735cda261ab7a91c04e2948ceef2564327f47b374d02d9a4e66be226\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/marketplace/exchange/IGildiExchangePaymentProcessor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\nimport {IGildiExchange} from './IGildiExchange.sol';\\n\\n/// @title IGildiExchangePaymentProcessor\\n/// @notice Interface for the Gildi Exchange Payment Processor.\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\ninterface IGildiExchangePaymentProcessor {\\n    /// @notice Gets the price feed ID for a currency\\n    /// @param _currency The currency address\\n    /// @return The price feed ID\\n    function getPriceFeedId(address _currency) external view returns (bytes32);\\n\\n    /// @notice Converts a price in USD to the equivalent amount in the specified currency\\n    /// @param _priceInUSD The price in USD to convert\\n    /// @param _currency The address of the currency to convert to\\n    /// @return The equivalent amount in the specified currency\\n    function quoteInCurrency(uint256 _priceInUSD, address _currency) external view returns (uint256);\\n\\n    /// @notice Processes payment with fees.\\n    ///      Calculates fees, transfers funds to fee recipients, and optionally creates funds\\n    /// @param _releaseId The ID of the release\\n    /// @param _buyer The address of the buyer\\n    /// @param _seller The address of the seller\\n    /// @param _value The value to process fees for\\n    /// @param _amountCurrency The currency of the amount\\n    /// @param _createFund Whether to create an fund\\n    /// @param _operator The address of the operator\\n    /// @param _listingId The ID of the listing\\n    /// @param _isProxyOperation Whether this is a proxy operation\\n    /// @param _listingPayoutCurrency The currency to payout in from the listing\\n    function handleProcessPaymentWithFees(\\n        uint256 _releaseId,\\n        address _buyer,\\n        address _seller,\\n        uint256 _value,\\n        address _amountCurrency,\\n        bool _createFund,\\n        address _operator,\\n        bool _isProxyOperation,\\n        uint256 _listingId,\\n        address _listingPayoutCurrency,\\n        uint16 _slippageBps\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2a73ddb220645ad27344e5927a358d45abe2d83db524b8fd6f839c56036e56ea\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/marketplace/exchange/IGildiExchangeSwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\n/// @title IGildiExchangeSwapAdapter\\n/// @notice Interface for a DEX/aggregator adapter that can\\n///         quote & swap from a user\\u2019s source token -> marketplace token\\n///         in an \\\"exact out\\\" fashion.\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\ninterface IGildiExchangeSwapAdapter {\\n    /// @notice The route of the quote\\n    /// @param marketplaceAdapter The address of the marketplace adapter\\n    /// @param route The path of the quote\\n    /// @param fees The fees of the quote\\n    /// @param amounts The amounts of the quote\\n    /// @param virtualAmountsWithoutSlippage The virtual amounts of the quote without slippage\\n    struct QuoteRoute {\\n        address marketplaceAdapter;\\n        address[] route;\\n        uint128[] fees;\\n        uint128[] amounts;\\n        uint128[] virtualAmountsWithoutSlippage;\\n    }\\n\\n    /// @notice The quote for a swap in\\n    /// @param sourceTokenRequired The amount of source token required\\n    /// @param rawQuoteData The raw quote data\\n    /// @param quoteRoute The quote route\\n    /// @param validRoute Whether the route is valid\\n    struct SwapInQuote {\\n        uint256 sourceTokenRequired;\\n        bytes rawQuoteData;\\n        QuoteRoute quoteRoute;\\n        bool validRoute;\\n    }\\n\\n    /// @notice The quote for a swap out\\n    /// @param targetTokenOut The target token\\n    /// @param rawQuoteData The raw quote data\\n    /// @param quoteRoute The quote route\\n    /// @param validRoute Whether the route is valid\\n    struct SwapOutQuote {\\n        uint256 targetTokenOut;\\n        bytes rawQuoteData;\\n        QuoteRoute quoteRoute;\\n        bool validRoute;\\n    }\\n\\n    /// @notice Quotes the amount of `_sourceToken` required to get `_marketplaceAmountDesired` of `_marketplaceToken`.\\n    /// @param _sourceToken The token to swap from.\\n    /// @param _marketplaceToken The token to swap to.\\n    /// @param _marketplaceAmountDesired The amount of `_marketplaceToken` desired.\\n    /// @return quote The swap in quote containing required source token amount, quote data and route information\\n    function quoteSwapIn(\\n        address _sourceToken,\\n        address _marketplaceToken,\\n        uint256 _marketplaceAmountDesired\\n    ) external view returns (SwapInQuote memory quote);\\n\\n    /// @notice Performs an \\\"exact out\\\" swap to get `_marketplaceAmount` of `_marketplaceToken`.\\n    /// @param _sourceToken The token to swap from.\\n    /// @param _marketplaceToken The token to swap to.\\n    /// @param _sourceAmountMax The max `_sourceToken` we can spend (slippage buffer).\\n    /// @param _marketplaceAmount The exact marketplace tokens we want out.\\n    /// @param _to The recipient of the marketplace tokens.\\n    /// @param _quoteData The data previously returned by `quoteSwapIn`.\\n    function swapIn(\\n        address _sourceToken,\\n        address _marketplaceToken,\\n        uint256 _sourceAmountMax,\\n        uint256 _marketplaceAmount,\\n        address _to,\\n        bytes calldata _quoteData\\n    ) external returns (uint256 sourceSpent);\\n\\n    /// @notice Quotes the amount of `_targetToken` you can get by providing `_sourceAmount` of `_sourceToken`.\\n    /// @param _sourceToken The token to swap from.\\n    /// @param _targetToken The token to swap to.\\n    /// @param _sourceAmount The amount of `_sourceToken` available.\\n    /// @return quote The quote.\\n    function quoteSwapOut(\\n        address _sourceToken,\\n        address _targetToken,\\n        uint256 _sourceAmount\\n    ) external view returns (SwapOutQuote memory quote);\\n\\n    /// @notice Performs an \\\"exact in\\\" swap to convert `_sourceAmount` of `_sourceToken` into `_targetToken`.\\n    /// @param _sourceToken The token to swap from.\\n    /// @param _targetToken The token to swap to.\\n    /// @param _sourceAmount The exact amount of `_sourceToken` to swap.\\n    /// @param _minTargetAmount The minimum amount of `_targetToken` to receive (slippage protection).\\n    /// @param _to The recipient of the target tokens.\\n    /// @param _quoteData The data previously returned by `quoteSwapOut`.\\n    function swapOut(\\n        address _sourceToken,\\n        address _targetToken,\\n        uint256 _sourceAmount,\\n        uint256 _minTargetAmount,\\n        address _to,\\n        bytes calldata _quoteData\\n    ) external returns (uint256 targetReceived);\\n}\\n\",\"keccak256\":\"0x05e5faabc9b83ea2065e796a915d917eaf2d0a9906dfaf78ae6e2e4868a7e7c6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/oracles/price/IGildiPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\n\\npragma solidity 0.8.24;\\n\\nimport './IGildiPriceResolver.sol';\\n\\n/// @title Gildi Price Oracle Interface\\n/// @notice Interface for the consumer-facing Gildi Price Oracle\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\ninterface IGildiPriceOracle is IGildiPriceResolver {\\n    /// @notice Represents an asset in the system\\n    struct Asset {\\n        /// @dev Unique identifier for the asset\\n        uint256 id;\\n        /// @dev The asset's symbol (e.g., BTC, ETH)\\n        string symbol;\\n        /// @dev The asset's full name\\n        string name;\\n    }\\n\\n    /// @notice Information about a trading pair\\n    struct PairInfo {\\n        /// @dev Unique identifier for the pair\\n        bytes32 pairId;\\n        /// @dev The base asset in the pair\\n        Asset baseAsset;\\n        /// @dev The quote asset in the pair\\n        Asset quoteAsset;\\n    }\\n\\n    /// @dev Thrown when an invalid pair ID is provided\\n    error InvalidPairId();\\n\\n    /// @notice Adds a pair using asset IDs\\n    /// @param _baseAssetId The ID of the base asset\\n    /// @param _quoteAssetId The ID of the quote asset\\n    /// @param _resolver The resolver contract for the asset pair\\n    function addPair(uint256 _baseAssetId, uint256 _quoteAssetId, IGildiPriceResolver _resolver) external;\\n\\n    /// @notice Retrieves the resolver for a specific asset pair\\n    /// @param _pairId The identifier of the asset pair\\n    function getResolver(bytes32 _pairId) external view returns (IGildiPriceResolver resolver);\\n\\n    /// @notice Fetches a list of all registered pairs in \\\"BASE/QUOTE\\\" string form\\n    /// @return An array of registered pairs\\n    function getPairs() external view returns (PairInfo[] memory);\\n\\n    /// @notice Adds a new asset\\n    /// @param _symbol The symbol of the asset\\n    /// @param _name The name of the asset\\n    /// @return The ID of the newly added asset\\n    function addAsset(string memory _symbol, string memory _name) external returns (uint256);\\n\\n    /// @notice Returns all registered assets\\n    /// @return An array of registered assets\\n    function getAssets() external view returns (Asset[] memory);\\n\\n    /// @notice Returns an asset by ID\\n    /// @param _assetId The ID of the asset\\n    /// @return The asset details\\n    function getAssetById(uint256 _assetId) external view returns (Asset memory);\\n\\n    /// @notice Returns pairs that use the specified asset ID as quote\\n    /// @param _quoteAssetId The ID of the quote asset\\n    /// @return An array of registered pairs\\n    function getPairsByQuoteAsset(uint256 _quoteAssetId) external view returns (string[] memory);\\n\\n    /// @notice Retrieves price data by numeric IDs\\n    /// @param _baseAssetId The ID of the base asset\\n    /// @param _quoteAssetId The ID of the quote asset\\n    /// @return The price data for the asset pair\\n    function getPriceById(uint256 _baseAssetId, uint256 _quoteAssetId) external view returns (PriceData memory);\\n\\n    /// @notice Checks if a pair with the given ID exists\\n    /// @param _pairId The identifier of the asset pair\\n    /// @return True if the pair exists\\n    function pairExistsById(bytes32 _pairId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6c406a4d51283a3acb73db7da552e9d22df34f34b7f8f3f772ba04b844419ddd\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/oracles/price/IGildiPriceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\n\\npragma solidity 0.8.24;\\n\\n/// @title Gildi Price Resolver Interface\\n/// @notice Interface that all price resolvers must implement\\n/// @custom:security-contact security@gildi.io\\n/// @author Patrick Fischer\\ninterface IGildiPriceResolver {\\n    /// @notice Price data struct\\n    struct PriceData {\\n        /// @notice The price of the base asset in terms of the quote asset\\n        uint256 price;\\n        /// @notice The number of decimals for the price\\n        uint8 decimals;\\n        /// @notice The UNIX timestamp when the price was last updated\\n        uint256 timestamp;\\n    }\\n\\n    /// @notice Retrieves the price data for a given pair ID\\n    /// @param pairId The identifier of the asset pair\\n    /// @return price The price data for the asset pair\\n    function getPrice(bytes32 pairId) external view returns (PriceData memory price);\\n\\n    /// @notice Retrieves the price data for a given pair ID, with a maximum age\\n    /// @param pairId The identifier of the asset pair\\n    /// @param age The maximum age of the price data in seconds\\n    function getPriceNoOlderThan(bytes32 pairId, uint256 age) external view returns (PriceData memory priceData);\\n}\\n\",\"keccak256\":\"0x82a4c66f173ce75a38cdc50d75c806f13fe99ed53bc3f1458fb50348dcf77b75\",\"license\":\"UNLICENSED\"},\"contracts/libraries/marketplace/exchange/SharedErrors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\n/// @title SharedErrors\\n/// @notice Common error definitions shared across Gildi Exchange contracts\\n/// @dev This library consolidates error definitions to avoid duplication\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\nlibrary SharedErrors {\\n    /// @dev Emitted when a function parameter is invalid or out-of-range (e.g. zero batchSize, zero price, etc.)\\n    error ParamError();\\n\\n    /// @dev Emitted when an operation is not allowed for the caller\\n    error NotAllowed();\\n\\n    /// @dev Emitted when the caller is invalid\\n    error InvalidCaller();\\n\\n    /// @dev Emitted when a listing ID is invalid or does not match storage data\\n    /// @param listingId The ID that caused the error\\n    error ListingError(uint256 listingId);\\n}\\n\",\"keccak256\":\"0x77bb837a7be810836ef7bcb9a94e0224aa9fd24b5c868114da1be91a30cf515b\",\"license\":\"UNLICENSED\"},\"contracts/marketplace/exchange/GildiExchangeFundManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {ReentrancyGuardUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol';\\nimport {\\n    IGildiExchange,\\n    IGildiExchangePaymentAggregator\\n} from '../../interfaces/marketplace/exchange/IGildiExchange.sol';\\nimport {IGildiExchangeFundManager} from '../../interfaces/marketplace/exchange/IGildiExchangeFundManager.sol';\\nimport {EnumerableSet} from '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {SharedErrors} from '../../libraries/marketplace/exchange/SharedErrors.sol';\\n\\n/// @title Gildi Exchange Fund Manager\\n/// @notice Manages fund functionality for the Gildi Exchange marketplace.\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\ncontract GildiExchangeFundManager is Initializable, ReentrancyGuardUpgradeable, IGildiExchangeFundManager {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using SafeERC20 for IERC20;\\n\\n    // ========== Events ==========\\n    /// @notice Emitted when a user claims funds\\n    /// @param releaseId The ID of the release\\n    /// @param fundParticipant The fund participant (seller or fee participant) claiming funds\\n    /// @param amount The amount claimed\\n    /// @param currency The currency of the fund\\n    event FundClaimed(uint256 indexed releaseId, address indexed fundParticipant, uint256 amount, address currency);\\n\\n    /// @notice Emitted when an fund is cancelled and funds are returned\\n    /// @param releaseId The ID of the release\\n    /// @param fundParticipant The fund participant (seller or fee participant)\\n    /// @param returnedTo The address that received the returned funds\\n    /// @param amount The amount returned\\n    /// @param currency The currency of the fund\\n    event FundCancelled(\\n        uint256 indexed releaseId,\\n        address indexed fundParticipant,\\n        address indexed returnedTo,\\n        uint256 amount,\\n        address currency\\n    );\\n\\n    /// @notice Emitted when an fund is added\\n    /// @param releaseId The ID of the release\\n    /// @param fundParticipant The fund participant (seller or fee participant)\\n    /// @param amount The amount added\\n    /// @param amountCurrency The currency of the fund amount\\n    /// @param payoutCurrency The currency to payout in\\n    event FundAdded(\\n        uint256 indexed releaseId,\\n        address indexed fundParticipant,\\n        uint256 amount,\\n        address amountCurrency,\\n        address payoutCurrency\\n    );\\n\\n    /// @notice Emitted when funds are transferred to a participant\\n    /// @param releaseId The ID of the release\\n    /// @param from The contract address (normally this contract)\\n    /// @param to The fund participant receiving the funds\\n    /// @param sourceToken The source token used for payment\\n    /// @param amount The amount of source token\\n    /// @param payoutToken The token received by the recipient (may differ from sourceToken if swapped)\\n    /// @param swapAmount The amount received after swap (if performed)\\n    /// @param swapRequested Whether a token swap was requested\\n    /// @param swapSuccessful Whether the swap was successful (if requested)\\n    /// @param slippageBps The slippage tolerance in basis points used for swaps\\n    event FundTransferred(\\n        uint256 indexed releaseId,\\n        address indexed from,\\n        address indexed to,\\n        address sourceToken,\\n        uint256 amount,\\n        address payoutToken,\\n        uint256 swapAmount,\\n        bool swapRequested,\\n        bool swapSuccessful,\\n        uint16 slippageBps\\n    );\\n\\n    // ========== Errors ==========\\n    /// @dev Error thrown when an incompatible currency is provided\\n    error InvalidCurrency();\\n\\n    /// @dev Error thrown when a fund is not found\\n    /// @param releaseId The ID of the release\\n    /// @param participant The address of the fund participant\\n    error FundNotFound(uint256 releaseId, address participant);\\n\\n    // ========== Structs ==========\\n    /// @notice Structure to hold pending fund amounts for a release\\n    struct PendingFundAmounts {\\n        /// @dev The ID of the release\\n        uint256 releaseId;\\n        /// @dev The list of participants with funds\\n        address[] participants;\\n        /// @dev The fund amounts for each participant\\n        FundAmount[] amounts;\\n        /// @dev Whether the funds are claimable\\n        bool claimable;\\n    }\\n\\n    // ========== Constants ==========\\n    /// @notice Default slippage tolerance in basis points (1%)\\n    uint16 public constant DEFAULT_SLIPPAGE_BPS = 100;\\n\\n    // ========== Storage Variables ==========\\n\\n    /// @notice The GildiExchange contract that calls this contract\\n    IGildiExchange public gildiExchange;\\n\\n    /// @notice A set of release IDs that have funds\\n    EnumerableSet.UintSet private releaseIdsWithFunds;\\n\\n    /// @notice Maps release IDs to the funds for each participant\\n    /// @dev releaseId => participant => funds[]\\n    mapping(uint256 => mapping(address => Fund[])) private releaseFundsByParticipant;\\n\\n    /// @notice Maps release IDs to all fund participants\\n    /// @dev releaseId => participants[]\\n    mapping(uint256 => address[]) private releaseFundParticipants;\\n\\n    /// @notice Maps release IDs to the total fund amount for each participant\\n    /// @dev releaseId => participant => amount\\n    mapping(uint256 => mapping(address => FundAmount)) private releaseFundAmountByParticipant;\\n\\n    /// @notice Ensures that only the GildiExchange contract can call this function\\n    modifier onlyGildiExchange() {\\n        if (msg.sender != address(gildiExchange)) {\\n            revert SharedErrors.InvalidCaller();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Ensures that only the payment processor can call this function\\n    modifier onlyPaymentProcessor() {\\n        IGildiExchange.AppEnvironment memory env = gildiExchange.getAppEnvironment();\\n        if (msg.sender != address(env.settings.paymentProcessor)) {\\n            revert SharedErrors.InvalidCaller();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyClaimer() {\\n        IGildiExchange.AppEnvironment memory env = gildiExchange.getAppEnvironment();\\n        bytes32 claimerRole = env.claimerRole;\\n        if (!gildiExchange.hasRole(claimerRole, msg.sender)) {\\n            revert SharedErrors.InvalidCaller();\\n        }\\n        _;\\n    }\\n\\n    // ========== Constructor and Initializer ==========\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the contract\\n    /// @param _gildiExchange The address of the GildiExchange contract\\n    function initialize(address _gildiExchange) external initializer {\\n        __ReentrancyGuard_init();\\n\\n        gildiExchange = IGildiExchange(_gildiExchange);\\n    }\\n\\n    // ========== External View Functions ==========\\n\\n    /// @notice Gets all fund participants for a release\\n    /// @param _releaseId The ID of the release\\n    /// @return An array of participant addresses\\n    function getReleaseFundParticipants(uint256 _releaseId) external view returns (address[] memory) {\\n        return releaseFundParticipants[_releaseId];\\n    }\\n\\n    /// @notice Gets the total fund amount for a participant of a release\\n    /// @param _releaseId The ID of the release\\n    /// @param _participant The address of the fund participant\\n    /// @return The fund amount details\\n    function getReleaseFundAmount(uint256 _releaseId, address _participant) external view returns (FundAmount memory) {\\n        return releaseFundAmountByParticipant[_releaseId][_participant];\\n    }\\n\\n    /// @notice Retrieves funds for a participant of a release\\n    /// @param _releaseId The ID of the release\\n    /// @param _participant The address of the fund participant\\n    /// @param _cursor The starting index for pagination\\n    /// @param _length The number of funds to retrieve\\n    /// @return funds An array of funds\\n    /// @return nextCursor The next cursor for pagination\\n    function getReleaseFunds(\\n        uint256 _releaseId,\\n        address _participant,\\n        uint256 _cursor,\\n        uint256 _length\\n    ) external view returns (Fund[] memory funds, uint256 nextCursor) {\\n        Fund[] storage participantFunds = releaseFundsByParticipant[_releaseId][_participant];\\n        if (_cursor >= participantFunds.length) {\\n            return (new Fund[](0), participantFunds.length);\\n        }\\n\\n        // Default length: 100\\n        if (_length == 0) {\\n            _length = 100;\\n        }\\n\\n        // Return the funds starting from the cursor and limited by length\\n        uint256 start = _cursor;\\n        uint256 end = start + _length;\\n        if (end > participantFunds.length) {\\n            end = participantFunds.length;\\n        }\\n\\n        // Return the funds\\n        funds = new Fund[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            funds[i - start] = participantFunds[i];\\n        }\\n\\n        nextCursor = end;\\n    }\\n\\n    /// @inheritdoc IGildiExchangeFundManager\\n    function releaseHasFunds(uint256 _releaseId) external view returns (bool) {\\n        return releaseIdsWithFunds.contains(_releaseId);\\n    }\\n\\n    /// @notice Gets all release IDs that have funds\\n    /// @return An array of release IDs that currently have active funds\\n    function getReleaseIdsWithFunds() external view returns (uint256[] memory) {\\n        uint256 length = releaseIdsWithFunds.length();\\n        uint256[] memory ids = new uint256[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            ids[i] = releaseIdsWithFunds.at(i);\\n        }\\n\\n        return ids;\\n    }\\n\\n    // ========== External Non-View Functions ==========\\n\\n    /// @inheritdoc IGildiExchangeFundManager\\n    function handleAddToFund(\\n        uint256 _releaseId,\\n        address _participant,\\n        address _buyer,\\n        address _operator,\\n        bool _isProxyOperation,\\n        uint256 _amount,\\n        address _amountCurrency,\\n        address _payoutCurrency\\n    ) external onlyPaymentProcessor {\\n        // Create or add to fund\\n        if (releaseFundsByParticipant[_releaseId][_participant].length == 0) {\\n            releaseFundParticipants[_releaseId].push(_participant);\\n            // Add release to releaseIdsWithFunds if not already added\\n            if (!releaseIdsWithFunds.contains(_releaseId)) {\\n                releaseIdsWithFunds.add(_releaseId);\\n            }\\n        }\\n\\n        releaseFundsByParticipant[_releaseId][_participant].push(\\n            Fund({\\n                buyer: _buyer,\\n                operator: _operator,\\n                fundParticipant: _participant,\\n                isProxyOperation: _isProxyOperation,\\n                amount: FundAmount(_amount, _amountCurrency),\\n                payoutCurrency: _payoutCurrency\\n            })\\n        );\\n\\n        // Update total fund amount\\n        FundAmount storage fundAmount = releaseFundAmountByParticipant[_releaseId][_participant];\\n        fundAmount.value += _amount;\\n\\n        if (fundAmount.currencyAddress == address(0)) {\\n            fundAmount.currencyAddress = _amountCurrency;\\n        } else if (fundAmount.currencyAddress != _amountCurrency) {\\n            revert InvalidCurrency();\\n        }\\n\\n        // Emit event for fund added\\n        emit FundAdded(_releaseId, _participant, _amount, _amountCurrency, _payoutCurrency);\\n    }\\n\\n    /// @notice Claims funds for a participant of a release\\n    /// @param _releaseId The ID of the release\\n    /// @param _fundParticipant The address of the fund participant\\n    /// @param _slippageBps Optional slippage tolerance in basis points (100 = 1%, 500 = 5%)\\n    function claimFunds(uint256 _releaseId, address _fundParticipant, uint16 _slippageBps) external nonReentrant {\\n        _claimFunds(_releaseId, _fundParticipant, _slippageBps);\\n    }\\n\\n    /// @notice Claims funds for a participant of a release with default slippage (5%)\\n    /// @param _releaseId The ID of the release\\n    /// @param _fundParticipant The address of the fund participant\\n    function claimFunds(uint256 _releaseId, address _fundParticipant) external nonReentrant {\\n        _claimFunds(_releaseId, _fundParticipant, DEFAULT_SLIPPAGE_BPS);\\n    }\\n\\n    /// @notice Claims all funds for a participant across all releases\\n    /// @param _fundParticipant The address of the fund participant\\n    /// @param _slippageBps Optional slippage tolerance in basis points (100 = 1%, 500 = 5%)\\n    function claimAllFunds(address _fundParticipant, uint16 _slippageBps) external nonReentrant {\\n        _claimAllFunds(_fundParticipant, _slippageBps);\\n    }\\n\\n    /// @notice Claims all funds for a participant across all releases with default slippage (5%)\\n    /// @param _fundParticipant The address of the fund participant\\n    function claimAllFunds(address _fundParticipant) external nonReentrant {\\n        _claimAllFunds(_fundParticipant, DEFAULT_SLIPPAGE_BPS);\\n    }\\n\\n    /// @notice Claims all funds for all participants of a specific release\\n    /// @param _releaseId The ID of the release\\n    function claimAllFundsByReleaseId(uint256 _releaseId) external nonReentrant {\\n        if (!_isClaimable(_releaseId)) {\\n            revert SharedErrors.NotAllowed();\\n        }\\n\\n        _claimAllFundsByReleaseId(_releaseId);\\n    }\\n\\n    /// @notice Claims all funds for all participants across all releases\\n    function claimAllFunds() external nonReentrant {\\n        for (uint256 i = releaseIdsWithFunds.length(); i > 0; i--) {\\n            uint256 releaseId = releaseIdsWithFunds.at(i - 1);\\n\\n            if (_isClaimable(releaseId)) {\\n                _claimAllFundsByReleaseId(releaseId);\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IGildiExchangeFundManager\\n    function handleCancelReleaseFunds(\\n        uint256 _releaseId,\\n        uint256 _batchSize\\n    ) external onlyGildiExchange returns (uint256 processed) {\\n        uint256 i = 0;\\n\\n        // Process funds\\n        while (releaseFundParticipants[_releaseId].length > 0 && i < _batchSize) {\\n            uint256 length = releaseFundParticipants[_releaseId].length;\\n            address fundParticipant = releaseFundParticipants[_releaseId][length - 1];\\n            Fund[] storage funds = releaseFundsByParticipant[_releaseId][fundParticipant];\\n\\n            while (funds.length > 0 && i < _batchSize) {\\n                Fund storage fund = funds[funds.length - 1];\\n\\n                // Determine the correct refund participant based on operation type\\n                address refundParticipant = fund.isProxyOperation ? fund.buyer : fund.operator;\\n\\n                try IERC20(fund.amount.currencyAddress).transfer(refundParticipant, fund.amount.value) returns (\\n                    bool success\\n                ) {\\n                    if (!success) continue; // Skip if transfer failed, silently fail, token might be locked\\n                    emit FundCancelled(\\n                        _releaseId,\\n                        fund.fundParticipant,\\n                        refundParticipant,\\n                        fund.amount.value,\\n                        fund.amount.currencyAddress\\n                    );\\n                    funds.pop();\\n                } catch {}\\n                i++;\\n            }\\n\\n            if (funds.length == 0) {\\n                delete releaseFundsByParticipant[_releaseId][fundParticipant];\\n                delete releaseFundAmountByParticipant[_releaseId][fundParticipant];\\n                releaseFundParticipants[_releaseId].pop();\\n\\n                // Remove release ID from set if no more participants\\n                if (releaseFundParticipants[_releaseId].length == 0) {\\n                    releaseIdsWithFunds.remove(_releaseId);\\n                }\\n            }\\n        }\\n\\n        return i;\\n    }\\n\\n    // ========== Public View Functions ==========\\n\\n    /// @notice Fetches pending fund amounts for a participant and release\\n    /// @dev if releaseId is 0, fetches for all releases, if participant is 0, fetches for all participants\\n    /// @param _releaseId The ID of the release\\n    /// @param _participant The address of the fund participant\\n    /// @return An array of pending fund amounts with claimable status\\n    function fetchPendingFundAmounts(\\n        uint256 _releaseId,\\n        address _participant\\n    ) public view returns (PendingFundAmounts[] memory) {\\n        uint256[] memory releaseIds;\\n\\n        if (_releaseId != 0) {\\n            releaseIds = new uint256[](1);\\n            releaseIds[0] = _releaseId;\\n        } else {\\n            uint256 length = releaseIdsWithFunds.length();\\n            releaseIds = new uint256[](length);\\n\\n            for (uint256 i = 0; i < length; i++) {\\n                releaseIds[i] = releaseIdsWithFunds.at(i);\\n            }\\n        }\\n\\n        PendingFundAmounts[] memory tempPendingReleaseAmounts = new PendingFundAmounts[](releaseIds.length);\\n\\n        uint256 countRelease = 0;\\n        for (uint256 i = 0; i < releaseIds.length; i++) {\\n            uint256 releaseId = releaseIds[i];\\n            address[] storage participants = releaseFundParticipants[releaseId];\\n            if (participants.length == 0) {\\n                // Release has no funds\\n                continue;\\n            }\\n\\n            uint256 countParticipants = 0;\\n            address[] memory tempParticipants = new address[](participants.length);\\n            FundAmount[] memory tempFundAmounts = new FundAmount[](participants.length);\\n\\n            for (uint256 j = 0; j < participants.length; j++) {\\n                address participant = participants[j];\\n                if (_participant != address(0) && participant != _participant) {\\n                    continue;\\n                }\\n\\n                FundAmount storage fundAmount = releaseFundAmountByParticipant[releaseId][participant];\\n                if (fundAmount.value == 0) {\\n                    continue;\\n                }\\n\\n                tempParticipants[countParticipants] = participant;\\n                tempFundAmounts[countParticipants] = fundAmount;\\n                countParticipants++;\\n            }\\n\\n            if (countParticipants == 0) {\\n                continue;\\n            }\\n\\n            // Resize participants and amounts arrays\\n            address[] memory resizedParticipants = new address[](countParticipants);\\n            FundAmount[] memory resizedFundAmounts = new FundAmount[](countParticipants);\\n            for (uint256 k = 0; k < countParticipants; k++) {\\n                resizedParticipants[k] = tempParticipants[k];\\n                resizedFundAmounts[k] = tempFundAmounts[k];\\n            }\\n\\n            tempPendingReleaseAmounts[countRelease] = PendingFundAmounts({\\n                releaseId: releaseId,\\n                participants: resizedParticipants,\\n                amounts: resizedFundAmounts,\\n                claimable: _isClaimable(releaseId)\\n            });\\n            countRelease++;\\n        }\\n\\n        // Resize pending release amounts array\\n        PendingFundAmounts[] memory pendingReleaseAmounts = new PendingFundAmounts[](countRelease);\\n        for (uint256 i = 0; i < countRelease; i++) {\\n            pendingReleaseAmounts[i] = tempPendingReleaseAmounts[i];\\n        }\\n\\n        return pendingReleaseAmounts;\\n    }\\n\\n    // ========== Internal Functions ==========\\n\\n    /// @dev Claims funds for a specific participant of a release\\n    /// @param _releaseId The ID of the release\\n    /// @param _fundParticipant The address of the fund participant\\n    /// @param _slippageBps Slippage tolerance in basis points (100 = 1%, 500 = 5%)\\n    function _claimFunds(uint256 _releaseId, address _fundParticipant, uint16 _slippageBps) internal {\\n        if (_fundParticipant == address(0)) {\\n            revert SharedErrors.ParamError();\\n        }\\n\\n        if (gildiExchange.isInInitialSale(_releaseId)) {\\n            revert SharedErrors.NotAllowed();\\n        }\\n\\n        bytes32 claimerRole = gildiExchange.getAppEnvironment().claimerRole;\\n        // If the caller does not have CLAIMER_ROLE he is only allowed to claim funds for himself\\n        if (!gildiExchange.hasRole(claimerRole, msg.sender) && msg.sender != _fundParticipant) {\\n            revert SharedErrors.NotAllowed();\\n        }\\n\\n        // Check if there's an fund to claim\\n        FundAmount storage fundAmount = releaseFundAmountByParticipant[_releaseId][_fundParticipant];\\n        if (fundAmount.value == 0) revert FundNotFound(_releaseId, _fundParticipant);\\n\\n        // Get the fund details to determine the payout currency\\n        Fund[] storage funds = releaseFundsByParticipant[_releaseId][_fundParticipant];\\n        if (funds.length == 0) revert FundNotFound(_releaseId, _fundParticipant);\\n\\n        // Cache these values to reduce stack depth\\n        uint256 amountValue = fundAmount.value;\\n        address currencyAddress = fundAmount.currencyAddress;\\n        address payoutCurrency = funds[0].payoutCurrency;\\n\\n        // Transfer logic\\n        _handleFundTransfer(_releaseId, _fundParticipant, amountValue, currencyAddress, payoutCurrency, _slippageBps);\\n\\n        // Clean up fund data\\n        delete releaseFundsByParticipant[_releaseId][_fundParticipant];\\n        delete releaseFundAmountByParticipant[_releaseId][_fundParticipant];\\n\\n        // Remove fund participant from array using swap-and-pop pattern\\n        address[] storage fundParticipants = releaseFundParticipants[_releaseId];\\n        uint256 length = fundParticipants.length;\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            if (fundParticipants[i] == _fundParticipant) {\\n                // Replace with last element and pop\\n                fundParticipants[i] = fundParticipants[length - 1];\\n                fundParticipants.pop();\\n                break;\\n            }\\n        }\\n\\n        // Remove release ID from set if no more participants\\n        if (fundParticipants.length == 0) {\\n            releaseIdsWithFunds.remove(_releaseId);\\n        }\\n\\n        emit FundClaimed(_releaseId, _fundParticipant, amountValue, currencyAddress);\\n    }\\n\\n    /// @dev Claims all funds for a participant across all releases. Iterates backwards\\n    /// over releases and participants to safely handle state modifications during claims.\\n    /// @param _fundParticipant The address of the fund participant\\n    /// @param _slippageBps Slippage tolerance in basis points (100 = 1%, 500 = 5%)\\n    function _claimAllFunds(address _fundParticipant, uint16 _slippageBps) internal {\\n        for (uint256 i = releaseIdsWithFunds.length(); i > 0; i--) {\\n            uint256 releaseId = releaseIdsWithFunds.at(i - 1);\\n\\n            if (!_isClaimable(releaseId)) {\\n                continue;\\n            }\\n\\n            address[] storage participants = releaseFundParticipants[releaseId];\\n            // Iterate backwards to avoid skipping elements on mutation\\n            for (uint256 j = participants.length; j > 0; j--) {\\n                if (_fundParticipant != address(0) && _fundParticipant == participants[j - 1]) {\\n                    _claimFunds(releaseId, _fundParticipant, _slippageBps);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Claims all funds for all participants of a specific release\\n    /// @param _releaseId The ID of the release\\n    function _claimAllFundsByReleaseId(uint256 _releaseId) internal onlyClaimer {\\n        address[] storage participants = releaseFundParticipants[_releaseId];\\n        for (uint256 i = participants.length; i > 0; i--) {\\n            address fundParticipant = participants[i - 1];\\n            _claimFunds(_releaseId, fundParticipant, DEFAULT_SLIPPAGE_BPS);\\n        }\\n    }\\n\\n    // ========== Private Functions ==========\\n\\n    /// @dev Checks if a release is claimable\\n    /// @param _releaseId The ID of the release\\n    /// @return True if the release is claimable, false otherwise\\n    function _isClaimable(uint256 _releaseId) private view returns (bool) {\\n        if (gildiExchange.isInInitialSale(_releaseId) || !releaseIdsWithFunds.contains(_releaseId)) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Handles the transfer logic for a fund claim\\n    /// @param _fundParticipant The address of the fund participant\\n    /// @param _amount The amount to transfer\\n    /// @param _currencyAddress The currency address of the fund\\n    /// @param _payoutCurrency The preferred payout currency\\n    /// @param _slippageBps Slippage tolerance in basis points\\n    function _handleFundTransfer(\\n        uint256 _releaseId,\\n        address _fundParticipant,\\n        uint256 _amount,\\n        address _currencyAddress,\\n        address _payoutCurrency,\\n        uint16 _slippageBps\\n    ) private {\\n        uint16 basisPoints = gildiExchange.getAppEnvironment().basisPoints;\\n\\n        if (_slippageBps > basisPoints) {\\n            revert SharedErrors.ParamError();\\n        }\\n\\n        bool swapRequested = false;\\n        bool swapSuccessful = false;\\n        address finalPayoutCurrency = _payoutCurrency;\\n        uint256 finalAmount = _amount; // Initialize to original amount, will be updated if swap is successful\\n\\n        // If payout currency is the same as the fund currency or not specified, direct transfer\\n        if (_payoutCurrency == address(0) || _payoutCurrency == _currencyAddress) {\\n            IERC20(_currencyAddress).safeTransfer(_fundParticipant, _amount);\\n            finalPayoutCurrency = _currencyAddress;\\n        } else {\\n            swapRequested = true;\\n\\n            // Get the payment aggregator from the exchange\\n            IGildiExchangePaymentAggregator paymentAggregator = gildiExchange\\n                .getAppEnvironment()\\n                .settings\\n                .paymentAggregator;\\n\\n            // If payment aggregator is not set, fallback to direct transfer\\n            if (address(paymentAggregator) == address(0)) {\\n                IERC20(_currencyAddress).safeTransfer(_fundParticipant, _amount);\\n                finalPayoutCurrency = _currencyAddress;\\n            } else {\\n                // Approve the payment aggregator to spend the tokens\\n                IERC20 sourceToken = IERC20(_currencyAddress);\\n                uint256 allowance = sourceToken.allowance(address(this), address(paymentAggregator));\\n                if (allowance < _amount) {\\n                    sourceToken.forceApprove(address(paymentAggregator), type(uint256).max);\\n                }\\n\\n                // Preview the swap to get expected amount\\n                (bool hasValidRoute, uint256 expectedAmount, ) = paymentAggregator.previewSwapOut(\\n                    _amount,\\n                    _currencyAddress,\\n                    _payoutCurrency\\n                );\\n                if (hasValidRoute && expectedAmount > 0) {\\n                    // Calculate minimum amount based on slippage (10000 - slippageBps) / 10000\\n                    uint256 minAmount = (expectedAmount * (basisPoints - _slippageBps)) / basisPoints;\\n                    try\\n                        paymentAggregator.swapOut(\\n                            _amount,\\n                            _currencyAddress,\\n                            _payoutCurrency,\\n                            minAmount,\\n                            _fundParticipant\\n                        )\\n                    returns (uint256 swapAmount) {\\n                        // Swap successful\\n                        swapSuccessful = true;\\n                        finalPayoutCurrency = _payoutCurrency;\\n                        finalAmount = swapAmount;\\n                    } catch {\\n                        // Swap failed, fallback to direct transfer\\n                        sourceToken.safeTransfer(_fundParticipant, _amount);\\n                        finalPayoutCurrency = _currencyAddress;\\n                    }\\n                } else {\\n                    // No valid route, fallback to direct transfer\\n                    sourceToken.safeTransfer(_fundParticipant, _amount);\\n                    finalPayoutCurrency = _currencyAddress;\\n                }\\n            }\\n        }\\n\\n        // Emit fund transferred event\\n        emit FundTransferred(\\n            _releaseId,\\n            address(this),\\n            _fundParticipant,\\n            _currencyAddress,\\n            _amount,\\n            finalPayoutCurrency,\\n            finalAmount,\\n            swapRequested,\\n            swapSuccessful,\\n            _slippageBps\\n        );\\n    }\\n\\n    // ---------------------------------------------------------------------------\\n    // Fallback functions\\n    // ---------------------------------------------------------------------------\\n\\n    /// @notice Fallback function to prevent direct Ether transfers\\n    fallback() external payable {\\n        revert SharedErrors.NotAllowed();\\n    }\\n\\n    /// @notice Fallback function to prevent direct Ether transfers\\n    receive() external payable {\\n        revert SharedErrors.NotAllowed();\\n    }\\n}\\n\",\"keccak256\":\"0x4204275f062af95e10c79f9298b6620041a2e1167809b48fca1cc9989480e032\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60808060405234620000bd577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081549060ff8260401c16620000ae57506001600160401b036002600160401b03198282160162000068575b604051614f6e9081620000c38239f35b6001600160401b031990911681179091556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a138808062000058565b63f92ee8a960e01b8152600490fd5b600080fdfe608080604052600436101561003a575b50361561002857604051631eb49d6d60e11b8152600490fd5b604051631eb49d6d60e11b8152600490fd5b60003560e01c9081630bd01dcb1461371b5750806321f22dc514612c9c578063390d6855146123b457806354b660a71461236557806356f8ab1f1461234957806392b01b46146121f35780639a45db001461213b578063a9fb6d89146120af578063c30be57314612079578063c4d66de814611f1f578063cf8626b114611b6a578063cf9ab3051461119f578063d17a868114610db7578063d4d5347f14610d8e578063eb9bafa314610cb4578063ed7b42e3146101805763f85f735814610102573861000f565b3461017b57604036600319011261017b5761011b613a4e565b6000602060405161012b81613b07565b8281520152600435600052600560205260406000209060018060a01b0316600052602052604061015d816000206140a4565b8151815181526020918201516001600160a01b031691810191909152f35b600080fd5b3461017b57602036600319011261017b5761019961428e565b6101a46004356142be565b156100285760008054604051639662022560e01b8152916001600160a01b039091169082600481845afa9081156109dd57608060209261021394600091610c99575b500151604051632474521560e21b8152600481019190915233602482015292839190829081906044820190565b03915afa9081156109dd57600091610c5f575b5015610c4d57600435600052600460205260406000208054805b610258576001600080516020614f1983398151915255005b60001981018181116106355761026e9083613abe565b905490600381901b82901c6001600160a01b031615610b0e57600054604051631355eead60e21b815260048035908201526001600160a01b039091169190602081602481865afa9081156109dd57600091610c13575b5061002857604051639662022560e01b8152600081600481865afa80156109dd57608060209161032093600091610bf8575b500151604051632474521560e21b8152600481019190915233602482015291829081906044820190565b0381865afa9081156109dd57600091610bbe575b501580610ba4575b610028576004356000526005602052604060002060018060a01b03848360031b1c166000526020526040600020928354928315610b70576004356000526003602052604060002060018060a01b03838560031b1c16600052602052604060002094855415610b3b57600101546001600160a01b0316946103bb90613ad6565b5060050154604051639662022560e01b81526001600160a01b039091169190600081600481855afa9081156109dd5761ffff91602091600091610b20575b500151169081606411610b0e57600090600092879480158015610b05575b1561064b575050506104378660018060a01b03868860031b1c1689614e39565b86925b6040519388855287602086015260018060a01b03166040850152606084015215156080830152151560a0820152606460c082015260018060a01b03828460031b1c16903090600080516020614ed983398151915260e060043592a46004356000526003602052604060002060018060a01b03828460031b1c166000526020526104c66040600020613bc3565b6004356000526005602052604060002060018060a01b03828460031b1c166000526020526000600160408220828155015560043560005260046020526040600020805460005b818110610580575b505091600080516020614ef98339815191529161056996959493541561056f575b604080519485526001600160a01b03958616602086015260039290921b1c909316926004359290819081015b0390a3613c7d565b80610240565b61057a600435614c17565b50610535565b61058a8184613abe565b9054600391821b1c6001600160a01b039081169187901b86901c16146105b25760010161050c565b9290969594939160001988019788116106355761061f600080516020614ef9833981519152946106016105e86105699b85613abe565b905460039190911b1c6001600160a01b03169184613abe565b90919060018060a01b038084549260031b9316831b921b1916179055565b61062881613c3a565b9193949596819350610514565b634e487b7160e01b600052601160045260246000fd5b909192506004600060019460405192838092639662022560e01b82525afa9081156109dd57600091610ae2575b505161012001516001600160a01b031691826106b0575050506106a98660018060a01b03868860031b1c1689614e39565b869261043a565b604051636eb1769f60e11b8152306004820152602481018490526020816044818e5afa80156109dd578a91600091610aad575b50106109e9575b604051633dccbfc560e01b8152600481018a90526001600160a01b038b8116602483015283166044820152600081606481875afa9081156109dd5760009060009261084e575b5080610845575b156108295760631982019061ffff82116106355761ffff610759921690613bb0565b9281156108135760a48a60008d93602095604051988996879563545ac70d60e01b8752600487015260248601528860448601520460648401528c8c60018060a01b039160031b1c1660848401525af1600092816107df575b506107d457506106a9905086600387901b86901c6001600160a01b031689614e39565b93506001925061043a565b9092506020813d60201161080b575b816107fb60209383613b73565b8101031261017b5751918c6107b1565b3d91506107ee565b634e487b7160e01b600052601260045260246000fd5b505050506106a98660018060a01b03868860031b1c1689614e39565b50801515610737565b9150503d90816000823e6108628282613b73565b606081838101031261017b5761087781613b94565b906020810151926040820151906001600160401b03821161017b5760a0828401828501031261017b57604051926108ad84613b58565b6108b8838201613ce7565b8452602083820101516001600160401b03811161017b57828201601f828685010101121561017b578084830101516108ef81613c8a565b916108fd6040519384613b73565b818352602083019085850160208460051b838a89010101011161017b576020818887010101915b60208460051b838a890101010183106109c557505050506020850152604083820101516001600160401b03811161017b57610966908383019085840101614d18565b6040850152606083820101516001600160401b03811161017b57610991908383019085840101614d18565b6060850152608083820101516001600160401b03811161017b576080936109bc938301920101614d18565b9101528e610730565b602080916109d285613ce7565b815201920191610924565b6040513d6000823e3d90fd5b60405163095ea7b360e01b60208083019182526001600160a01b03861660248401526000196044840152906000908d90610a3085606481015b03601f198101875286613b73565b828551925af16000513d82610a91575b505015610a4e575b506106ea565b610a8b90610a8560405163095ea7b360e01b60208201528660248201526000604482015260448152610a7f81613b3d565b8d614e7c565b8b614e7c565b8c610a48565b909150610aa557508a3b15155b8e80610a40565b600114610a9e565b9150506020813d602011610ada575b81610ac960209383613b73565b8101031261017b578990518e6106e3565b3d9150610abc565b610aff91503d806000833e610af78183613b73565b810190613d61565b8c610678565b50898114610417565b604051633ee76a8d60e11b8152600490fd5b610b3591503d806000833e610af78183613b73565b8b6103f9565b5050604051632eee564760e01b8152600480359082015260039290921b1c6001600160a01b0316602482015280604481010390fd5b50604051632eee564760e01b8152600480359082015260039290921b1c6001600160a01b0316602482015280604481010390fd5b5033600382901b84901c6001600160a01b0316141561033c565b90506020813d602011610bf0575b81610bd960209383613b73565b8101031261017b57610bea90613b94565b86610334565b3d9150610bcc565b610c0d91503d806000833e610af78183613b73565b896102f6565b90506020813d602011610c45575b81610c2e60209383613b73565b8101031261017b57610c3f90613b94565b866102c4565b3d9150610c21565b6040516348f5c3ed60e01b8152600490fd5b90506020813d602011610c91575b81610c7a60209383613b73565b8101031261017b57610c8b90613b94565b81610226565b3d9150610c6d565b610cae91503d806000833e610af78183613b73565b856101e6565b3461017b5760808060031936011261017b57610ce1610cd1613a4e565b60643590604435906004356140cb565b91604051916040830160408452815180915260609160608501936020809201936000915b848310610d19578780888b60208301520390f35b9091929394958460e0600192895160a08580821b03918281511684528286820151168685015282604082015116604085015288810151151589850152610d788882015189860190602090805183528160018060a01b0391015116910152565b01511660c0820152019701959493019190610d05565b3461017b57600036600319011261017b576000546040516001600160a01b039091168152602090f35b3461017b57604036600319011261017b57600435610dd3613a4e565b811561115a5760405191610de683613b07565b6001835260208301602036823783511561114457525b610e068251613fd2565b906000805b8451821015610ff057610e1e8286613cd3565b5180600052600460205260406000208054908115610fe457906000610e4282613ca1565b91610e4c81614041565b936000915b808310610f30575050508015610f2357610e6a81613ca1565b92610e7482614041565b9260005b838110610eda57505050509160019391610ed193610e95836142be565b9160405193610ea385613b3d565b84526020840152604083015215156060820152610ec08288613cd3565b52610ecb8187613cd3565b50613ba1565b915b0190610e0b565b6001906001600160a01b03610eef8285613cd3565b5116610efb8289613cd3565b52610f068185613cd3565b51610f118288613cd3565b52610f1c8187613cd3565b5001610e78565b5050505090600190610ed3565b909192610f3d8484613abe565b90546001600160a01b0360039290921b1c8116908b1680151590610fd1575b610fc757876000526005602052604060002081600052602052604060002090815415610fbc5791610f9d610fb292600194610f97848b613cd3565b526140a4565b610fa7828a613cd3565b52610ecb8189613cd3565b935b019190610e51565b505092600190610fb4565b5092600190610fb4565b506001600160a01b038b16811415610f5c565b50505090600190610ed3565b8390610ffb81613fd2565b9160005b82811061111a578360405180916020808301818452825180915260408401918060408360051b8701019401926000905b83821061103c5786860387f35b919395509193603f198782030182528386516080908184018151855283820151928486015282518091528360a086019301906000905b8082106110f75750505060408101519184810360408601528380845192838152019301906000905b8082106110c75750505090600193839260608091015115159101529701920192018695949293919361102f565b8251805186526020908101516001600160a01b03169086015289956040909501949092019160019091019061109a565b82516001600160a01b031685528995948501949092019160019190910190611072565b8061112760019284613cd3565b516111328287613cd3565b5261113d8186613cd3565b5001610fff565b634e487b7160e01b600052603260045260246000fd5b60018054925061116983613ca1565b9260005b81811061117c57505050610dfc565b806111878492613a87565b90549060031b1c6111988288613cd3565b520161116d565b3461017b57602036600319011261017b576111b8613a64565b6111c061428e565b600154805b6111dd576001600080516020614f1983398151915255005b6000198101818111610635576111f290613a87565b905490611203828260031b1c6142be565b15611b5f57818160031b1c60005260046020526040600020918254805b611237575050505061123190613c7d565b806111c5565b6001600160a01b03861680151590611b2b575b61125e575b61125890613c7d565b80611220565b6001600160a01b03861615610b0e5760018060a01b0360005416604051631355eead60e21b8152838560031b1c6004820152602081602481855afa9081156109dd57600091611af1575b5061002857604051639662022560e01b8152600081600481855afa80156109dd57608060209161130393600091611ad657500151604051632474521560e21b8152600481019190915233602482015291829081906044820190565b0381855afa9081156109dd57600091611a9c575b501580611a89575b61002857828460031b1c6000526005602052604060002060018060a01b0388166000526020526040600020908154908115611a5b57848660031b1c6000526003602052604060002060018060a01b038a16600052602052604060002092835415611a2d57600101546001600160a01b03169261139a90613ad6565b5060050154604051639662022560e01b81526001600160a01b039091169190600081600481855afa9081156109dd5761ffff91602091600091611a12575b500151169081606411610b0e57600090600092859480158015611a09575b156115ad57505050611409848c87614e39565b84925b6040519386855285602086015260018060a01b03166040850152606084015215156080830152151560a0820152606460c082015260018060a01b038916903090600080516020614ed983398151915260e0888a60031b1c92a4838560031b1c6000526003602052604060002060018060a01b0389166000526020526114946040600020613bc3565b838560031b1c6000526005602052604060002060018060a01b03891660005260205260006001604082208281550155838560031b1c60005260046020526040600020805460005b818110611544575b5050906112589392915415611530575b604080519182526001600160a01b03928316602083015291891691600387901b86901c91600080516020614ef98339815191529190a3905061124f565b61153e858760031b1c614c17565b506114f3565b61154e8184613abe565b905460039190911b1c6001600160a01b03908116908c1614611572576001016114db565b94939291908060001981011161063557611258956106016105e861159a936000190185613abe565b6115a381613c3a565b909192938a6114e3565b909192506004600060019460405192838092639662022560e01b82525afa9081156109dd576000916119ee575b505161012001516001600160a01b031680611604575050506115fd848c87614e39565b849261140c565b604051636eb1769f60e11b8152306004820152602481018290526020816044818c5afa80156109dd5788916000916119b9575b50106118fc575b604051633dccbfc560e01b8152600481018890526001600160a01b03898116602483015283166044820152600081606481855afa9081156109dd5760009060009261176d575b5080611764575b156117555760631984019061ffff82116106355761ffff6116ad921690613bb0565b9280156108135760405163545ac70d60e01b815260048101899052602481018a905260448101849052930460648401526001600160a01b038e166084840152602090839060a49082906000905af160009281611721575b506117165750506115fd848c87614e39565b93506001925061140c565b9092506020813d60201161174d575b8161173d60209383613b73565b8101031261017b5751918e611704565b3d9150611730565b505050506115fd848c87614e39565b5080151561168b565b9150503d90816000823e6117818282613b73565b606081838101031261017b5761179681613b94565b906020810151926040820151906001600160401b03821161017b5760a0828401828501031261017b57604051926117cc84613b58565b6117d7838201613ce7565b8452602083820101516001600160401b03811161017b57828201601f828685010101121561017b5780848301015161180e81613c8a565b9161181c6040519384613b73565b818352602083019085850160208460051b838a89010101011161017b576020818887010101915b60208460051b838a890101010183106118e457505050506020850152604083820101516001600160401b03811161017b57611885908383019085840101614d18565b6040850152606083820101516001600160401b03811161017b576118b0908383019085840101614d18565b6060850152608083820101516001600160401b03811161017b576080936118db938301920101614d18565b91015238611684565b602080916118f185613ce7565b815201920191611843565b60405163095ea7b360e01b60208083019182526001600160a01b038416602484015260001960448401529060009061194184606481015b03601f198101865285613b73565b835190828d5af16000513d8261199d575b505015611960575b5061163e565b6119979061199160405163095ea7b360e01b60208201528460248201526000604482015260448152610a8581613b3d565b89614e7c565b8e61195a565b9091506119b15750883b15155b3880611952565b6001146119aa565b9150506020813d6020116119e6575b816119d560209383613b73565b8101031261017b5787905138611637565b3d91506119c8565b611a0391503d806000833e610af78183613b73565b8e6115da565b508781146113f6565b611a2791503d806000833e610af78183613b73565b8d6113d8565b604051632eee564760e01b8152600388901b87901c60048201526001600160a01b038b166024820152604490fd5b604051632eee564760e01b8152600387901b86901c60048201526001600160a01b038a166024820152604490fd5b50336001600160a01b038816141561131f565b90506020813d602011611ace575b81611ab760209383613b73565b8101031261017b57611ac890613b94565b88611317565b3d9150611aaa565b611aeb91503d806000833e610af78183613b73565b8b6102f6565b90506020813d602011611b23575b81611b0c60209383613b73565b8101031261017b57611b1d90613b94565b886112a8565b3d9150611aff565b50600019810181811161063557611b429085613abe565b905460039190911b1c6001600160a01b039081169087161461124a565b505061123190613c7d565b3461017b5761010036600319011261017b57611b84613a4e565b6044356001600160a01b038116810361017b57606435906001600160a01b038216820361017b5760843590811515820361017b5760c4356001600160a01b038116900361017b5760e4356001600160a01b038116900361017b5760008054604051639662022560e01b81529190829060049082906001600160a01b03165afa9081156109dd57600091611f04575b505161010001516001600160a01b03163303610c4d576004356000526003602052604060002060018060a01b03851660005260205260406000205415611ea4575b6004356000526003602052604060002060018060a01b038516600052602052604060002091604051611c8481613b07565b60a435815260c4356001600160a01b0316602082015260405192611ca784613b22565b6001600160a01b0390811684529485166020840190815286861660408501908152921515606085019081526080850192835260e43590961660a08501908152855491969095909391600160401b811015611e8e57611d0a91600182018155613aeb565b939093611e7857935183546001600160a01b03199081166001600160a01b039283161785559651600185810180548a1692841692909217909155915160028501805496516001600160a81b03199097169183169190911795151560a01b60ff60a01b1695909517909455905180516003840155602090810151600480850180548916928716929092179091559451600593840180548816918616919091179055933560009081529184526040808320938716835292909352208054611dd29060a43590613fc5565b815501805490916001600160a01b03821680611e5057501660c4356001600160a01b03161790555b6040805160a43581526001600160a01b0360c4358116602083015260e435811692820192909252911690600435907fec0c6f71633237438c3cd75ed1c85f0548173de51a81e7ee34a578c37440ac6190606090a3005b60c4356001600160a01b0316149250611dfa91505057604051631eb3268560e31b8152600490fd5b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600435600052600460205260406000208054600160401b811015611e8e5761060181611ed69360018994018155613abe565b611eef6004356000526002602052604060002054151590565b611c5357611efe600435614dd3565b50611c53565b611f1991503d806000833e610af78183613b73565b85611c12565b3461017b57602036600319011261017b57611f38613a64565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081549060ff8260401c1615916001600160401b03811680159081612071575b6001149081612067575b15908161205e575b5061204c5767ffffffffffffffff19811660011784558261202d575b50611fb0614d92565b611fb8614d92565b6001600080516020614f198339815191525560018060a01b03166bffffffffffffffffffffffff60a01b6000541617600055611ff057005b68ff00000000000000001981541690557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b68ffffffffffffffffff19166801000000000000000117835583611fa7565b60405163f92ee8a960e01b8152600490fd5b90501585611f8b565b303b159150611f83565b849150611f79565b3461017b57602036600319011261017b5760206120a56004356000526002602052604060002054151590565b6040519015158152f35b3461017b57600036600319011261017b57600180546120cd81613ca1565b9060005b81811061211857828460405190602080830160208452845180915260206040850195019160005b8281106121055785870386f35b83518752958101959281019284016120f8565b806121238592613a87565b90549060031b1c6121348286613cd3565b52016120d1565b3461017b5760208060031936011261017b5760043560005260048152604060002060405190818382549182815201908192600052846000209060005b868282106121d657868661218d82880383613b73565b604051928392818401908285525180915260408401929160005b8281106121b657505050500390f35b83516001600160a01b0316855286955093810193928101926001016121a7565b83546001600160a01b031685529093019260019283019201612177565b3461017b57604036600319011261017b5761220c613a64565b6024906024359061ffff8216820361017b5761222661428e565b6001549160018060a01b03908183169284841515955b612254576001600080516020614f1983398151915255005b6000198181018281116123345761226a90613a87565b9054600391821b1c9061227c826142be565b156123285781600052600460205260406000208054805b6122ab5750505050506122a590613c7d565b8061223c565b8a80969b9a959a999499906122e8575b906122c9916122d857613c7d565b809a959a999499989398612293565b6122e389898c61437c565b613c7d565b508981019080821161231357846123026122c99385613abe565b905490861b1c1686149091506122bb565b8c634e487b7160e01b60005260116004526000fd5b5050506122a590613c7d565b88634e487b7160e01b60005260116004526000fd5b3461017b57600036600319011261017b57602060405160648152f35b3461017b57606036600319011261017b5761237e613a4e565b60443561ffff8116810361017b576123a09161239861428e565b60043561437c565b6001600080516020614f1983398151915255005b3461017b57604036600319011261017b576123cd613a4e565b6123d561428e565b6001600160a01b03811615610b0e57600054604051631355eead60e21b815260048035908201526001600160a01b039091169190602081602481865afa9081156109dd57600091612c62575b5061002857604051639662022560e01b8152600081600481865afa80156109dd57608060209161247c93600091612c4757500151604051632474521560e21b8152600481019190915233602482015291829081906044820190565b0381865afa9081156109dd57600091612c0d575b501580612bfa575b610028576004356000526005602052604060002060018060a01b0382166000526020526040600020918254908115612bd1576004356000526003602052604060002060018060a01b038416600052602052604060002093845415612ba857600101546001600160a01b03169361250d90613ad6565b5060050154604051639662022560e01b81526001600160a01b039091169190600081600481855afa9081156109dd5761ffff91602091600091612b8d575b500151169081606411610b0e57600090600092859480158015612b84575b1561272b5750505061257c848688614e39565b85925b6040519387855285602086015260018060a01b03166040850152606084015215156080830152151560a0820152606460c082015260018060a01b038316903090600080516020614ed983398151915260e060043592a46004356000526003602052604060002060018060a01b0383166000526020526126016040600020613bc3565b6004356000526005602052604060002060018060a01b038316600052602052600060016040822082815501556004356000526004602052604060002091825460005b8181106126b7575b505061268f90600080516020614ef9833981519152929354156126a6575b604080519485526001600160a01b03958616602086015294169360043593918291820190565b0390a36001600080516020614f1983398151915255005b6126b1600435614c17565b50612669565b6126c18186613abe565b905460039190911b1c6001600160a01b03908116908416146126e557600101612643565b9293600019820193929184116106355761271861268f936106016105e8600080516020614ef98339815191529785613abe565b61272181613c3a565b939281925061264b565b909192506004600060019460405192838092639662022560e01b82525afa9081156109dd57600091612b69575b505161012001516001600160a01b031691826127835750505061277c848688614e39565b859261257f565b604051636eb1769f60e11b8152306004820152602481018490526020816044818d5afa80156109dd578891600091612b34575b5010612a7a575b604051633dccbfc560e01b8152600481018890526001600160a01b038a8116602483015283166044820152600081606481875afa9081156109dd576000906000926128e7575b50806128de575b156128cf5760631982019061ffff82116106355761ffff61282c921690613bb0565b9281156108135760a48860008c93602095604051988996879563545ac70d60e01b87526004870152602486015288604486015204606484015260018060a01b038d1660848401525af16000928161289b575b5061289057505061277c848688614e39565b93506001925061257f565b9092506020813d6020116128c7575b816128b760209383613b73565b8101031261017b5751918961287e565b3d91506128aa565b5050505061277c848688614e39565b5080151561280a565b9150503d90816000823e6128fb8282613b73565b606081838101031261017b5761291081613b94565b906020810151926040820151906001600160401b03821161017b5760a0828401828501031261017b576040519261294684613b58565b612951838201613ce7565b8452602083820101516001600160401b03811161017b57828201601f828685010101121561017b5780848301015161298881613c8a565b916129966040519384613b73565b818352602083019085850160208460051b838a89010101011161017b57906020828887010101915b60208460051b828a89010101018310612a5f57505050506020850152604083820101516001600160401b03811161017b57612a00908383019085840101614d18565b6040850152606083820101516001600160401b03811161017b57612a2b908383019085840101614d18565b6060850152608083820101516001600160401b03811161017b57608093612a56938301920101614d18565b9101528b612803565b6020808093612a6d86613ce7565b81520193019291506129be565b60405163095ea7b360e01b60208083019182526001600160a01b03861660248401526000196044840152906000908c90612ab78560648101610a22565b828551925af16000513d82612b18575b505015612ad5575b506127bd565b612b1290612b0c60405163095ea7b360e01b60208201528660248201526000604482015260448152612b0681613b3d565b8c614e7c565b8a614e7c565b89612acf565b909150612b2c5750893b15155b8b80612ac7565b600114612b25565b9150506020813d602011612b61575b81612b5060209383613b73565b8101031261017b578790518b6127b6565b3d9150612b43565b612b7e91503d806000833e610af78183613b73565b89612758565b50888114612569565b612ba291503d806000833e610af78183613b73565b8861254b565b604051632eee564760e01b815260048035908201526001600160a01b0385166024820152604490fd5b604051632eee564760e01b815260048035908201526001600160a01b0384166024820152604490fd5b50336001600160a01b0382161415612498565b90506020813d602011612c3f575b81612c2860209383613b73565b8101031261017b57612c3990613b94565b83612490565b3d9150612c1b565b612c5c91503d806000833e610af78183613b73565b866102f6565b90506020813d602011612c94575b81612c7d60209383613b73565b8101031261017b57612c8e90613b94565b83612421565b3d9150612c70565b3461017b57600036600319011261017b57612cb561428e565b600154805b612cd2576001600080516020614f1983398151915255005b600019810181811161063557612ce790613a87565b91905491612cf9838260031b1c6142be565b612d0f575b50612d099150613c7d565b80612cba565b60008054604051639662022560e01b8152916001600160a01b039091169082600481845afa9081156109dd576080602092612d789460009161370057500151604051632474521560e21b8152600481019190915233602482015292839190829081906044820190565b03915afa9081156109dd576000916136c6575b5015610c4d57828160031b1c60005260046020526040600020805493845b612db4575050612cfe565b919291600019850185811161063557612dcd9083613abe565b905460039190911b1c6001600160a01b0316948515610b0e5760018060a01b036000541695604051631355eead60e21b8152838760031b1c60048201526020816024818b5afa9081156109dd5760009161368c575b5061002857604051639662022560e01b81526000816004818b5afa80156109dd576080602091612e7d93600091611ad657500151604051632474521560e21b8152600481019190915233602482015291829081906044820190565b03818b5afa9081156109dd57600091613652575b501580613648575b61002857828660031b1c6000526005602052604060002081600052602052604060002096875490811561361a57848860031b1c60005260036020526040600020836000526020526040600020988954156135ec57600101546001600160a01b031698612f0490613ad6565b5060050154604051639662022560e01b81526001600160a01b0390911690600081600481865afa9081156109dd5761ffff916020916000916135d1575b500151169182606411610b0e578492848c6000926000948396801580156135c8575b1561311d575050509085612f7692614e39565b8b925b604051938d855286602086015260018060a01b03166040850152606084015215156080830152151560a0820152606460c08201523090600080516020614ed983398151915260e0888c60031b1c92a4838760031b1c6000526003602052604060002082600052602052612fef6040600020613bc3565b838760031b1c600052600560205260406000208260005260205260006001604082208281550155838760031b1c6000526004602052604060002097885460005b8181106130a0575b5050610561600080516020614ef983398151915291613083969798999a541561308c575b604080519485526001600160a01b03909116602085015260038b901b88901c93918291820190565b93919084612da9565b61309a888c60031b1c614c17565b5061305b565b846130ab828d613abe565b905460039190911b1c6001600160a01b0316146130ca5760010161302f565b90918260009b9798999a9b198101116106355761308396613108610561936106016105e8600080516020614ef9833981519152976000190185613abe565b61311181613c3a565b9a999897965091613037565b935093509550506004600060019360405192838092639662022560e01b82525afa9182156109dd5788968f929389946000916135ad575b505161012001516001600160a01b0316908161317f57505050908561317892614e39565b8b92612f79565b926044929850602091945060405192838092636eb1769f60e11b82523060048301528760248301525afa80156109dd578f9089908993600091613570575b50916132049391600093106134b7575b604051633dccbfc560e01b8152600481018c90526001600160a01b0391821660248201529116604482015291829081906064820190565b0381865afa9081156109dd578f89908b9260009060009561331d575b5080613314575b156133025750505060631982019061ffff82116106355761ffff61324c921690613bb0565b9181156108135788968f9260209060a48b966000604051968794859363545ac70d60e01b85528b60048601528a60248601528860448601520460648401528d60848401525af1600092816132c2575b5088939291906132b2575050906131789291614e39565b9550955050505060019192612f79565b985093509150506020863d6020116132fa575b816132e260209383613b73565b8101031261017b579451879587928f9291908861329b565b3d91506132d5565b91985092506131789350879150614e39565b50831515613227565b9450505050503d90816000823e6133348282613b73565b606081838101031261017b578f9161334b82613b94565b9260208301519360408401516001600160401b03811161017b5760a0818601858701031261017b576040519061338082613b58565b61338b818701613ce7565b8252602081870101516001600160401b03811161017b57858701601f82848a010101121561017b578082880101516133c281613c8a565b916133d06040519384613b73565b8183526020830190888a0160208b83888760051b92010101011161017b57602081868c010101915b60208b83888760051b9201010101831061349f57505050506020830152604081870101516001600160401b03811161017b5761343b908688019083890101614d18565b6040830152606081870101516001600160401b03811161017b57613466908688019083890101614d18565b606083015260808187010151946001600160401b03861161017b578f968f96608093613496938301920101614d18565b91015238613220565b602080916134ac85613ce7565b8152019201916133f8565b60405163095ea7b360e01b60208083019182526001600160a01b038916602484015260001960448401529085906134f18460648101611933565b83519082865af184513d82613551575b50501561350f575b506131cd565b61354b9061354560405163095ea7b360e01b60208201528960248201528660448201526044815261353f81613b3d565b84614e7c565b82614e7c565b38613509565b9091501585146135685750813b15155b3880613501565b600114613561565b93505050506020813d6020116135a5575b8161358e60209383613b73565b8101031261017b575186908f9089906132046131bd565b3d9150613581565b6135c291503d806000833e610af78183613b73565b38613154565b50838114612f63565b6135e691503d806000833e610af78183613b73565b8d612f41565b604051632eee564760e01b815260038a901b87901c60048201526001600160a01b0385166024820152604490fd5b604051632eee564760e01b8152600389901b86901c60048201526001600160a01b0384166024820152604490fd5b5080331415612e99565b90506020813d602011613684575b8161366d60209383613b73565b8101031261017b5761367e90613b94565b88612e91565b3d9150613660565b90506020813d6020116136be575b816136a760209383613b73565b8101031261017b576136b890613b94565b88612e22565b3d915061369a565b90506020813d6020116136f8575b816136e160209383613b73565b8101031261017b576136f290613b94565b84612d8b565b3d91506136d4565b61371591503d806000833e610af78183613b73565b886101e6565b3461017b57604036600319011261017b57600054602491600435916001600160a01b039184359183163303613a3f5750916000905b8060005260206004815260406000209081549283151580613a36575b15613a2b576000199283850194851161233457869461378a91613abe565b949054600395861b1c16968160005284835260406000208860005283526040600020955b865480151580613a22575b1561398c57858101908111613977576137d29088613aeb565b5090886002928884820160ff815460a01c1660001461396257600089613835600487875416955b8701960196875416865460405194858094819363a9059cbb60e01b83528a6004840160209093929193604081019460018060a01b031681520152565b03925af16000918161392b575b5061385f575b50505050506138579150613ba1565b975b976137ae565b1561391f57549154925460408051948552908d166001600160a01b03166020850152908c1692918c169187917f0adc28922429a8215a5d1f826665bec9bdd0118be4fdc15f00412690684b1b7c91a48754801561390a5786016138c2818a613aeb565b6138f55760058160006138579681809555816001840155820155828b820155826004820155015588558b80808080613848565b8c634e487b7160e01b60005260006004526000fd5b8b634e487b7160e01b60005260316004526000fd5b50505050989050613859565b9091508a81813d831161395b575b6139438183613b73565b8101031261017b5761395490613b94565b9038613842565b503d613939565b600089613835600487600188015416956137f9565b8a634e487b7160e01b60005260116004526000fd5b5097919493509454156139a5575b505050929092613750565b60049284600052825260406000208160005282526139c66040600020613bc3565b8360005260058252604060002090600052815260006001604082208281550155826000528181526139fa6040600020613c3a565b826000525260406000205415613a13575b85808061399a565b613a1c81614c17565b50613a0b565b508282106137b9565b602085604051908152f35b5086851061376c565b6348f5c3ed60e01b8152600490fd5b602435906001600160a01b038216820361017b57565b600435906001600160a01b038216820361017b57565b9190820391821161063557565b6001548110156111445760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b80548210156111445760005260206000200190600090565b80541561114457600052602060002090600090565b8054821015611144576000526006602060002091020190600090565b604081019081106001600160401b03821117611e8e57604052565b60c081019081106001600160401b03821117611e8e57604052565b608081019081106001600160401b03821117611e8e57604052565b60a081019081106001600160401b03821117611e8e57604052565b90601f801991011681019081106001600160401b03821117611e8e57604052565b5190811515820361017b57565b60001981146106355760010190565b8181029291811591840414171561063557565b8054600080835581613bd457505050565b60069282600602926006840403613c2657815260208120918201915b828110613bfd5750505050565b808285925582600182015582600282015582600382015582600482015582600582015501613bf0565b634e487b7160e01b82526011600452602482fd5b80548015613c67576000190190613c518282613abe565b81549060018060a01b039060031b1b1916905555565b634e487b7160e01b600052603160045260246000fd5b8015610635576000190190565b6001600160401b038111611e8e5760051b60200190565b90613cab82613c8a565b613cb86040519182613b73565b8281528092613cc9601f1991613c8a565b0190602036910137565b80518210156111445760209160051b010190565b51906001600160a01b038216820361017b57565b519061ffff8216820361017b57565b919082606091031261017b57604051606081018181106001600160401b03821117611e8e576040526040613d5c818395613d4381613ce7565b8552613d5160208201613ce7565b602086015201613cfb565b910152565b906020808383031261017b5782516001600160401b039384821161017b57019060a08284031261017b57604090815194613d9a86613b58565b835181811161017b5784019461014091828783031261017b57845192830183811082821117611e8e578552865160ff8116810361017b5783528387015181811161017b5787019082601f8301121561017b57815190613df882613c8a565b93613e0588519586613b73565b828552868086019360051b8501019381851161017b57878101935b858510613efb5750505050508284019190915250848301516001600160a01b0390818116810361017b5784830152606086015160608301526080860151818116810361017b57608083015260a0860151818116810361017b5760a083015260c0860151818116810361017b5760c083015260e0860151818116810361017b5760e08301526101008087015190828216820361017b5783015261012080960151908116810361017b576080958201528552613edb818401613cfb565b908501528082015190840152606081015160608401520151608082015290565b845184811161017b57820160809081601f19828703011261017b578b5191613f2283613b07565b613f2e868d8401613d0a565b83528101519086821161017b570184603f8201121561017b578a8101518c91613f62613f5983613c8a565b93519384613b73565b8183528d8d84019060608094028301019188831161017b57918f8f969492979593015b818110613fa15750505083809550820152815201940193613e20565b9193958491939597613fb38b85613d0a565b8152019101918e959391969492613f85565b9190820180921161063557565b90613fdc82613c8a565b604090613fec6040519182613b73565b8381528093613ffd601f1991613c8a565b019160009160005b848110614013575050505050565b602090835161402181613b3d565b858152606086849180838501528088850152830152828501015201614005565b9061404b82613c8a565b60409061405b6040519182613b73565b838152809361406c601f1991613c8a565b019160009060005b848110614082575050505050565b602090825161409081613b07565b848152828581830152828701015201614074565b906040516140b181613b07565b825481526001909201546001600160a01b03166020830152565b60009081526003602081815260408084206001600160a01b03958616855282528084208054969897909593949390878a101561425357801561424b575b614112908a613fc5565b96808811614243575b506141268988613a7a565b9361413085613c8a565b9461413d84519687613b73565b80865261414c601f1991613c8a565b019084815b8381106141f957505050508398805b88811061417257505050505050505090565b806141f26141826001938b613aeb565b5061418d8584613a7a565b908a8760058a519361419e85613b22565b8281541685528289820154168d8601526141d56002820154948d8587169088015260ff60a096871c161515606088015282016140a4565b6080860152015416908201526141eb828b613cd3565b5288613cd3565b5001614160565b855161420481613b22565b83815283838201528387820152836060820152865161422281613b07565b848152848482015260808201528360a082015282828a010152018590614151565b96503861411b565b506064614108565b50508051959750919350840191506001600160401b0382118483101761427a575281529190565b634e487b7160e01b83526041600452602483fd5b600080516020614f1983398151915260028154146142ac5760029055565b604051633ee5aeb560e01b8152600490fd5b60008054604051631355eead60e21b815260048101849052919290602090839060249082906001600160a01b03165afa918215614371578392614331575b508115614312575b5061430f5750600190565b90565b61432a91506000526002602052604060002054151590565b1538614304565b9091506020813d602011614369575b8161434d60209383613b73565b810103126143655761435e90613b94565b90386142fc565b8280fd5b3d9150614340565b6040513d85823e3d90fd5b9091906001600160a01b03831615610b0e57600054604051631355eead60e21b8152600481018390526001600160a01b0390911690602081602481855afa9081156109dd57600091614bdd575b5061002857604051639662022560e01b8152600081600481855afa80156109dd57608060209161442493600091614bc257500151604051632474521560e21b8152600481019190915233602482015291829081906044820190565b0381855afa9081156109dd57600091614b88575b501580614b75575b61002857816000526005602052604060002060018060a01b0385166000526020526040600020908154938415614b4d57836000526003602052604060002060018060a01b038716600052602052604060002092835415614b2557600101546001600160a01b0316926144b190613ad6565b5060050154604051639662022560e01b81526001600160a01b039091169190600081600481875afa9081156109dd5761ffff91602091600091614b0a575b50015116928361ffff831611610b0e5760008091889480158015614b01575b156146a157505061ffff939450614526888a88614e39565b85945b6040519587875289602088015260018060a01b03166040870152606086015215156080850152151560a08401521660c082015260018060a01b0385169083600080516020614ed983398151915260e03093a4816000526003602052604060002060018060a01b0385166000526020526145a56040600020613bc3565b816000526005602052604060002060018060a01b0385166000526020526000600160408220828155015581600052600460205260406000209384549460005b868110614633575b50600080516020614ef9833981519152939495505415614624575b604080519586526001600160a01b039283166020870152911693a3565b61462d84614c17565b50614607565b61463d8183613abe565b905460039190911b1c6001600160a01b0390811690841614614661576001016145e4565b939495600019810190811161063557600080516020614ef9833981519152946106016105e86146909385613abe565b61469981613c3a565b8594936145ec565b9091506004600060019360405192838092639662022560e01b82525afa9081156109dd57600091614ae6575b505161012001516001600160a01b031695866146fd57505061ffff9394506146f6888a88614e39565b8594614529565b604051636eb1769f60e11b8152306004820152602481018890526020816044818c5afa80156109dd578b91600091614ab1575b5010614a04575b604051633dccbfc560e01b8152600481018b90526001600160a01b038981166024830152831660448201526000816064818b5afa9081156109dd57600090600092614871575b5080614868575b156148545761ffff861682039061ffff82116106355761ffff6147a8921690613bb0565b9681156108135760a48b60008b938f6020966040519d8e97889663545ac70d60e01b88526004880152602487015289604487015204606485015260018060a01b031660848401525af160009681614820575b50614811575061ffff9394506146f6888a88614e39565b9461ffff945060019250614529565b9096506020813d60201161484c575b8161483c60209383613b73565b8101031261017b575195386147fa565b3d915061482f565b50505061ffff9394506146f6888a88614e39565b50801515614784565b9150503d90816000823e6148858282613b73565b606081838101031261017b5761489a81613b94565b906020810151926040820151906001600160401b03821161017b5760a0828401828501031261017b57604051926148d084613b58565b6148db838201613ce7565b8452602083820101516001600160401b03811161017b57828201601f828685010101121561017b5780848301015161491281613c8a565b916149206040519384613b73565b818352602083019085850160208460051b838a89010101011161017b57906020828887010101915b60208460051b828a890101010183106149e957505050506020850152604083820101516001600160401b03811161017b5761498a908383019085840101614d18565b6040850152606083820101516001600160401b03811161017b576149b5908383019085840101614d18565b6060850152608083820101516001600160401b03811161017b576080936149e0938301920101614d18565b9101523861477d565b60208080936149f786613ce7565b8152019301929150614948565b60405163095ea7b360e01b60208083019182526001600160a01b038a166024840152600019604484015290600090614a3f8460648101611933565b835190828d5af16000513d82614a95575b505015614a5e575b50614737565b614a8f9061199160405163095ea7b360e01b60208201528a60248201526000604482015260448152610a8581613b3d565b38614a58565b909150614aa95750883b15155b3880614a50565b600114614aa2565b9150506020813d602011614ade575b81614acd60209383613b73565b8101031261017b578a905138614730565b3d9150614ac0565b614afb91503d806000833e610af78183613b73565b386146cd565b5087811461450e565b614b1f91503d806000833e610af78183613b73565b386144ef565b604051632eee564760e01b8152600481018690526001600160a01b0388166024820152604490fd5b604051632eee564760e01b8152600481018590526001600160a01b0387166024820152604490fd5b50336001600160a01b0385161415614440565b90506020813d602011614bba575b81614ba360209383613b73565b8101031261017b57614bb490613b94565b38614438565b3d9150614b96565b614bd791503d806000833e610af78183613b73565b386102f6565b90506020813d602011614c0f575b81614bf860209383613b73565b8101031261017b57614c0990613b94565b386143c9565b3d9150614beb565b6000818152600260205260408120549091908015614d135760001990808201818111614cff5760015490838201918211614ceb57818103614ca0575b5050506001548015614c8c57810190614c6b82613a87565b909182549160031b1b19169055600155815260026020526040812055600190565b634e487b7160e01b84526031600452602484fd5b614cd5614caf614cbe93613a87565b90549060031b1c928392613a87565b819391549060031b91821b91600019901b19161790565b9055845260026020526040842055388080614c53565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b85526011600452602485fd5b505090565b9080601f8301121561017b57815190602091614d3381613c8a565b93614d416040519586613b73565b81855260208086019260051b82010192831161017b57602001905b828210614d6a575050505090565b81516fffffffffffffffffffffffffffffffff8116810361017b578152908301908301614d5c565b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c1615614dc157565b604051631afcd79f60e31b8152600490fd5b600081815260026020526040812054614e3457600154600160401b811015614e20579082614e0c614cbe84600160409601600155613a87565b905560015492815260026020522055600190565b634e487b7160e01b82526041600452602482fd5b905090565b60405163a9059cbb60e01b60208201526001600160a01b03929092166024830152604480830193909352918152614e7a91614e75606483613b73565b614e7c565b565b906000602091828151910182855af1156109dd576000513d614ecf57506001600160a01b0381163b155b614ead5750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b60011415614ea656fecc38713e5e2de070bfab33e9628de4b3cd0514b73596e57c65f757544ffae4f3c4dc55ebb404cdb4121dc2e8739cb7c2bf00e3d237028f6c485602154d995ee19b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a264697066735822122019daed82abd26850430cd63083657be334eb56d26f2ddd86d0aa4de9345dc55364736f6c63430008180033",
  "deployedBytecode": "0x608080604052600436101561003a575b50361561002857604051631eb49d6d60e11b8152600490fd5b604051631eb49d6d60e11b8152600490fd5b60003560e01c9081630bd01dcb1461371b5750806321f22dc514612c9c578063390d6855146123b457806354b660a71461236557806356f8ab1f1461234957806392b01b46146121f35780639a45db001461213b578063a9fb6d89146120af578063c30be57314612079578063c4d66de814611f1f578063cf8626b114611b6a578063cf9ab3051461119f578063d17a868114610db7578063d4d5347f14610d8e578063eb9bafa314610cb4578063ed7b42e3146101805763f85f735814610102573861000f565b3461017b57604036600319011261017b5761011b613a4e565b6000602060405161012b81613b07565b8281520152600435600052600560205260406000209060018060a01b0316600052602052604061015d816000206140a4565b8151815181526020918201516001600160a01b031691810191909152f35b600080fd5b3461017b57602036600319011261017b5761019961428e565b6101a46004356142be565b156100285760008054604051639662022560e01b8152916001600160a01b039091169082600481845afa9081156109dd57608060209261021394600091610c99575b500151604051632474521560e21b8152600481019190915233602482015292839190829081906044820190565b03915afa9081156109dd57600091610c5f575b5015610c4d57600435600052600460205260406000208054805b610258576001600080516020614f1983398151915255005b60001981018181116106355761026e9083613abe565b905490600381901b82901c6001600160a01b031615610b0e57600054604051631355eead60e21b815260048035908201526001600160a01b039091169190602081602481865afa9081156109dd57600091610c13575b5061002857604051639662022560e01b8152600081600481865afa80156109dd57608060209161032093600091610bf8575b500151604051632474521560e21b8152600481019190915233602482015291829081906044820190565b0381865afa9081156109dd57600091610bbe575b501580610ba4575b610028576004356000526005602052604060002060018060a01b03848360031b1c166000526020526040600020928354928315610b70576004356000526003602052604060002060018060a01b03838560031b1c16600052602052604060002094855415610b3b57600101546001600160a01b0316946103bb90613ad6565b5060050154604051639662022560e01b81526001600160a01b039091169190600081600481855afa9081156109dd5761ffff91602091600091610b20575b500151169081606411610b0e57600090600092879480158015610b05575b1561064b575050506104378660018060a01b03868860031b1c1689614e39565b86925b6040519388855287602086015260018060a01b03166040850152606084015215156080830152151560a0820152606460c082015260018060a01b03828460031b1c16903090600080516020614ed983398151915260e060043592a46004356000526003602052604060002060018060a01b03828460031b1c166000526020526104c66040600020613bc3565b6004356000526005602052604060002060018060a01b03828460031b1c166000526020526000600160408220828155015560043560005260046020526040600020805460005b818110610580575b505091600080516020614ef98339815191529161056996959493541561056f575b604080519485526001600160a01b03958616602086015260039290921b1c909316926004359290819081015b0390a3613c7d565b80610240565b61057a600435614c17565b50610535565b61058a8184613abe565b9054600391821b1c6001600160a01b039081169187901b86901c16146105b25760010161050c565b9290969594939160001988019788116106355761061f600080516020614ef9833981519152946106016105e86105699b85613abe565b905460039190911b1c6001600160a01b03169184613abe565b90919060018060a01b038084549260031b9316831b921b1916179055565b61062881613c3a565b9193949596819350610514565b634e487b7160e01b600052601160045260246000fd5b909192506004600060019460405192838092639662022560e01b82525afa9081156109dd57600091610ae2575b505161012001516001600160a01b031691826106b0575050506106a98660018060a01b03868860031b1c1689614e39565b869261043a565b604051636eb1769f60e11b8152306004820152602481018490526020816044818e5afa80156109dd578a91600091610aad575b50106109e9575b604051633dccbfc560e01b8152600481018a90526001600160a01b038b8116602483015283166044820152600081606481875afa9081156109dd5760009060009261084e575b5080610845575b156108295760631982019061ffff82116106355761ffff610759921690613bb0565b9281156108135760a48a60008d93602095604051988996879563545ac70d60e01b8752600487015260248601528860448601520460648401528c8c60018060a01b039160031b1c1660848401525af1600092816107df575b506107d457506106a9905086600387901b86901c6001600160a01b031689614e39565b93506001925061043a565b9092506020813d60201161080b575b816107fb60209383613b73565b8101031261017b5751918c6107b1565b3d91506107ee565b634e487b7160e01b600052601260045260246000fd5b505050506106a98660018060a01b03868860031b1c1689614e39565b50801515610737565b9150503d90816000823e6108628282613b73565b606081838101031261017b5761087781613b94565b906020810151926040820151906001600160401b03821161017b5760a0828401828501031261017b57604051926108ad84613b58565b6108b8838201613ce7565b8452602083820101516001600160401b03811161017b57828201601f828685010101121561017b578084830101516108ef81613c8a565b916108fd6040519384613b73565b818352602083019085850160208460051b838a89010101011161017b576020818887010101915b60208460051b838a890101010183106109c557505050506020850152604083820101516001600160401b03811161017b57610966908383019085840101614d18565b6040850152606083820101516001600160401b03811161017b57610991908383019085840101614d18565b6060850152608083820101516001600160401b03811161017b576080936109bc938301920101614d18565b9101528e610730565b602080916109d285613ce7565b815201920191610924565b6040513d6000823e3d90fd5b60405163095ea7b360e01b60208083019182526001600160a01b03861660248401526000196044840152906000908d90610a3085606481015b03601f198101875286613b73565b828551925af16000513d82610a91575b505015610a4e575b506106ea565b610a8b90610a8560405163095ea7b360e01b60208201528660248201526000604482015260448152610a7f81613b3d565b8d614e7c565b8b614e7c565b8c610a48565b909150610aa557508a3b15155b8e80610a40565b600114610a9e565b9150506020813d602011610ada575b81610ac960209383613b73565b8101031261017b578990518e6106e3565b3d9150610abc565b610aff91503d806000833e610af78183613b73565b810190613d61565b8c610678565b50898114610417565b604051633ee76a8d60e11b8152600490fd5b610b3591503d806000833e610af78183613b73565b8b6103f9565b5050604051632eee564760e01b8152600480359082015260039290921b1c6001600160a01b0316602482015280604481010390fd5b50604051632eee564760e01b8152600480359082015260039290921b1c6001600160a01b0316602482015280604481010390fd5b5033600382901b84901c6001600160a01b0316141561033c565b90506020813d602011610bf0575b81610bd960209383613b73565b8101031261017b57610bea90613b94565b86610334565b3d9150610bcc565b610c0d91503d806000833e610af78183613b73565b896102f6565b90506020813d602011610c45575b81610c2e60209383613b73565b8101031261017b57610c3f90613b94565b866102c4565b3d9150610c21565b6040516348f5c3ed60e01b8152600490fd5b90506020813d602011610c91575b81610c7a60209383613b73565b8101031261017b57610c8b90613b94565b81610226565b3d9150610c6d565b610cae91503d806000833e610af78183613b73565b856101e6565b3461017b5760808060031936011261017b57610ce1610cd1613a4e565b60643590604435906004356140cb565b91604051916040830160408452815180915260609160608501936020809201936000915b848310610d19578780888b60208301520390f35b9091929394958460e0600192895160a08580821b03918281511684528286820151168685015282604082015116604085015288810151151589850152610d788882015189860190602090805183528160018060a01b0391015116910152565b01511660c0820152019701959493019190610d05565b3461017b57600036600319011261017b576000546040516001600160a01b039091168152602090f35b3461017b57604036600319011261017b57600435610dd3613a4e565b811561115a5760405191610de683613b07565b6001835260208301602036823783511561114457525b610e068251613fd2565b906000805b8451821015610ff057610e1e8286613cd3565b5180600052600460205260406000208054908115610fe457906000610e4282613ca1565b91610e4c81614041565b936000915b808310610f30575050508015610f2357610e6a81613ca1565b92610e7482614041565b9260005b838110610eda57505050509160019391610ed193610e95836142be565b9160405193610ea385613b3d565b84526020840152604083015215156060820152610ec08288613cd3565b52610ecb8187613cd3565b50613ba1565b915b0190610e0b565b6001906001600160a01b03610eef8285613cd3565b5116610efb8289613cd3565b52610f068185613cd3565b51610f118288613cd3565b52610f1c8187613cd3565b5001610e78565b5050505090600190610ed3565b909192610f3d8484613abe565b90546001600160a01b0360039290921b1c8116908b1680151590610fd1575b610fc757876000526005602052604060002081600052602052604060002090815415610fbc5791610f9d610fb292600194610f97848b613cd3565b526140a4565b610fa7828a613cd3565b52610ecb8189613cd3565b935b019190610e51565b505092600190610fb4565b5092600190610fb4565b506001600160a01b038b16811415610f5c565b50505090600190610ed3565b8390610ffb81613fd2565b9160005b82811061111a578360405180916020808301818452825180915260408401918060408360051b8701019401926000905b83821061103c5786860387f35b919395509193603f198782030182528386516080908184018151855283820151928486015282518091528360a086019301906000905b8082106110f75750505060408101519184810360408601528380845192838152019301906000905b8082106110c75750505090600193839260608091015115159101529701920192018695949293919361102f565b8251805186526020908101516001600160a01b03169086015289956040909501949092019160019091019061109a565b82516001600160a01b031685528995948501949092019160019190910190611072565b8061112760019284613cd3565b516111328287613cd3565b5261113d8186613cd3565b5001610fff565b634e487b7160e01b600052603260045260246000fd5b60018054925061116983613ca1565b9260005b81811061117c57505050610dfc565b806111878492613a87565b90549060031b1c6111988288613cd3565b520161116d565b3461017b57602036600319011261017b576111b8613a64565b6111c061428e565b600154805b6111dd576001600080516020614f1983398151915255005b6000198101818111610635576111f290613a87565b905490611203828260031b1c6142be565b15611b5f57818160031b1c60005260046020526040600020918254805b611237575050505061123190613c7d565b806111c5565b6001600160a01b03861680151590611b2b575b61125e575b61125890613c7d565b80611220565b6001600160a01b03861615610b0e5760018060a01b0360005416604051631355eead60e21b8152838560031b1c6004820152602081602481855afa9081156109dd57600091611af1575b5061002857604051639662022560e01b8152600081600481855afa80156109dd57608060209161130393600091611ad657500151604051632474521560e21b8152600481019190915233602482015291829081906044820190565b0381855afa9081156109dd57600091611a9c575b501580611a89575b61002857828460031b1c6000526005602052604060002060018060a01b0388166000526020526040600020908154908115611a5b57848660031b1c6000526003602052604060002060018060a01b038a16600052602052604060002092835415611a2d57600101546001600160a01b03169261139a90613ad6565b5060050154604051639662022560e01b81526001600160a01b039091169190600081600481855afa9081156109dd5761ffff91602091600091611a12575b500151169081606411610b0e57600090600092859480158015611a09575b156115ad57505050611409848c87614e39565b84925b6040519386855285602086015260018060a01b03166040850152606084015215156080830152151560a0820152606460c082015260018060a01b038916903090600080516020614ed983398151915260e0888a60031b1c92a4838560031b1c6000526003602052604060002060018060a01b0389166000526020526114946040600020613bc3565b838560031b1c6000526005602052604060002060018060a01b03891660005260205260006001604082208281550155838560031b1c60005260046020526040600020805460005b818110611544575b5050906112589392915415611530575b604080519182526001600160a01b03928316602083015291891691600387901b86901c91600080516020614ef98339815191529190a3905061124f565b61153e858760031b1c614c17565b506114f3565b61154e8184613abe565b905460039190911b1c6001600160a01b03908116908c1614611572576001016114db565b94939291908060001981011161063557611258956106016105e861159a936000190185613abe565b6115a381613c3a565b909192938a6114e3565b909192506004600060019460405192838092639662022560e01b82525afa9081156109dd576000916119ee575b505161012001516001600160a01b031680611604575050506115fd848c87614e39565b849261140c565b604051636eb1769f60e11b8152306004820152602481018290526020816044818c5afa80156109dd5788916000916119b9575b50106118fc575b604051633dccbfc560e01b8152600481018890526001600160a01b03898116602483015283166044820152600081606481855afa9081156109dd5760009060009261176d575b5080611764575b156117555760631984019061ffff82116106355761ffff6116ad921690613bb0565b9280156108135760405163545ac70d60e01b815260048101899052602481018a905260448101849052930460648401526001600160a01b038e166084840152602090839060a49082906000905af160009281611721575b506117165750506115fd848c87614e39565b93506001925061140c565b9092506020813d60201161174d575b8161173d60209383613b73565b8101031261017b5751918e611704565b3d9150611730565b505050506115fd848c87614e39565b5080151561168b565b9150503d90816000823e6117818282613b73565b606081838101031261017b5761179681613b94565b906020810151926040820151906001600160401b03821161017b5760a0828401828501031261017b57604051926117cc84613b58565b6117d7838201613ce7565b8452602083820101516001600160401b03811161017b57828201601f828685010101121561017b5780848301015161180e81613c8a565b9161181c6040519384613b73565b818352602083019085850160208460051b838a89010101011161017b576020818887010101915b60208460051b838a890101010183106118e457505050506020850152604083820101516001600160401b03811161017b57611885908383019085840101614d18565b6040850152606083820101516001600160401b03811161017b576118b0908383019085840101614d18565b6060850152608083820101516001600160401b03811161017b576080936118db938301920101614d18565b91015238611684565b602080916118f185613ce7565b815201920191611843565b60405163095ea7b360e01b60208083019182526001600160a01b038416602484015260001960448401529060009061194184606481015b03601f198101865285613b73565b835190828d5af16000513d8261199d575b505015611960575b5061163e565b6119979061199160405163095ea7b360e01b60208201528460248201526000604482015260448152610a8581613b3d565b89614e7c565b8e61195a565b9091506119b15750883b15155b3880611952565b6001146119aa565b9150506020813d6020116119e6575b816119d560209383613b73565b8101031261017b5787905138611637565b3d91506119c8565b611a0391503d806000833e610af78183613b73565b8e6115da565b508781146113f6565b611a2791503d806000833e610af78183613b73565b8d6113d8565b604051632eee564760e01b8152600388901b87901c60048201526001600160a01b038b166024820152604490fd5b604051632eee564760e01b8152600387901b86901c60048201526001600160a01b038a166024820152604490fd5b50336001600160a01b038816141561131f565b90506020813d602011611ace575b81611ab760209383613b73565b8101031261017b57611ac890613b94565b88611317565b3d9150611aaa565b611aeb91503d806000833e610af78183613b73565b8b6102f6565b90506020813d602011611b23575b81611b0c60209383613b73565b8101031261017b57611b1d90613b94565b886112a8565b3d9150611aff565b50600019810181811161063557611b429085613abe565b905460039190911b1c6001600160a01b039081169087161461124a565b505061123190613c7d565b3461017b5761010036600319011261017b57611b84613a4e565b6044356001600160a01b038116810361017b57606435906001600160a01b038216820361017b5760843590811515820361017b5760c4356001600160a01b038116900361017b5760e4356001600160a01b038116900361017b5760008054604051639662022560e01b81529190829060049082906001600160a01b03165afa9081156109dd57600091611f04575b505161010001516001600160a01b03163303610c4d576004356000526003602052604060002060018060a01b03851660005260205260406000205415611ea4575b6004356000526003602052604060002060018060a01b038516600052602052604060002091604051611c8481613b07565b60a435815260c4356001600160a01b0316602082015260405192611ca784613b22565b6001600160a01b0390811684529485166020840190815286861660408501908152921515606085019081526080850192835260e43590961660a08501908152855491969095909391600160401b811015611e8e57611d0a91600182018155613aeb565b939093611e7857935183546001600160a01b03199081166001600160a01b039283161785559651600185810180548a1692841692909217909155915160028501805496516001600160a81b03199097169183169190911795151560a01b60ff60a01b1695909517909455905180516003840155602090810151600480850180548916928716929092179091559451600593840180548816918616919091179055933560009081529184526040808320938716835292909352208054611dd29060a43590613fc5565b815501805490916001600160a01b03821680611e5057501660c4356001600160a01b03161790555b6040805160a43581526001600160a01b0360c4358116602083015260e435811692820192909252911690600435907fec0c6f71633237438c3cd75ed1c85f0548173de51a81e7ee34a578c37440ac6190606090a3005b60c4356001600160a01b0316149250611dfa91505057604051631eb3268560e31b8152600490fd5b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600435600052600460205260406000208054600160401b811015611e8e5761060181611ed69360018994018155613abe565b611eef6004356000526002602052604060002054151590565b611c5357611efe600435614dd3565b50611c53565b611f1991503d806000833e610af78183613b73565b85611c12565b3461017b57602036600319011261017b57611f38613a64565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081549060ff8260401c1615916001600160401b03811680159081612071575b6001149081612067575b15908161205e575b5061204c5767ffffffffffffffff19811660011784558261202d575b50611fb0614d92565b611fb8614d92565b6001600080516020614f198339815191525560018060a01b03166bffffffffffffffffffffffff60a01b6000541617600055611ff057005b68ff00000000000000001981541690557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b68ffffffffffffffffff19166801000000000000000117835583611fa7565b60405163f92ee8a960e01b8152600490fd5b90501585611f8b565b303b159150611f83565b849150611f79565b3461017b57602036600319011261017b5760206120a56004356000526002602052604060002054151590565b6040519015158152f35b3461017b57600036600319011261017b57600180546120cd81613ca1565b9060005b81811061211857828460405190602080830160208452845180915260206040850195019160005b8281106121055785870386f35b83518752958101959281019284016120f8565b806121238592613a87565b90549060031b1c6121348286613cd3565b52016120d1565b3461017b5760208060031936011261017b5760043560005260048152604060002060405190818382549182815201908192600052846000209060005b868282106121d657868661218d82880383613b73565b604051928392818401908285525180915260408401929160005b8281106121b657505050500390f35b83516001600160a01b0316855286955093810193928101926001016121a7565b83546001600160a01b031685529093019260019283019201612177565b3461017b57604036600319011261017b5761220c613a64565b6024906024359061ffff8216820361017b5761222661428e565b6001549160018060a01b03908183169284841515955b612254576001600080516020614f1983398151915255005b6000198181018281116123345761226a90613a87565b9054600391821b1c9061227c826142be565b156123285781600052600460205260406000208054805b6122ab5750505050506122a590613c7d565b8061223c565b8a80969b9a959a999499906122e8575b906122c9916122d857613c7d565b809a959a999499989398612293565b6122e389898c61437c565b613c7d565b508981019080821161231357846123026122c99385613abe565b905490861b1c1686149091506122bb565b8c634e487b7160e01b60005260116004526000fd5b5050506122a590613c7d565b88634e487b7160e01b60005260116004526000fd5b3461017b57600036600319011261017b57602060405160648152f35b3461017b57606036600319011261017b5761237e613a4e565b60443561ffff8116810361017b576123a09161239861428e565b60043561437c565b6001600080516020614f1983398151915255005b3461017b57604036600319011261017b576123cd613a4e565b6123d561428e565b6001600160a01b03811615610b0e57600054604051631355eead60e21b815260048035908201526001600160a01b039091169190602081602481865afa9081156109dd57600091612c62575b5061002857604051639662022560e01b8152600081600481865afa80156109dd57608060209161247c93600091612c4757500151604051632474521560e21b8152600481019190915233602482015291829081906044820190565b0381865afa9081156109dd57600091612c0d575b501580612bfa575b610028576004356000526005602052604060002060018060a01b0382166000526020526040600020918254908115612bd1576004356000526003602052604060002060018060a01b038416600052602052604060002093845415612ba857600101546001600160a01b03169361250d90613ad6565b5060050154604051639662022560e01b81526001600160a01b039091169190600081600481855afa9081156109dd5761ffff91602091600091612b8d575b500151169081606411610b0e57600090600092859480158015612b84575b1561272b5750505061257c848688614e39565b85925b6040519387855285602086015260018060a01b03166040850152606084015215156080830152151560a0820152606460c082015260018060a01b038316903090600080516020614ed983398151915260e060043592a46004356000526003602052604060002060018060a01b0383166000526020526126016040600020613bc3565b6004356000526005602052604060002060018060a01b038316600052602052600060016040822082815501556004356000526004602052604060002091825460005b8181106126b7575b505061268f90600080516020614ef9833981519152929354156126a6575b604080519485526001600160a01b03958616602086015294169360043593918291820190565b0390a36001600080516020614f1983398151915255005b6126b1600435614c17565b50612669565b6126c18186613abe565b905460039190911b1c6001600160a01b03908116908416146126e557600101612643565b9293600019820193929184116106355761271861268f936106016105e8600080516020614ef98339815191529785613abe565b61272181613c3a565b939281925061264b565b909192506004600060019460405192838092639662022560e01b82525afa9081156109dd57600091612b69575b505161012001516001600160a01b031691826127835750505061277c848688614e39565b859261257f565b604051636eb1769f60e11b8152306004820152602481018490526020816044818d5afa80156109dd578891600091612b34575b5010612a7a575b604051633dccbfc560e01b8152600481018890526001600160a01b038a8116602483015283166044820152600081606481875afa9081156109dd576000906000926128e7575b50806128de575b156128cf5760631982019061ffff82116106355761ffff61282c921690613bb0565b9281156108135760a48860008c93602095604051988996879563545ac70d60e01b87526004870152602486015288604486015204606484015260018060a01b038d1660848401525af16000928161289b575b5061289057505061277c848688614e39565b93506001925061257f565b9092506020813d6020116128c7575b816128b760209383613b73565b8101031261017b5751918961287e565b3d91506128aa565b5050505061277c848688614e39565b5080151561280a565b9150503d90816000823e6128fb8282613b73565b606081838101031261017b5761291081613b94565b906020810151926040820151906001600160401b03821161017b5760a0828401828501031261017b576040519261294684613b58565b612951838201613ce7565b8452602083820101516001600160401b03811161017b57828201601f828685010101121561017b5780848301015161298881613c8a565b916129966040519384613b73565b818352602083019085850160208460051b838a89010101011161017b57906020828887010101915b60208460051b828a89010101018310612a5f57505050506020850152604083820101516001600160401b03811161017b57612a00908383019085840101614d18565b6040850152606083820101516001600160401b03811161017b57612a2b908383019085840101614d18565b6060850152608083820101516001600160401b03811161017b57608093612a56938301920101614d18565b9101528b612803565b6020808093612a6d86613ce7565b81520193019291506129be565b60405163095ea7b360e01b60208083019182526001600160a01b03861660248401526000196044840152906000908c90612ab78560648101610a22565b828551925af16000513d82612b18575b505015612ad5575b506127bd565b612b1290612b0c60405163095ea7b360e01b60208201528660248201526000604482015260448152612b0681613b3d565b8c614e7c565b8a614e7c565b89612acf565b909150612b2c5750893b15155b8b80612ac7565b600114612b25565b9150506020813d602011612b61575b81612b5060209383613b73565b8101031261017b578790518b6127b6565b3d9150612b43565b612b7e91503d806000833e610af78183613b73565b89612758565b50888114612569565b612ba291503d806000833e610af78183613b73565b8861254b565b604051632eee564760e01b815260048035908201526001600160a01b0385166024820152604490fd5b604051632eee564760e01b815260048035908201526001600160a01b0384166024820152604490fd5b50336001600160a01b0382161415612498565b90506020813d602011612c3f575b81612c2860209383613b73565b8101031261017b57612c3990613b94565b83612490565b3d9150612c1b565b612c5c91503d806000833e610af78183613b73565b866102f6565b90506020813d602011612c94575b81612c7d60209383613b73565b8101031261017b57612c8e90613b94565b83612421565b3d9150612c70565b3461017b57600036600319011261017b57612cb561428e565b600154805b612cd2576001600080516020614f1983398151915255005b600019810181811161063557612ce790613a87565b91905491612cf9838260031b1c6142be565b612d0f575b50612d099150613c7d565b80612cba565b60008054604051639662022560e01b8152916001600160a01b039091169082600481845afa9081156109dd576080602092612d789460009161370057500151604051632474521560e21b8152600481019190915233602482015292839190829081906044820190565b03915afa9081156109dd576000916136c6575b5015610c4d57828160031b1c60005260046020526040600020805493845b612db4575050612cfe565b919291600019850185811161063557612dcd9083613abe565b905460039190911b1c6001600160a01b0316948515610b0e5760018060a01b036000541695604051631355eead60e21b8152838760031b1c60048201526020816024818b5afa9081156109dd5760009161368c575b5061002857604051639662022560e01b81526000816004818b5afa80156109dd576080602091612e7d93600091611ad657500151604051632474521560e21b8152600481019190915233602482015291829081906044820190565b03818b5afa9081156109dd57600091613652575b501580613648575b61002857828660031b1c6000526005602052604060002081600052602052604060002096875490811561361a57848860031b1c60005260036020526040600020836000526020526040600020988954156135ec57600101546001600160a01b031698612f0490613ad6565b5060050154604051639662022560e01b81526001600160a01b0390911690600081600481865afa9081156109dd5761ffff916020916000916135d1575b500151169182606411610b0e578492848c6000926000948396801580156135c8575b1561311d575050509085612f7692614e39565b8b925b604051938d855286602086015260018060a01b03166040850152606084015215156080830152151560a0820152606460c08201523090600080516020614ed983398151915260e0888c60031b1c92a4838760031b1c6000526003602052604060002082600052602052612fef6040600020613bc3565b838760031b1c600052600560205260406000208260005260205260006001604082208281550155838760031b1c6000526004602052604060002097885460005b8181106130a0575b5050610561600080516020614ef983398151915291613083969798999a541561308c575b604080519485526001600160a01b03909116602085015260038b901b88901c93918291820190565b93919084612da9565b61309a888c60031b1c614c17565b5061305b565b846130ab828d613abe565b905460039190911b1c6001600160a01b0316146130ca5760010161302f565b90918260009b9798999a9b198101116106355761308396613108610561936106016105e8600080516020614ef9833981519152976000190185613abe565b61311181613c3a565b9a999897965091613037565b935093509550506004600060019360405192838092639662022560e01b82525afa9182156109dd5788968f929389946000916135ad575b505161012001516001600160a01b0316908161317f57505050908561317892614e39565b8b92612f79565b926044929850602091945060405192838092636eb1769f60e11b82523060048301528760248301525afa80156109dd578f9089908993600091613570575b50916132049391600093106134b7575b604051633dccbfc560e01b8152600481018c90526001600160a01b0391821660248201529116604482015291829081906064820190565b0381865afa9081156109dd578f89908b9260009060009561331d575b5080613314575b156133025750505060631982019061ffff82116106355761ffff61324c921690613bb0565b9181156108135788968f9260209060a48b966000604051968794859363545ac70d60e01b85528b60048601528a60248601528860448601520460648401528d60848401525af1600092816132c2575b5088939291906132b2575050906131789291614e39565b9550955050505060019192612f79565b985093509150506020863d6020116132fa575b816132e260209383613b73565b8101031261017b579451879587928f9291908861329b565b3d91506132d5565b91985092506131789350879150614e39565b50831515613227565b9450505050503d90816000823e6133348282613b73565b606081838101031261017b578f9161334b82613b94565b9260208301519360408401516001600160401b03811161017b5760a0818601858701031261017b576040519061338082613b58565b61338b818701613ce7565b8252602081870101516001600160401b03811161017b57858701601f82848a010101121561017b578082880101516133c281613c8a565b916133d06040519384613b73565b8183526020830190888a0160208b83888760051b92010101011161017b57602081868c010101915b60208b83888760051b9201010101831061349f57505050506020830152604081870101516001600160401b03811161017b5761343b908688019083890101614d18565b6040830152606081870101516001600160401b03811161017b57613466908688019083890101614d18565b606083015260808187010151946001600160401b03861161017b578f968f96608093613496938301920101614d18565b91015238613220565b602080916134ac85613ce7565b8152019201916133f8565b60405163095ea7b360e01b60208083019182526001600160a01b038916602484015260001960448401529085906134f18460648101611933565b83519082865af184513d82613551575b50501561350f575b506131cd565b61354b9061354560405163095ea7b360e01b60208201528960248201528660448201526044815261353f81613b3d565b84614e7c565b82614e7c565b38613509565b9091501585146135685750813b15155b3880613501565b600114613561565b93505050506020813d6020116135a5575b8161358e60209383613b73565b8101031261017b575186908f9089906132046131bd565b3d9150613581565b6135c291503d806000833e610af78183613b73565b38613154565b50838114612f63565b6135e691503d806000833e610af78183613b73565b8d612f41565b604051632eee564760e01b815260038a901b87901c60048201526001600160a01b0385166024820152604490fd5b604051632eee564760e01b8152600389901b86901c60048201526001600160a01b0384166024820152604490fd5b5080331415612e99565b90506020813d602011613684575b8161366d60209383613b73565b8101031261017b5761367e90613b94565b88612e91565b3d9150613660565b90506020813d6020116136be575b816136a760209383613b73565b8101031261017b576136b890613b94565b88612e22565b3d915061369a565b90506020813d6020116136f8575b816136e160209383613b73565b8101031261017b576136f290613b94565b84612d8b565b3d91506136d4565b61371591503d806000833e610af78183613b73565b886101e6565b3461017b57604036600319011261017b57600054602491600435916001600160a01b039184359183163303613a3f5750916000905b8060005260206004815260406000209081549283151580613a36575b15613a2b576000199283850194851161233457869461378a91613abe565b949054600395861b1c16968160005284835260406000208860005283526040600020955b865480151580613a22575b1561398c57858101908111613977576137d29088613aeb565b5090886002928884820160ff815460a01c1660001461396257600089613835600487875416955b8701960196875416865460405194858094819363a9059cbb60e01b83528a6004840160209093929193604081019460018060a01b031681520152565b03925af16000918161392b575b5061385f575b50505050506138579150613ba1565b975b976137ae565b1561391f57549154925460408051948552908d166001600160a01b03166020850152908c1692918c169187917f0adc28922429a8215a5d1f826665bec9bdd0118be4fdc15f00412690684b1b7c91a48754801561390a5786016138c2818a613aeb565b6138f55760058160006138579681809555816001840155820155828b820155826004820155015588558b80808080613848565b8c634e487b7160e01b60005260006004526000fd5b8b634e487b7160e01b60005260316004526000fd5b50505050989050613859565b9091508a81813d831161395b575b6139438183613b73565b8101031261017b5761395490613b94565b9038613842565b503d613939565b600089613835600487600188015416956137f9565b8a634e487b7160e01b60005260116004526000fd5b5097919493509454156139a5575b505050929092613750565b60049284600052825260406000208160005282526139c66040600020613bc3565b8360005260058252604060002090600052815260006001604082208281550155826000528181526139fa6040600020613c3a565b826000525260406000205415613a13575b85808061399a565b613a1c81614c17565b50613a0b565b508282106137b9565b602085604051908152f35b5086851061376c565b6348f5c3ed60e01b8152600490fd5b602435906001600160a01b038216820361017b57565b600435906001600160a01b038216820361017b57565b9190820391821161063557565b6001548110156111445760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b80548210156111445760005260206000200190600090565b80541561114457600052602060002090600090565b8054821015611144576000526006602060002091020190600090565b604081019081106001600160401b03821117611e8e57604052565b60c081019081106001600160401b03821117611e8e57604052565b608081019081106001600160401b03821117611e8e57604052565b60a081019081106001600160401b03821117611e8e57604052565b90601f801991011681019081106001600160401b03821117611e8e57604052565b5190811515820361017b57565b60001981146106355760010190565b8181029291811591840414171561063557565b8054600080835581613bd457505050565b60069282600602926006840403613c2657815260208120918201915b828110613bfd5750505050565b808285925582600182015582600282015582600382015582600482015582600582015501613bf0565b634e487b7160e01b82526011600452602482fd5b80548015613c67576000190190613c518282613abe565b81549060018060a01b039060031b1b1916905555565b634e487b7160e01b600052603160045260246000fd5b8015610635576000190190565b6001600160401b038111611e8e5760051b60200190565b90613cab82613c8a565b613cb86040519182613b73565b8281528092613cc9601f1991613c8a565b0190602036910137565b80518210156111445760209160051b010190565b51906001600160a01b038216820361017b57565b519061ffff8216820361017b57565b919082606091031261017b57604051606081018181106001600160401b03821117611e8e576040526040613d5c818395613d4381613ce7565b8552613d5160208201613ce7565b602086015201613cfb565b910152565b906020808383031261017b5782516001600160401b039384821161017b57019060a08284031261017b57604090815194613d9a86613b58565b835181811161017b5784019461014091828783031261017b57845192830183811082821117611e8e578552865160ff8116810361017b5783528387015181811161017b5787019082601f8301121561017b57815190613df882613c8a565b93613e0588519586613b73565b828552868086019360051b8501019381851161017b57878101935b858510613efb5750505050508284019190915250848301516001600160a01b0390818116810361017b5784830152606086015160608301526080860151818116810361017b57608083015260a0860151818116810361017b5760a083015260c0860151818116810361017b5760c083015260e0860151818116810361017b5760e08301526101008087015190828216820361017b5783015261012080960151908116810361017b576080958201528552613edb818401613cfb565b908501528082015190840152606081015160608401520151608082015290565b845184811161017b57820160809081601f19828703011261017b578b5191613f2283613b07565b613f2e868d8401613d0a565b83528101519086821161017b570184603f8201121561017b578a8101518c91613f62613f5983613c8a565b93519384613b73565b8183528d8d84019060608094028301019188831161017b57918f8f969492979593015b818110613fa15750505083809550820152815201940193613e20565b9193958491939597613fb38b85613d0a565b8152019101918e959391969492613f85565b9190820180921161063557565b90613fdc82613c8a565b604090613fec6040519182613b73565b8381528093613ffd601f1991613c8a565b019160009160005b848110614013575050505050565b602090835161402181613b3d565b858152606086849180838501528088850152830152828501015201614005565b9061404b82613c8a565b60409061405b6040519182613b73565b838152809361406c601f1991613c8a565b019160009060005b848110614082575050505050565b602090825161409081613b07565b848152828581830152828701015201614074565b906040516140b181613b07565b825481526001909201546001600160a01b03166020830152565b60009081526003602081815260408084206001600160a01b03958616855282528084208054969897909593949390878a101561425357801561424b575b614112908a613fc5565b96808811614243575b506141268988613a7a565b9361413085613c8a565b9461413d84519687613b73565b80865261414c601f1991613c8a565b019084815b8381106141f957505050508398805b88811061417257505050505050505090565b806141f26141826001938b613aeb565b5061418d8584613a7a565b908a8760058a519361419e85613b22565b8281541685528289820154168d8601526141d56002820154948d8587169088015260ff60a096871c161515606088015282016140a4565b6080860152015416908201526141eb828b613cd3565b5288613cd3565b5001614160565b855161420481613b22565b83815283838201528387820152836060820152865161422281613b07565b848152848482015260808201528360a082015282828a010152018590614151565b96503861411b565b506064614108565b50508051959750919350840191506001600160401b0382118483101761427a575281529190565b634e487b7160e01b83526041600452602483fd5b600080516020614f1983398151915260028154146142ac5760029055565b604051633ee5aeb560e01b8152600490fd5b60008054604051631355eead60e21b815260048101849052919290602090839060249082906001600160a01b03165afa918215614371578392614331575b508115614312575b5061430f5750600190565b90565b61432a91506000526002602052604060002054151590565b1538614304565b9091506020813d602011614369575b8161434d60209383613b73565b810103126143655761435e90613b94565b90386142fc565b8280fd5b3d9150614340565b6040513d85823e3d90fd5b9091906001600160a01b03831615610b0e57600054604051631355eead60e21b8152600481018390526001600160a01b0390911690602081602481855afa9081156109dd57600091614bdd575b5061002857604051639662022560e01b8152600081600481855afa80156109dd57608060209161442493600091614bc257500151604051632474521560e21b8152600481019190915233602482015291829081906044820190565b0381855afa9081156109dd57600091614b88575b501580614b75575b61002857816000526005602052604060002060018060a01b0385166000526020526040600020908154938415614b4d57836000526003602052604060002060018060a01b038716600052602052604060002092835415614b2557600101546001600160a01b0316926144b190613ad6565b5060050154604051639662022560e01b81526001600160a01b039091169190600081600481875afa9081156109dd5761ffff91602091600091614b0a575b50015116928361ffff831611610b0e5760008091889480158015614b01575b156146a157505061ffff939450614526888a88614e39565b85945b6040519587875289602088015260018060a01b03166040870152606086015215156080850152151560a08401521660c082015260018060a01b0385169083600080516020614ed983398151915260e03093a4816000526003602052604060002060018060a01b0385166000526020526145a56040600020613bc3565b816000526005602052604060002060018060a01b0385166000526020526000600160408220828155015581600052600460205260406000209384549460005b868110614633575b50600080516020614ef9833981519152939495505415614624575b604080519586526001600160a01b039283166020870152911693a3565b61462d84614c17565b50614607565b61463d8183613abe565b905460039190911b1c6001600160a01b0390811690841614614661576001016145e4565b939495600019810190811161063557600080516020614ef9833981519152946106016105e86146909385613abe565b61469981613c3a565b8594936145ec565b9091506004600060019360405192838092639662022560e01b82525afa9081156109dd57600091614ae6575b505161012001516001600160a01b031695866146fd57505061ffff9394506146f6888a88614e39565b8594614529565b604051636eb1769f60e11b8152306004820152602481018890526020816044818c5afa80156109dd578b91600091614ab1575b5010614a04575b604051633dccbfc560e01b8152600481018b90526001600160a01b038981166024830152831660448201526000816064818b5afa9081156109dd57600090600092614871575b5080614868575b156148545761ffff861682039061ffff82116106355761ffff6147a8921690613bb0565b9681156108135760a48b60008b938f6020966040519d8e97889663545ac70d60e01b88526004880152602487015289604487015204606485015260018060a01b031660848401525af160009681614820575b50614811575061ffff9394506146f6888a88614e39565b9461ffff945060019250614529565b9096506020813d60201161484c575b8161483c60209383613b73565b8101031261017b575195386147fa565b3d915061482f565b50505061ffff9394506146f6888a88614e39565b50801515614784565b9150503d90816000823e6148858282613b73565b606081838101031261017b5761489a81613b94565b906020810151926040820151906001600160401b03821161017b5760a0828401828501031261017b57604051926148d084613b58565b6148db838201613ce7565b8452602083820101516001600160401b03811161017b57828201601f828685010101121561017b5780848301015161491281613c8a565b916149206040519384613b73565b818352602083019085850160208460051b838a89010101011161017b57906020828887010101915b60208460051b828a890101010183106149e957505050506020850152604083820101516001600160401b03811161017b5761498a908383019085840101614d18565b6040850152606083820101516001600160401b03811161017b576149b5908383019085840101614d18565b6060850152608083820101516001600160401b03811161017b576080936149e0938301920101614d18565b9101523861477d565b60208080936149f786613ce7565b8152019301929150614948565b60405163095ea7b360e01b60208083019182526001600160a01b038a166024840152600019604484015290600090614a3f8460648101611933565b835190828d5af16000513d82614a95575b505015614a5e575b50614737565b614a8f9061199160405163095ea7b360e01b60208201528a60248201526000604482015260448152610a8581613b3d565b38614a58565b909150614aa95750883b15155b3880614a50565b600114614aa2565b9150506020813d602011614ade575b81614acd60209383613b73565b8101031261017b578a905138614730565b3d9150614ac0565b614afb91503d806000833e610af78183613b73565b386146cd565b5087811461450e565b614b1f91503d806000833e610af78183613b73565b386144ef565b604051632eee564760e01b8152600481018690526001600160a01b0388166024820152604490fd5b604051632eee564760e01b8152600481018590526001600160a01b0387166024820152604490fd5b50336001600160a01b0385161415614440565b90506020813d602011614bba575b81614ba360209383613b73565b8101031261017b57614bb490613b94565b38614438565b3d9150614b96565b614bd791503d806000833e610af78183613b73565b386102f6565b90506020813d602011614c0f575b81614bf860209383613b73565b8101031261017b57614c0990613b94565b386143c9565b3d9150614beb565b6000818152600260205260408120549091908015614d135760001990808201818111614cff5760015490838201918211614ceb57818103614ca0575b5050506001548015614c8c57810190614c6b82613a87565b909182549160031b1b19169055600155815260026020526040812055600190565b634e487b7160e01b84526031600452602484fd5b614cd5614caf614cbe93613a87565b90549060031b1c928392613a87565b819391549060031b91821b91600019901b19161790565b9055845260026020526040842055388080614c53565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b85526011600452602485fd5b505090565b9080601f8301121561017b57815190602091614d3381613c8a565b93614d416040519586613b73565b81855260208086019260051b82010192831161017b57602001905b828210614d6a575050505090565b81516fffffffffffffffffffffffffffffffff8116810361017b578152908301908301614d5c565b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c1615614dc157565b604051631afcd79f60e31b8152600490fd5b600081815260026020526040812054614e3457600154600160401b811015614e20579082614e0c614cbe84600160409601600155613a87565b905560015492815260026020522055600190565b634e487b7160e01b82526041600452602482fd5b905090565b60405163a9059cbb60e01b60208201526001600160a01b03929092166024830152604480830193909352918152614e7a91614e75606483613b73565b614e7c565b565b906000602091828151910182855af1156109dd576000513d614ecf57506001600160a01b0381163b155b614ead5750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b60011415614ea656fecc38713e5e2de070bfab33e9628de4b3cd0514b73596e57c65f757544ffae4f3c4dc55ebb404cdb4121dc2e8739cb7c2bf00e3d237028f6c485602154d995ee19b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a264697066735822122019daed82abd26850430cd63083657be334eb56d26f2ddd86d0aa4de9345dc55364736f6c63430008180033",
  "devdoc": {
    "author": "Gildi Company",
    "custom:security-contact": "security@gildi.io",
    "errors": {
      "FundNotFound(uint256,address)": [
        {
          "details": "Error thrown when a fund is not found",
          "params": {
            "participant": "The address of the fund participant",
            "releaseId": "The ID of the release"
          }
        }
      ],
      "InvalidCaller()": [
        {
          "details": "Emitted when the caller is invalid"
        }
      ],
      "InvalidCurrency()": [
        {
          "details": "Error thrown when an incompatible currency is provided"
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotAllowed()": [
        {
          "details": "Emitted when an operation is not allowed for the caller"
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ParamError()": [
        {
          "details": "Emitted when a function parameter is invalid or out-of-range (e.g. zero batchSize, zero price, etc.)"
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "events": {
      "FundAdded(uint256,address,uint256,address,address)": {
        "params": {
          "amount": "The amount added",
          "amountCurrency": "The currency of the fund amount",
          "fundParticipant": "The fund participant (seller or fee participant)",
          "payoutCurrency": "The currency to payout in",
          "releaseId": "The ID of the release"
        }
      },
      "FundCancelled(uint256,address,address,uint256,address)": {
        "params": {
          "amount": "The amount returned",
          "currency": "The currency of the fund",
          "fundParticipant": "The fund participant (seller or fee participant)",
          "releaseId": "The ID of the release",
          "returnedTo": "The address that received the returned funds"
        }
      },
      "FundClaimed(uint256,address,uint256,address)": {
        "params": {
          "amount": "The amount claimed",
          "currency": "The currency of the fund",
          "fundParticipant": "The fund participant (seller or fee participant) claiming funds",
          "releaseId": "The ID of the release"
        }
      },
      "FundTransferred(uint256,address,address,address,uint256,address,uint256,bool,bool,uint16)": {
        "params": {
          "amount": "The amount of source token",
          "from": "The contract address (normally this contract)",
          "payoutToken": "The token received by the recipient (may differ from sourceToken if swapped)",
          "releaseId": "The ID of the release",
          "slippageBps": "The slippage tolerance in basis points used for swaps",
          "sourceToken": "The source token used for payment",
          "swapAmount": "The amount received after swap (if performed)",
          "swapRequested": "Whether a token swap was requested",
          "swapSuccessful": "Whether the swap was successful (if requested)",
          "to": "The fund participant receiving the funds"
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "claimAllFunds(address)": {
        "params": {
          "_fundParticipant": "The address of the fund participant"
        }
      },
      "claimAllFunds(address,uint16)": {
        "params": {
          "_fundParticipant": "The address of the fund participant",
          "_slippageBps": "Optional slippage tolerance in basis points (100 = 1%, 500 = 5%)"
        }
      },
      "claimAllFundsByReleaseId(uint256)": {
        "params": {
          "_releaseId": "The ID of the release"
        }
      },
      "claimFunds(uint256,address)": {
        "params": {
          "_fundParticipant": "The address of the fund participant",
          "_releaseId": "The ID of the release"
        }
      },
      "claimFunds(uint256,address,uint16)": {
        "params": {
          "_fundParticipant": "The address of the fund participant",
          "_releaseId": "The ID of the release",
          "_slippageBps": "Optional slippage tolerance in basis points (100 = 1%, 500 = 5%)"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "fetchPendingFundAmounts(uint256,address)": {
        "details": "if releaseId is 0, fetches for all releases, if participant is 0, fetches for all participants",
        "params": {
          "_participant": "The address of the fund participant",
          "_releaseId": "The ID of the release"
        },
        "returns": {
          "_0": "An array of pending fund amounts with claimable status"
        }
      },
      "getReleaseFundAmount(uint256,address)": {
        "params": {
          "_participant": "The address of the fund participant",
          "_releaseId": "The ID of the release"
        },
        "returns": {
          "_0": "The fund amount details"
        }
      },
      "getReleaseFundParticipants(uint256)": {
        "params": {
          "_releaseId": "The ID of the release"
        },
        "returns": {
          "_0": "An array of participant addresses"
        }
      },
      "getReleaseFunds(uint256,address,uint256,uint256)": {
        "params": {
          "_cursor": "The starting index for pagination",
          "_length": "The number of funds to retrieve",
          "_participant": "The address of the fund participant",
          "_releaseId": "The ID of the release"
        },
        "returns": {
          "funds": "An array of funds",
          "nextCursor": "The next cursor for pagination"
        }
      },
      "getReleaseIdsWithFunds()": {
        "returns": {
          "_0": "An array of release IDs that currently have active funds"
        }
      },
      "handleAddToFund(uint256,address,address,address,bool,uint256,address,address)": {
        "params": {
          "_amount": "The amount to add to fund",
          "_amountCurrency": "The currency of the fund amount",
          "_buyer": "The address of the buyer",
          "_isProxyOperation": "Whether this is a proxy operation",
          "_operator": "The address of the operator",
          "_participant": "The address of the fund participant",
          "_payoutCurrency": "The currency to payout in",
          "_releaseId": "The ID of the release"
        }
      },
      "handleCancelReleaseFunds(uint256,uint256)": {
        "params": {
          "_batchSize": "The number of funds to process in this batch",
          "_releaseId": "The ID of the release"
        },
        "returns": {
          "processed": "The number of funds processed"
        }
      },
      "initialize(address)": {
        "params": {
          "_gildiExchange": "The address of the GildiExchange contract"
        }
      },
      "releaseHasFunds(uint256)": {
        "params": {
          "_releaseId": "The ID of the release"
        },
        "returns": {
          "_0": "True if the release has funds, false otherwise"
        }
      }
    },
    "stateVariables": {
      "releaseFundAmountByParticipant": {
        "details": "releaseId => participant => amount"
      },
      "releaseFundParticipants": {
        "details": "releaseId => participants[]"
      },
      "releaseFundsByParticipant": {
        "details": "releaseId => participant => funds[]"
      }
    },
    "title": "Gildi Exchange Fund Manager",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FundAdded(uint256,address,uint256,address,address)": {
        "notice": "Emitted when an fund is added"
      },
      "FundCancelled(uint256,address,address,uint256,address)": {
        "notice": "Emitted when an fund is cancelled and funds are returned"
      },
      "FundClaimed(uint256,address,uint256,address)": {
        "notice": "Emitted when a user claims funds"
      },
      "FundTransferred(uint256,address,address,address,uint256,address,uint256,bool,bool,uint16)": {
        "notice": "Emitted when funds are transferred to a participant"
      }
    },
    "kind": "user",
    "methods": {
      "DEFAULT_SLIPPAGE_BPS()": {
        "notice": "Default slippage tolerance in basis points (1%)"
      },
      "claimAllFunds()": {
        "notice": "Claims all funds for all participants across all releases"
      },
      "claimAllFunds(address)": {
        "notice": "Claims all funds for a participant across all releases with default slippage (5%)"
      },
      "claimAllFunds(address,uint16)": {
        "notice": "Claims all funds for a participant across all releases"
      },
      "claimAllFundsByReleaseId(uint256)": {
        "notice": "Claims all funds for all participants of a specific release"
      },
      "claimFunds(uint256,address)": {
        "notice": "Claims funds for a participant of a release with default slippage (5%)"
      },
      "claimFunds(uint256,address,uint16)": {
        "notice": "Claims funds for a participant of a release"
      },
      "fetchPendingFundAmounts(uint256,address)": {
        "notice": "Fetches pending fund amounts for a participant and release"
      },
      "getReleaseFundAmount(uint256,address)": {
        "notice": "Gets the total fund amount for a participant of a release"
      },
      "getReleaseFundParticipants(uint256)": {
        "notice": "Gets all fund participants for a release"
      },
      "getReleaseFunds(uint256,address,uint256,uint256)": {
        "notice": "Retrieves funds for a participant of a release"
      },
      "getReleaseIdsWithFunds()": {
        "notice": "Gets all release IDs that have funds"
      },
      "gildiExchange()": {
        "notice": "The GildiExchange contract that calls this contract"
      },
      "handleAddToFund(uint256,address,address,address,bool,uint256,address,address)": {
        "notice": "Adds funds to fund for a participant"
      },
      "handleCancelReleaseFunds(uint256,uint256)": {
        "notice": "Cancels funds for a release in batches"
      },
      "initialize(address)": {
        "notice": "Initializes the contract"
      },
      "releaseHasFunds(uint256)": {
        "notice": "Checks if a release has any funds"
      }
    },
    "notice": "Manages fund functionality for the Gildi Exchange marketplace.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17073,
        "contract": "contracts/marketplace/exchange/GildiExchangeFundManager.sol:GildiExchangeFundManager",
        "label": "gildiExchange",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IGildiExchange)12273"
      },
      {
        "astId": 17077,
        "contract": "contracts/marketplace/exchange/GildiExchangeFundManager.sol:GildiExchangeFundManager",
        "label": "releaseIdsWithFunds",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(UintSet)10906_storage"
      },
      {
        "astId": 17086,
        "contract": "contracts/marketplace/exchange/GildiExchangeFundManager.sol:GildiExchangeFundManager",
        "label": "releaseFundsByParticipant",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_array(t_struct(Fund)12297_storage)dyn_storage))"
      },
      {
        "astId": 17092,
        "contract": "contracts/marketplace/exchange/GildiExchangeFundManager.sol:GildiExchangeFundManager",
        "label": "releaseFundParticipants",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 17100,
        "contract": "contracts/marketplace/exchange/GildiExchangeFundManager.sol:GildiExchangeFundManager",
        "label": "releaseFundAmountByParticipant",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(FundAmount)12305_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Fund)12297_storage)dyn_storage": {
        "base": "t_struct(Fund)12297_storage",
        "encoding": "dynamic_array",
        "label": "struct IGildiExchangeFundManager.Fund[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IGildiExchange)12273": {
        "encoding": "inplace",
        "label": "contract IGildiExchange",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Fund)12297_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IGildiExchangeFundManager.Fund[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Fund)12297_storage)dyn_storage"
      },
      "t_mapping(t_address,t_struct(FundAmount)12305_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IGildiExchangeFundManager.FundAmount)",
        "numberOfBytes": "32",
        "value": "t_struct(FundAmount)12305_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_array(t_struct(Fund)12297_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct IGildiExchangeFundManager.Fund[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_struct(Fund)12297_storage)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(FundAmount)12305_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct IGildiExchangeFundManager.FundAmount))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(FundAmount)12305_storage)"
      },
      "t_struct(Fund)12297_storage": {
        "encoding": "inplace",
        "label": "struct IGildiExchangeFundManager.Fund",
        "members": [
          {
            "astId": 12280,
            "contract": "contracts/marketplace/exchange/GildiExchangeFundManager.sol:GildiExchangeFundManager",
            "label": "buyer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12283,
            "contract": "contracts/marketplace/exchange/GildiExchangeFundManager.sol:GildiExchangeFundManager",
            "label": "operator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 12286,
            "contract": "contracts/marketplace/exchange/GildiExchangeFundManager.sol:GildiExchangeFundManager",
            "label": "fundParticipant",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 12289,
            "contract": "contracts/marketplace/exchange/GildiExchangeFundManager.sol:GildiExchangeFundManager",
            "label": "isProxyOperation",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 12293,
            "contract": "contracts/marketplace/exchange/GildiExchangeFundManager.sol:GildiExchangeFundManager",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(FundAmount)12305_storage"
          },
          {
            "astId": 12296,
            "contract": "contracts/marketplace/exchange/GildiExchangeFundManager.sol:GildiExchangeFundManager",
            "label": "payoutCurrency",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(FundAmount)12305_storage": {
        "encoding": "inplace",
        "label": "struct IGildiExchangeFundManager.FundAmount",
        "members": [
          {
            "astId": 12301,
            "contract": "contracts/marketplace/exchange/GildiExchangeFundManager.sol:GildiExchangeFundManager",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12304,
            "contract": "contracts/marketplace/exchange/GildiExchangeFundManager.sol:GildiExchangeFundManager",
            "label": "currencyAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)10214_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 10209,
            "contract": "contracts/marketplace/exchange/GildiExchangeFundManager.sol:GildiExchangeFundManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 10213,
            "contract": "contracts/marketplace/exchange/GildiExchangeFundManager.sol:GildiExchangeFundManager",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)10906_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 10905,
            "contract": "contracts/marketplace/exchange/GildiExchangeFundManager.sol:GildiExchangeFundManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)10214_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}