{
  "address": "0x189F7c24C1aEb8F68B2171C9255147C8D6Ec0A00",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataSourceAddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OracleAddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PairNotFound",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dataSource",
      "outputs": [
        {
          "internalType": "contract GildiPriceProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_pairId",
          "type": "bytes32"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGildiPriceResolver.PriceData",
          "name": "priceData",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_pairId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_age",
          "type": "uint256"
        }
      ],
      "name": "getPriceNoOlderThan",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGildiPriceResolver.PriceData",
          "name": "priceData",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract GildiPriceProvider",
          "name": "_gildiPriceProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x704b44920de326dbe5b0dd2363c6c0ba15dba3818c2042dc6b0ea2ef409807a6",
  "receipt": {
    "to": null,
    "from": "0xdda45D610A204EB5CB204e9d49920F788296C676",
    "contractAddress": "0x189F7c24C1aEb8F68B2171C9255147C8D6Ec0A00",
    "transactionIndex": 3,
    "gasUsed": "543894",
    "logsBloom": "0x
    "blockHash": "0x4bc5dff13b9a223e8e5f44ef3cab2e2ecf16b9da7dd036040fcfdb38a2a43c71",
    "transactionHash": "0x704b44920de326dbe5b0dd2363c6c0ba15dba3818c2042dc6b0ea2ef409807a6",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 33459897,
        "transactionHash": "0x704b44920de326dbe5b0dd2363c6c0ba15dba3818c2042dc6b0ea2ef409807a6",
        "address": "0x189F7c24C1aEb8F68B2171C9255147C8D6Ec0A00",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 8,
        "blockHash": "0x4bc5dff13b9a223e8e5f44ef3cab2e2ecf16b9da7dd036040fcfdb38a2a43c71"
      }
    ],
    "blockNumber": 33459897,
    "cumulativeGasUsed": "843579",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5fcb370cb2b9ee0340656465635a79fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataSourceAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PairNotFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataSource\",\"outputs\":[{\"internalType\":\"contract GildiPriceProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pairId\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IGildiPriceResolver.PriceData\",\"name\":\"priceData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pairId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"}],\"name\":\"getPriceNoOlderThan\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IGildiPriceResolver.PriceData\",\"name\":\"priceData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract GildiPriceProvider\",\"name\":\"_gildiPriceProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Gildi Company\",\"custom:security-contact\":\"security@gildi.io\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"DataSourceAddressZero()\":[{\"details\":\"Thrown when the data source address is zero\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OracleAddressZero()\":[{\"details\":\"Thrown when the oracle address is zero\"}],\"PairNotFound()\":[{\"details\":\"Thrown when a pair is not found\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getPrice(bytes32)\":{\"params\":{\"pairId\":\"The identifier of the asset pair\"},\"returns\":{\"priceData\":\"The price data for the asset pair\"}},\"getPriceNoOlderThan(bytes32,uint256)\":{\"params\":{\"age\":\"The maximum age of the price data in seconds\",\"pairId\":\"The identifier of the asset pair\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address)\":{\"params\":{\"_defaultAdmin\":\"The address of the default admin\",\"_gildiPriceProvider\":\"The address of the external data source\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"Gildi Price Resolver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"dataSource()\":{\"notice\":\"The external data source for price data (could be another contract or oracle)\"},\"getPrice(bytes32)\":{\"notice\":\"Retrieves the price data for a given pair ID\"},\"getPriceNoOlderThan(bytes32,uint256)\":{\"notice\":\"Retrieves the price data for a given pair ID, with a maximum age\"},\"initialize(address,address)\":{\"notice\":\"Initializes the contract with the address of the external data source\"}},\"notice\":\"Resolves prices using an external data source\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/price/resolvers/GildiPriceResolver.sol\":\"GildiPriceResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x85a70e2b1b65e9ba456add364d22b97eb9944083df1c39c0b4bd6a4b5aa386a4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\\n        return INITIALIZABLE_STORAGE;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        bytes32 slot = _initializableStorageSlot();\\n        assembly {\\n            $.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x6694b63ddb2c59bbe341c846171798350e8f72fa02189fcdeaca864e28b54e1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\\n\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xbff9f59c84e5337689161ce7641c0ef8e872d6a7536fbc1f5133f128887aba3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"contracts/interfaces/oracles/price/IGildiPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\n\\npragma solidity 0.8.24;\\n\\nimport './IGildiPriceResolver.sol';\\n\\n/// @title Gildi Price Oracle Interface\\n/// @notice Interface for the consumer-facing Gildi Price Oracle\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\ninterface IGildiPriceOracle is IGildiPriceResolver {\\n    /// @notice Represents an asset in the system\\n    struct Asset {\\n        /// @dev Unique identifier for the asset\\n        uint256 id;\\n        /// @dev The asset's symbol (e.g., BTC, ETH)\\n        string symbol;\\n        /// @dev The asset's full name\\n        string name;\\n    }\\n\\n    /// @notice Information about a trading pair\\n    struct PairInfo {\\n        /// @dev Unique identifier for the pair\\n        bytes32 pairId;\\n        /// @dev The base asset in the pair\\n        Asset baseAsset;\\n        /// @dev The quote asset in the pair\\n        Asset quoteAsset;\\n    }\\n\\n    /// @dev Thrown when an invalid pair ID is provided\\n    error InvalidPairId();\\n\\n    /// @notice Adds a pair using asset IDs\\n    /// @param _baseAssetId The ID of the base asset\\n    /// @param _quoteAssetId The ID of the quote asset\\n    /// @param _resolver The resolver contract for the asset pair\\n    function addPair(uint256 _baseAssetId, uint256 _quoteAssetId, IGildiPriceResolver _resolver) external;\\n\\n    /// @notice Retrieves the resolver for a specific asset pair\\n    /// @param _pairId The identifier of the asset pair\\n    function getResolver(bytes32 _pairId) external view returns (IGildiPriceResolver resolver);\\n\\n    /// @notice Fetches a list of all registered pairs in \\\"BASE/QUOTE\\\" string form\\n    /// @return An array of registered pairs\\n    function getPairs() external view returns (PairInfo[] memory);\\n\\n    /// @notice Adds a new asset\\n    /// @param _symbol The symbol of the asset\\n    /// @param _name The name of the asset\\n    /// @return The ID of the newly added asset\\n    function addAsset(string memory _symbol, string memory _name) external returns (uint256);\\n\\n    /// @notice Returns all registered assets\\n    /// @return An array of registered assets\\n    function getAssets() external view returns (Asset[] memory);\\n\\n    /// @notice Returns an asset by ID\\n    /// @param _assetId The ID of the asset\\n    /// @return The asset details\\n    function getAssetById(uint256 _assetId) external view returns (Asset memory);\\n\\n    /// @notice Returns pairs that use the specified asset ID as quote\\n    /// @param _quoteAssetId The ID of the quote asset\\n    /// @return An array of registered pairs\\n    function getPairsByQuoteAsset(uint256 _quoteAssetId) external view returns (string[] memory);\\n\\n    /// @notice Retrieves price data by numeric IDs\\n    /// @param _baseAssetId The ID of the base asset\\n    /// @param _quoteAssetId The ID of the quote asset\\n    /// @return The price data for the asset pair\\n    function getPriceById(uint256 _baseAssetId, uint256 _quoteAssetId) external view returns (PriceData memory);\\n\\n    /// @notice Checks if a pair with the given ID exists\\n    /// @param _pairId The identifier of the asset pair\\n    /// @return True if the pair exists\\n    function pairExistsById(bytes32 _pairId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6c406a4d51283a3acb73db7da552e9d22df34f34b7f8f3f772ba04b844419ddd\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/oracles/price/IGildiPriceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\n\\npragma solidity 0.8.24;\\n\\n/// @title Gildi Price Resolver Interface\\n/// @notice Interface that all price resolvers must implement\\n/// @custom:security-contact security@gildi.io\\n/// @author Patrick Fischer\\ninterface IGildiPriceResolver {\\n    /// @notice Price data struct\\n    struct PriceData {\\n        /// @notice The price of the base asset in terms of the quote asset\\n        uint256 price;\\n        /// @notice The number of decimals for the price\\n        uint8 decimals;\\n        /// @notice The UNIX timestamp when the price was last updated\\n        uint256 timestamp;\\n    }\\n\\n    /// @notice Retrieves the price data for a given pair ID\\n    /// @param pairId The identifier of the asset pair\\n    /// @return price The price data for the asset pair\\n    function getPrice(bytes32 pairId) external view returns (PriceData memory price);\\n\\n    /// @notice Retrieves the price data for a given pair ID, with a maximum age\\n    /// @param pairId The identifier of the asset pair\\n    /// @param age The maximum age of the price data in seconds\\n    function getPriceNoOlderThan(bytes32 pairId, uint256 age) external view returns (PriceData memory priceData);\\n}\\n\",\"keccak256\":\"0x82a4c66f173ce75a38cdc50d75c806f13fe99ed53bc3f1458fb50348dcf77b75\",\"license\":\"UNLICENSED\"},\"contracts/oracles/price/providers/GildiPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\n\\npragma solidity 0.8.24;\\n\\nimport '../../../interfaces/oracles/price/IGildiPriceResolver.sol';\\nimport '../../../interfaces/oracles/price/IGildiPriceOracle.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\n/// @title Gildi Price Provider\\n/// @notice Provides price data for asset pairs\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\ncontract GildiPriceProvider is Initializable, IGildiPriceResolver, AccessControlUpgradeable {\\n    bytes32 public constant PRICE_FEEDER_ROLE = keccak256('PRICE_FEEDER_ROLE');\\n    bytes32 public constant ADMIN_ROLE = keccak256('ADMIN_ROLE');\\n\\n    /// @dev Mapping from pairId => PriceData\\n    mapping(bytes32 => PriceData) private prices;\\n    /// @dev Array of all pair IDs with price data\\n    bytes32[] private pairIds;\\n    /// @dev Reference to the Gildi price oracle contract\\n    IGildiPriceOracle private oracle;\\n\\n    // Structs\\n    struct PriceUpdate {\\n        bytes32 pairId;\\n        uint256 price;\\n        uint8 decimals;\\n    }\\n\\n    // Custom Errors\\n    /// @dev Thrown when a non-price feeder attempts to set price data\\n    error NotPriceFeeder();\\n    /// @dev Thrown when an invalid price (zero) is provided\\n    error InvalidPrice();\\n    /// @dev Thrown when price data is not available for a requested pair\\n    error PriceDataNotAvailable();\\n    /// @dev Thrown when a pair is not found\\n    error PairNotFound();\\n    /// @dev Thrown when a price is older than the requested maximum age\\n    error StalePrice();\\n\\n    // Events\\n    /// @notice Emitted when a price is updated\\n    /// @param pairId The pair ID\\n    /// @param price The updated price\\n    /// @param decimals The number of decimals for the price\\n    /// @param timestamp The timestamp when the price was updated\\n    event PriceUpdated(bytes32 indexed pairId, uint256 price, uint8 decimals, uint256 timestamp);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the contract and sets up roles\\n    /// @param _defaultAdmin The address of the default admin\\n    /// @param _contractAdmin The address of the contract admin\\n    /// @param _oracle The address of the Gildi price oracle\\n    function initialize(address _defaultAdmin, address _contractAdmin, IGildiPriceOracle _oracle) public initializer {\\n        __AccessControl_init();\\n        _grantRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\\n        _grantRole(ADMIN_ROLE, _contractAdmin);\\n        oracle = _oracle;\\n    }\\n\\n    /// @notice Sets the price data for a given pair\\n    /// @param _priceUpdate The price data to set\\n    function setPriceData(PriceUpdate calldata _priceUpdate) external onlyRole(PRICE_FEEDER_ROLE) {\\n        _setPriceData(_priceUpdate);\\n    }\\n\\n    /// @notice Sets the price data for multiple pairs in a single transaction\\n    /// @param _priceUpdates Array of price updates\\n    function setPriceData(PriceUpdate[] calldata _priceUpdates) external onlyRole(PRICE_FEEDER_ROLE) {\\n        for (uint256 i = 0; i < _priceUpdates.length; i++) {\\n            _setPriceData(_priceUpdates[i]);\\n        }\\n    }\\n\\n    /// @notice Deletes the price data for a given pair\\n    /// @param _pairId The pair ID\\n    function deletePriceDataForPair(bytes32 _pairId) external onlyRole(ADMIN_ROLE) {\\n        if (prices[_pairId].timestamp == 0) {\\n            revert PairNotFound();\\n        }\\n\\n        delete prices[_pairId];\\n        for (uint256 i = 0; i < pairIds.length; i++) {\\n            if (pairIds[i] == _pairId) {\\n                pairIds[i] = pairIds[pairIds.length - 1];\\n                pairIds.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IGildiPriceResolver\\n    function getPrice(bytes32 _pairId) external view override returns (PriceData memory priceData) {\\n        if (prices[_pairId].timestamp == 0) {\\n            revert PriceDataNotAvailable();\\n        }\\n        return prices[_pairId];\\n    }\\n\\n    /// @inheritdoc IGildiPriceResolver\\n    function getPriceNoOlderThan(\\n        bytes32 _pairId,\\n        uint256 _age\\n    ) external view override returns (PriceData memory priceData) {\\n        if (prices[_pairId].timestamp == 0) {\\n            revert PriceDataNotAvailable();\\n        }\\n        if (block.timestamp - prices[_pairId].timestamp > _age) {\\n            revert StalePrice();\\n        }\\n        return prices[_pairId];\\n    }\\n\\n    /// @notice Retrieves all pairs with price data\\n    /// @return pairInfos An array of PairInfo structs\\n    function getPairs() external view returns (IGildiPriceOracle.PairInfo[] memory) {\\n        IGildiPriceOracle.PairInfo[] memory pairInfos = new IGildiPriceOracle.PairInfo[](pairIds.length);\\n        IGildiPriceOracle.PairInfo[] memory allOraclePairs = oracle.getPairs();\\n        for (uint256 i = 0; i < pairIds.length; i++) {\\n            for (uint256 j = 0; j < allOraclePairs.length; j++) {\\n                if (allOraclePairs[j].pairId == pairIds[i]) {\\n                    pairInfos[i] = allOraclePairs[j];\\n                    break;\\n                }\\n            }\\n\\n            if (pairInfos[i].pairId == 0) {\\n                pairInfos[i] = IGildiPriceOracle.PairInfo(\\n                    pairIds[i],\\n                    IGildiPriceOracle.Asset(0, 'UNKNOWN', 'UNKNOWN'),\\n                    IGildiPriceOracle.Asset(0, 'UNKNOWN', 'UNKNOWN')\\n                );\\n            }\\n        }\\n\\n        return pairInfos;\\n    }\\n\\n    /// @dev Internal function to set price data for a given pair\\n    /// @param _priceUpdate The price data to set\\n    function _setPriceData(PriceUpdate calldata _priceUpdate) internal {\\n        if (_priceUpdate.price == 0) {\\n            revert InvalidPrice();\\n        }\\n        if (!oracle.pairExistsById(_priceUpdate.pairId)) {\\n            revert IGildiPriceOracle.InvalidPairId();\\n        }\\n\\n        if (prices[_priceUpdate.pairId].timestamp == 0) {\\n            pairIds.push(_priceUpdate.pairId);\\n        }\\n\\n        prices[_priceUpdate.pairId] = PriceData(_priceUpdate.price, _priceUpdate.decimals, block.timestamp);\\n        emit PriceUpdated(_priceUpdate.pairId, _priceUpdate.price, _priceUpdate.decimals, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0xb1a3517a20cdff42ed8109e26fba8ef7b229ad458cc89afb7994fa9ce7bfbbed\",\"license\":\"UNLICENSED\"},\"contracts/oracles/price/resolvers/GildiPriceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\n\\npragma solidity 0.8.24;\\n\\nimport '../../../interfaces/oracles/price/IGildiPriceResolver.sol';\\nimport '../../../interfaces/oracles/price/IGildiPriceOracle.sol';\\nimport '../providers/GildiPriceProvider.sol';\\n\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\n/// @title Gildi Price Resolver\\n/// @notice Resolves prices using an external data source\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\ncontract GildiPriceResolver is IGildiPriceResolver, Initializable, AccessControlUpgradeable {\\n    /// @notice The external data source for price data (could be another contract or oracle)\\n    GildiPriceProvider public dataSource;\\n\\n    // Custom Errors\\n    /// @dev Thrown when the data source address is zero\\n    error DataSourceAddressZero();\\n    /// @dev Thrown when a pair is not found\\n    error PairNotFound();\\n    /// @dev Thrown when the oracle address is zero\\n    error OracleAddressZero();\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the contract with the address of the external data source\\n    /// @param _gildiPriceProvider The address of the external data source\\n    /// @param _defaultAdmin The address of the default admin\\n    function initialize(GildiPriceProvider _gildiPriceProvider, address _defaultAdmin) external initializer {\\n        __AccessControl_init();\\n\\n        if (address(_gildiPriceProvider) == address(0)) {\\n            revert DataSourceAddressZero();\\n        }\\n        dataSource = _gildiPriceProvider;\\n        _grantRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\\n    }\\n\\n    /// @inheritdoc IGildiPriceResolver\\n    function getPrice(bytes32 _pairId) external view override returns (PriceData memory priceData) {\\n        return dataSource.getPrice(_pairId);\\n    }\\n\\n    /// @inheritdoc IGildiPriceResolver\\n    function getPriceNoOlderThan(\\n        bytes32 _pairId,\\n        uint256 _age\\n    ) external view override returns (PriceData memory priceData) {\\n        return dataSource.getPriceNoOlderThan(_pairId, _age);\\n    }\\n}\\n\",\"keccak256\":\"0x24ffff41766c21101e262a453dabc51151e612e097213258cde7155c8d34d645\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608080604052346100b8577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081549060ff8260401c166100a957506001600160401b036002600160401b031982821601610064575b60405161086890816100be8239f35b6001600160401b031990911681179091556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1388080610055565b63f92ee8a960e01b8152600490fd5b600080fdfe608060408181526004908136101561001657600080fd5b600092833560e01c90816301ffc9a7146104f1575080631b076edc146104c9578063248a9ca3146104915780632f2ff15d1461046957806331d98b3f146103e957806336568abe146103a2578063485cc9551461022557806391d14854146101d1578063a217fddf146101b2578063a4ae35e0146100eb5763d547741f1461009d57600080fd5b346100e757806003193601126100e7576100e391356100de60016100bf610545565b9383875260008051602061081383398151915260205286200154610611565b61078f565b5080f35b8280fd5b50346100e757806003193601126100e7576101046105b4565b508254815163052571af60e51b81528335938101939093526024803590840152606090839060449082906001600160a01b03165afa9182156101a8576101739392610177575b50519182918291909160408060608301948051845260ff60208201511660208501520151910152565b0390f35b61019a91925060603d6060116101a1575b6101928183610592565b8101906105d3565b903861014a565b503d610188565b81513d85823e3d90fd5b8382346101cd57816003193601126101cd5751908152602090f35b5080fd5b5090346100e757816003193601126100e7578160209360ff926101f2610545565b9035825260008051602061081383398151915286528282206001600160a01b039091168252855220549151911615158152f35b5090346100e757816003193601126100e75780356001600160a01b038116919082900361039e57610254610545565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009283549260ff84871c16159367ffffffffffffffff811680159081610396575b600114908161038c575b159081610383575b506103745767ffffffffffffffff198116600117865584610355575b5060ff8554871c1615610347578115610339575085546001600160a01b0319161785556102ef90610662565b506102f8578280f35b805468ff00000000000000001916905551600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a138808280f35b8551631a2da44960e31b8152fd5b8551631afcd79f60e31b8152fd5b68ffffffffffffffffff191668010000000000000001178555386102c3565b50855163f92ee8a960e01b8152fd5b905015386102a7565b303b15915061029f565b869150610295565b8380fd5b508290346101cd57806003193601126101cd576103bd610545565b90336001600160a01b038316036103da57506100e391923561078f565b5163334bd91960e11b81528390fd5b50346100e75760203660031901126100e7576104036105b4565b50825481516331d98b3f60e01b8152833593810193909352606090839060249082906001600160a01b03165afa9182156101a85761017393926101775750519182918291909160408060608301948051845260ff60208201511660208501520151910152565b50346100e757806003193601126100e7576100e3913561048c60016100bf610545565b610702565b5090346100e75760203660031901126100e7578160209360019235815260008051602061081383398151915285522001549051908152f35b8382346101cd57816003193601126101cd57905490516001600160a01b039091168152602090f35b849084346100e75760203660031901126100e7573563ffffffff60e01b81168091036100e75760209250637965db0b60e01b8114908115610534575b5015158152f35b6301ffc9a760e01b1490508361052d565b602435906001600160a01b038216820361055b57565b600080fd5b6060810190811067ffffffffffffffff82111761057c57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761057c57604052565b604051906105c182610560565b60006040838281528260208201520152565b9081606091031261055b57604051906105eb82610560565b8051825260208101519060ff8216820361055b5760409160208401520151604082015290565b8060005260008051602061081383398151915260205260406000203360005260205260ff60406000205416156106445750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b6001600160a01b031660008181527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d60205260408120549091906000805160206108138339815191529060ff166106fd578280526020526040822081835260205260408220600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b505090565b9060009180835260008051602061081383398151915280602052604084209260018060a01b03169283855260205260ff60408520541615600014610789578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b50505090565b9060009180835260008051602061081383398151915280602052604084209260018060a01b03169283855260205260ff60408520541660001461078957818452602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a460019056fe02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800a2646970667358221220dd35cc808723266cbbc2ddceb6ccd6f801a4fc5cad21b953c2d16c8a01e517c464736f6c63430008180033",
  "deployedBytecode": "0x608060408181526004908136101561001657600080fd5b600092833560e01c90816301ffc9a7146104f1575080631b076edc146104c9578063248a9ca3146104915780632f2ff15d1461046957806331d98b3f146103e957806336568abe146103a2578063485cc9551461022557806391d14854146101d1578063a217fddf146101b2578063a4ae35e0146100eb5763d547741f1461009d57600080fd5b346100e757806003193601126100e7576100e391356100de60016100bf610545565b9383875260008051602061081383398151915260205286200154610611565b61078f565b5080f35b8280fd5b50346100e757806003193601126100e7576101046105b4565b508254815163052571af60e51b81528335938101939093526024803590840152606090839060449082906001600160a01b03165afa9182156101a8576101739392610177575b50519182918291909160408060608301948051845260ff60208201511660208501520151910152565b0390f35b61019a91925060603d6060116101a1575b6101928183610592565b8101906105d3565b903861014a565b503d610188565b81513d85823e3d90fd5b8382346101cd57816003193601126101cd5751908152602090f35b5080fd5b5090346100e757816003193601126100e7578160209360ff926101f2610545565b9035825260008051602061081383398151915286528282206001600160a01b039091168252855220549151911615158152f35b5090346100e757816003193601126100e75780356001600160a01b038116919082900361039e57610254610545565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009283549260ff84871c16159367ffffffffffffffff811680159081610396575b600114908161038c575b159081610383575b506103745767ffffffffffffffff198116600117865584610355575b5060ff8554871c1615610347578115610339575085546001600160a01b0319161785556102ef90610662565b506102f8578280f35b805468ff00000000000000001916905551600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a138808280f35b8551631a2da44960e31b8152fd5b8551631afcd79f60e31b8152fd5b68ffffffffffffffffff191668010000000000000001178555386102c3565b50855163f92ee8a960e01b8152fd5b905015386102a7565b303b15915061029f565b869150610295565b8380fd5b508290346101cd57806003193601126101cd576103bd610545565b90336001600160a01b038316036103da57506100e391923561078f565b5163334bd91960e11b81528390fd5b50346100e75760203660031901126100e7576104036105b4565b50825481516331d98b3f60e01b8152833593810193909352606090839060249082906001600160a01b03165afa9182156101a85761017393926101775750519182918291909160408060608301948051845260ff60208201511660208501520151910152565b50346100e757806003193601126100e7576100e3913561048c60016100bf610545565b610702565b5090346100e75760203660031901126100e7578160209360019235815260008051602061081383398151915285522001549051908152f35b8382346101cd57816003193601126101cd57905490516001600160a01b039091168152602090f35b849084346100e75760203660031901126100e7573563ffffffff60e01b81168091036100e75760209250637965db0b60e01b8114908115610534575b5015158152f35b6301ffc9a760e01b1490508361052d565b602435906001600160a01b038216820361055b57565b600080fd5b6060810190811067ffffffffffffffff82111761057c57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761057c57604052565b604051906105c182610560565b60006040838281528260208201520152565b9081606091031261055b57604051906105eb82610560565b8051825260208101519060ff8216820361055b5760409160208401520151604082015290565b8060005260008051602061081383398151915260205260406000203360005260205260ff60406000205416156106445750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b6001600160a01b031660008181527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d60205260408120549091906000805160206108138339815191529060ff166106fd578280526020526040822081835260205260408220600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b505090565b9060009180835260008051602061081383398151915280602052604084209260018060a01b03169283855260205260ff60408520541615600014610789578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b50505090565b9060009180835260008051602061081383398151915280602052604084209260018060a01b03169283855260205260ff60408520541660001461078957818452602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a460019056fe02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800a2646970667358221220dd35cc808723266cbbc2ddceb6ccd6f801a4fc5cad21b953c2d16c8a01e517c464736f6c63430008180033",
  "devdoc": {
    "author": "Gildi Company",
    "custom:security-contact": "security@gildi.io",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "DataSourceAddressZero()": [
        {
          "details": "Thrown when the data source address is zero"
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OracleAddressZero()": [
        {
          "details": "Thrown when the oracle address is zero"
        }
      ],
      "PairNotFound()": [
        {
          "details": "Thrown when a pair is not found"
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getPrice(bytes32)": {
        "params": {
          "pairId": "The identifier of the asset pair"
        },
        "returns": {
          "priceData": "The price data for the asset pair"
        }
      },
      "getPriceNoOlderThan(bytes32,uint256)": {
        "params": {
          "age": "The maximum age of the price data in seconds",
          "pairId": "The identifier of the asset pair"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address)": {
        "params": {
          "_defaultAdmin": "The address of the default admin",
          "_gildiPriceProvider": "The address of the external data source"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "title": "Gildi Price Resolver",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "dataSource()": {
        "notice": "The external data source for price data (could be another contract or oracle)"
      },
      "getPrice(bytes32)": {
        "notice": "Retrieves the price data for a given pair ID"
      },
      "getPriceNoOlderThan(bytes32,uint256)": {
        "notice": "Retrieves the price data for a given pair ID, with a maximum age"
      },
      "initialize(address,address)": {
        "notice": "Initializes the contract with the address of the external data source"
      }
    },
    "notice": "Resolves prices using an external data source",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 51777,
        "contract": "contracts/oracles/price/resolvers/GildiPriceResolver.sol:GildiPriceResolver",
        "label": "dataSource",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(GildiPriceProvider)51759"
      }
    ],
    "types": {
      "t_contract(GildiPriceProvider)51759": {
        "encoding": "inplace",
        "label": "contract GildiPriceProvider",
        "numberOfBytes": "20"
      }
    }
  }
}