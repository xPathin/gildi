{
  "address": "0x0e29f7b663c843c4C8B07E1BAd8360C34F38dEaa",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectMsgValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IndexOutOfRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientReceiveAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NativeNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoAdapters",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoValidRoute",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughSourceTokensForBestRoute",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "PurchaseTokenNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SlippageExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SwapOutFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IGildiExchangeSwapAdapter",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "AdapterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IGildiExchangeSwapAdapter",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "AdapterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "AllowedSwapInTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketplaceToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sourceAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "swapped",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "targetToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        }
      ],
      "name": "MarketplaceLeftoverReturned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allow",
          "type": "bool"
        }
      ],
      "name": "PurchaseAllowNativeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "SourceTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "targetToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sourceAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "marketplaceAdapter",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "route",
              "type": "address[]"
            },
            {
              "internalType": "uint128[]",
              "name": "fees",
              "type": "uint128[]"
            },
            {
              "internalType": "uint128[]",
              "name": "amounts",
              "type": "uint128[]"
            },
            {
              "internalType": "uint128[]",
              "name": "virtualAmountsWithoutSlippage",
              "type": "uint128[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IGildiExchangeSwapAdapter.QuoteRoute",
          "name": "route",
          "type": "tuple"
        }
      ],
      "name": "SwapExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "targetToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expectedOutput",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "selectedAdapter",
          "type": "address"
        }
      ],
      "name": "SwapRouteSelected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "wnative",
          "type": "address"
        }
      ],
      "name": "WrappedNativeSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IGildiExchangeSwapAdapter",
          "name": "_adapter",
          "type": "address"
        }
      ],
      "name": "addAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sourceToken",
          "type": "address"
        }
      ],
      "name": "estimatePurchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sourceNeeded",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "releaseCurrency",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "marketplaceAdapter",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "route",
              "type": "address[]"
            },
            {
              "internalType": "uint128[]",
              "name": "fees",
              "type": "uint128[]"
            },
            {
              "internalType": "uint128[]",
              "name": "amounts",
              "type": "uint128[]"
            },
            {
              "internalType": "uint128[]",
              "name": "virtualAmountsWithoutSlippage",
              "type": "uint128[]"
            }
          ],
          "internalType": "struct IGildiExchangeSwapAdapter.QuoteRoute",
          "name": "quoteRoute",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "totalPriceUsd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdapters",
      "outputs": [
        {
          "internalType": "contract IGildiExchangeSwapAdapter[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowedPurchaseTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGildiExchange",
      "outputs": [
        {
          "internalType": "contract IGildiExchange",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        }
      ],
      "name": "getMarketplaceToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPurchaseAllowNative",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWrappedNative",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gildiExchange",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wNativeAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_initialDefaultAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_initialContractAdmin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isPurchaseTokenAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_sourceCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_targetToken",
          "type": "address"
        }
      ],
      "name": "previewSwapOut",
      "outputs": [
        {
          "internalType": "bool",
          "name": "hasValidRoute",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "expectedTargetAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "marketplaceAdapter",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "route",
              "type": "address[]"
            },
            {
              "internalType": "uint128[]",
              "name": "fees",
              "type": "uint128[]"
            },
            {
              "internalType": "uint128[]",
              "name": "amounts",
              "type": "uint128[]"
            },
            {
              "internalType": "uint128[]",
              "name": "virtualAmountsWithoutSlippage",
              "type": "uint128[]"
            }
          ],
          "internalType": "struct IGildiExchangeSwapAdapter.QuoteRoute",
          "name": "bestRoute",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_sourceToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sourceMaxAmount",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountUsdSpent",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "removeAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IGildiExchangeSwapAdapter",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "removeAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_allowed",
          "type": "bool"
        }
      ],
      "name": "setAllowedPurchaseToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_allow",
          "type": "bool"
        }
      ],
      "name": "setPurchaseAllowNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wnative",
          "type": "address"
        }
      ],
      "name": "setWrappedNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_sourceCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_targetToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minTargetAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "swapOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "targetReceived",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x783a49ebc4076d644612694da488b6a3b7bb7e25f8de80d8005fc19ac4f0595c",
  "receipt": {
    "to": null,
    "from": "0xdda45D610A204EB5CB204e9d49920F788296C676",
    "contractAddress": "0x0e29f7b663c843c4C8B07E1BAd8360C34F38dEaa",
    "transactionIndex": 6,
    "gasUsed": "2722072",
    "logsBloom": "0x
    "blockHash": "0xd50eabeabe89cf449dd213d97c1275f530375a187226ca68cd0cfa371097b78a",
    "transactionHash": "0x783a49ebc4076d644612694da488b6a3b7bb7e25f8de80d8005fc19ac4f0595c",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 33460061,
        "transactionHash": "0x783a49ebc4076d644612694da488b6a3b7bb7e25f8de80d8005fc19ac4f0595c",
        "address": "0x0e29f7b663c843c4C8B07E1BAd8360C34F38dEaa",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0xd50eabeabe89cf449dd213d97c1275f530375a187226ca68cd0cfa371097b78a"
      }
    ],
    "blockNumber": 33460061,
    "cumulativeGasUsed": "2991020",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "594efa0505e6449b9b54376cc6a6f699",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectMsgValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientReceiveAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAdapters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoValidRoute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughSourceTokensForBestRoute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PurchaseTokenNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlippageExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapOutFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IGildiExchangeSwapAdapter\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"AdapterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IGildiExchangeSwapAdapter\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"AdapterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"AllowedSwapInTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketplaceToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapped\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"}],\"name\":\"MarketplaceLeftoverReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"PurchaseAllowNativeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"SourceTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"marketplaceAdapter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"fees\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"amounts\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"virtualAmountsWithoutSlippage\",\"type\":\"uint128[]\"}],\"indexed\":false,\"internalType\":\"struct IGildiExchangeSwapAdapter.QuoteRoute\",\"name\":\"route\",\"type\":\"tuple\"}],\"name\":\"SwapExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expectedOutput\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"selectedAdapter\",\"type\":\"address\"}],\"name\":\"SwapRouteSelected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wnative\",\"type\":\"address\"}],\"name\":\"WrappedNativeSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGildiExchangeSwapAdapter\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"addAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sourceToken\",\"type\":\"address\"}],\"name\":\"estimatePurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sourceNeeded\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"releaseCurrency\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"marketplaceAdapter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"fees\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"amounts\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"virtualAmountsWithoutSlippage\",\"type\":\"uint128[]\"}],\"internalType\":\"struct IGildiExchangeSwapAdapter.QuoteRoute\",\"name\":\"quoteRoute\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"totalPriceUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdapters\",\"outputs\":[{\"internalType\":\"contract IGildiExchangeSwapAdapter[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedPurchaseTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGildiExchange\",\"outputs\":[{\"internalType\":\"contract IGildiExchange\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"}],\"name\":\"getMarketplaceToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPurchaseAllowNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWrappedNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gildiExchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wNativeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialDefaultAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialContractAdmin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isPurchaseTokenAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sourceCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_targetToken\",\"type\":\"address\"}],\"name\":\"previewSwapOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasValidRoute\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"expectedTargetAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"marketplaceAdapter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"fees\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"amounts\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"virtualAmountsWithoutSlippage\",\"type\":\"uint128[]\"}],\"internalType\":\"struct IGildiExchangeSwapAdapter.QuoteRoute\",\"name\":\"bestRoute\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sourceMaxAmount\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUsdSpent\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGildiExchangeSwapAdapter\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"removeAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowedPurchaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"setPurchaseAllowNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wnative\",\"type\":\"address\"}],\"name\":\"setWrappedNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sourceCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTargetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"swapOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"targetReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Gildi Company\",\"custom:security-contact\":\"security@gildi.io\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"IncorrectMsgValue()\":[{\"details\":\"Emitted when the msg.value does not match the expected amount.\"}],\"IndexOutOfRange()\":[{\"details\":\"Emitted when an index is out of bounds.\"}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"InsufficientLiquidity()\":[{\"details\":\"Emitted when there is insufficient liquidity for a swap.\"}],\"InsufficientReceiveAmount()\":[{\"details\":\"Emitted when the received amount is less than the required minimum.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NativeNotAllowed()\":[{\"details\":\"Emitted when native currency is not allowed for purchase.\"}],\"NoAdapters()\":[{\"details\":\"Emitted when there are no swap adapters configured.\"}],\"NoValidRoute()\":[{\"details\":\"Emitted when no valid route is found for a swap.\"}],\"NotEnoughSourceTokensForBestRoute()\":[{\"details\":\"Emitted when there are not enough source tokens for the best route.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"PurchaseTokenNotAllowed(address)\":[{\"details\":\"Emitted when a token is not allowed for purchase.\",\"params\":{\"token\":\"The token that is not allowed.\"}}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}],\"SlippageExceeded()\":[{\"details\":\"Emitted when slippage exceeds the limit.\"}],\"SwapOutFailed()\":[{\"details\":\"Emitted when a swap operation fails.\"}]},\"events\":{\"AdapterAdded(address)\":{\"params\":{\"adapter\":\"The adapter that was added.\"}},\"AdapterRemoved(address)\":{\"params\":{\"adapter\":\"The adapter that was removed.\"}},\"AllowedSwapInTokenSet(address,bool)\":{\"params\":{\"allowed\":\"Whether the token is allowed for swap-in.\",\"token\":\"The token address.\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"PurchaseAllowNativeSet(bool)\":{\"params\":{\"allow\":\"Whether native payments are allowed.\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"SourceTokenSet(address,bool)\":{\"params\":{\"allowed\":\"Whether the token is allowed as a source.\",\"token\":\"The token address.\"}},\"SwapExecuted(address,address,uint256,uint256,address,address,(address,address[],uint128[],uint128[],uint128[]))\":{\"params\":{\"adapter\":\"The adapter used for the swap.\",\"recipient\":\"The address that received the target tokens.\",\"route\":\"The detailed routing information used for the swap.\",\"sourceAmount\":\"The amount of source tokens swapped.\",\"sourceToken\":\"The address of the source token.\",\"targetAmount\":\"The amount of target tokens received.\",\"targetToken\":\"The address of the target token.\"}},\"SwapRouteSelected(address,address,uint256,uint256,address)\":{\"params\":{\"amount\":\"The amount to be swapped.\",\"expectedOutput\":\"The expected output amount.\",\"selectedAdapter\":\"The address of the selected adapter for the route.\",\"sourceToken\":\"The starting token for the swap.\",\"targetToken\":\"The desired output token.\"}},\"WrappedNativeSet(address)\":{\"params\":{\"wnative\":\"The wrapped native token address.\"}}},\"kind\":\"dev\",\"methods\":{\"addAdapter(address)\":{\"params\":{\"_adapter\":\"The adapter to add.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"estimatePurchase(uint256,uint256,address,address)\":{\"params\":{\"_amount\":\"The amount of the release.\",\"_buyer\":\"The buyer of the release.\",\"_releaseId\":\"The release ID.\",\"_sourceToken\":\"The token to swap from.\"},\"returns\":{\"quoteRoute\":\"The route of the quote.\",\"releaseCurrency\":\"The active martketplace currency of the release.\",\"sourceNeeded\":\"The amount of `_sourceToken` required.\",\"totalPriceUsd\":\"The total price in USD (using exchange's priceAskDecimals).\"}},\"getGildiExchange()\":{\"returns\":{\"_0\":\"The GildiExchange contract.\"}},\"getMarketplaceToken(uint256)\":{\"params\":{\"_releaseId\":\"Optional release ID to get the specific token for, or 0 for default\"},\"returns\":{\"_0\":\"The marketplace token address to use for the specified release\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address,address)\":{\"params\":{\"_gildiExchange\":\"The address of the Gildi Exchange.\",\"_initialContractAdmin\":\"The address of the initial contract admin.\",\"_initialDefaultAdmin\":\"The address of the initial default admin.\",\"_wNativeAddress\":\"The address of the wrapped native token.\"}},\"previewSwapOut(uint256,address,address)\":{\"params\":{\"_amount\":\"The amount of source tokens to swap.\",\"_sourceCurrency\":\"The address of the source token.\",\"_targetToken\":\"The token to swap to.\"},\"returns\":{\"bestRoute\":\"The best route for the swap.\",\"expectedTargetAmount\":\"The expected amount of target tokens to receive.\",\"hasValidRoute\":\"Whether there's a valid route for the swap.\"}},\"purchase(uint256,uint256,address,uint256)\":{\"params\":{\"_amount\":\"The amount to purchase.\",\"_releaseId\":\"The release ID.\",\"_sourceMaxAmount\":\"Maximum amount of _sourceToken to spend.\",\"_sourceToken\":\"The token used for payment (address(0) means native).\"},\"returns\":{\"amountUsdSpent\":\"The amount spent in USD\"}},\"removeAdapter(address)\":{\"params\":{\"adapter\":\"The adapter instance to remove.\"}},\"removeAdapter(uint256)\":{\"params\":{\"index\":\"The index of the adapter to remove.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setAllowedPurchaseToken(address,bool)\":{\"params\":{\"_allowed\":\"True to allow the token.\",\"_token\":\"The address of the token.\"}},\"setPurchaseAllowNative(bool)\":{\"params\":{\"_allow\":\"True if native payments are enabled.\"}},\"setWrappedNative(address)\":{\"params\":{\"_wnative\":\"The address of the wrapped native token.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"swapOut(uint256,address,address,uint256,address)\":{\"params\":{\"_amount\":\"The amount of source tokens to swap.\",\"_minTargetAmount\":\"The minimum amount of target tokens to receive (slippage protection).\",\"_recipient\":\"The recipient of the target tokens.\",\"_sourceCurrency\":\"The address of the source token.\",\"_targetToken\":\"The token to swap to.\"},\"returns\":{\"targetReceived\":\"The amount of target tokens received.\"}}},\"title\":\"GildiExchangePaymentAggregator\",\"version\":1},\"userdoc\":{\"events\":{\"AdapterAdded(address)\":{\"notice\":\"Emitted when a new swap adapter is added.\"},\"AdapterRemoved(address)\":{\"notice\":\"Emitted when a swap adapter is removed.\"},\"AllowedSwapInTokenSet(address,bool)\":{\"notice\":\"Emitted when a token's swap-in status is changed.\"},\"MarketplaceLeftoverReturned(address,address,uint256,bool,address,uint256)\":{\"notice\":\"Emitted when a marketplace token leftover is returned.\"},\"PurchaseAllowNativeSet(bool)\":{\"notice\":\"Emitted when the native payment allowance is changed.\"},\"SourceTokenSet(address,bool)\":{\"notice\":\"Emitted when a token's source status is changed.\"},\"SwapExecuted(address,address,uint256,uint256,address,address,(address,address[],uint128[],uint128[],uint128[]))\":{\"notice\":\"Emitted when a swap operation is executed.\"},\"SwapRouteSelected(address,address,uint256,uint256,address)\":{\"notice\":\"Emitted when a swap route is selected for a transaction.\"},\"WrappedNativeSet(address)\":{\"notice\":\"Emitted when the wrapped native token address is set.\"}},\"kind\":\"user\",\"methods\":{\"addAdapter(address)\":{\"notice\":\"Adds a new aggregator/DEX adapter.\"},\"estimatePurchase(uint256,uint256,address,address)\":{\"notice\":\"Estimates the amount of `_sourceToken` required to get `_amount` of `_releaseId` for `_buyer` of the marketplace token and returns the current best route.\"},\"getGildiExchange()\":{\"notice\":\"Returns the GildiExchange contract instance.\"},\"getMarketplaceToken(uint256)\":{\"notice\":\"Returns the active marketplace token address for a given release or the default marketplace token.\"},\"initialize(address,address,address,address)\":{\"notice\":\"Initializes the aggregator with the exchange, marketplace token, and wrapped native token.\"},\"previewSwapOut(uint256,address,address)\":{\"notice\":\"Previews a swap out operation to check if there's a valid route and estimate the output amount.\"},\"purchase(uint256,uint256,address,uint256)\":{\"notice\":\"Executes the purchase payment flow.\"},\"removeAdapter(address)\":{\"notice\":\"Removes an adapter by instance.\"},\"removeAdapter(uint256)\":{\"notice\":\"Removes an adapter by its index.\"},\"setAllowedPurchaseToken(address,bool)\":{\"notice\":\"Sets the allowed purchase status for a given source token.\"},\"setPurchaseAllowNative(bool)\":{\"notice\":\"Sets whether native payments are allowed for purchases.\"},\"setWrappedNative(address)\":{\"notice\":\"Sets the wrapped native token address.\"},\"swapOut(uint256,address,address,uint256,address)\":{\"notice\":\"Executes a swap out operation to convert source tokens to a target token.\"}},\"notice\":\"A generic payment adapter that aggregates multiple DEX/aggregator adapters.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/marketplace/exchange/GildiExchangePaymentAggregator.sol\":\"GildiExchangePaymentAggregator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x85a70e2b1b65e9ba456add364d22b97eb9944083df1c39c0b4bd6a4b5aa386a4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\\n        return INITIALIZABLE_STORAGE;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        bytes32 slot = _initializableStorageSlot();\\n        assembly {\\n            $.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x6694b63ddb2c59bbe341c846171798350e8f72fa02189fcdeaca864e28b54e1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\\n\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xbff9f59c84e5337689161ce7641c0ef8e872d6a7536fbc1f5133f128887aba3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[ERC].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {IERC1155Receiver-onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {IERC1155Receiver-onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf189f9b417fe1931e1ab706838aff1128528694a9fcdb5ff7665197f2ca57d09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                revert(add(returndata, 0x20), mload(returndata))\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6d0ae6e206645341fd122d278c2cb643dea260c190531f2f3f6a0426e77b00c0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"contracts/interfaces/external/IWNative.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity >=0.5.0;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/// @title Wrapped Native Token Interface\\n/// @notice Interface for wrapped native tokens (e.g., WETH, WPOL) that can wrap/unwrap native currency\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\ninterface IWNative is IERC20 {\\n    /// @notice Deposit native currency and receive wrapped tokens\\n    /// @dev Mints wrapped tokens equivalent to the native currency sent\\n    function deposit() external payable;\\n    \\n    /// @notice Withdraw wrapped tokens and receive native currency\\n    /// @dev Burns wrapped tokens and sends equivalent native currency to caller\\n    /// @param amount The amount of wrapped tokens to withdraw\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8f5fc7cc2b3dba949325f1e236e5b5a2f2298264bf5cd3ae47750f84622e23a2\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/manager/IGildiManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\n\\n/// @title IGildiManager\\n/// @notice Interface for the Gildi Manager.\\n/// @custom:security-contact security@gildi.io\\n/// @author Patrick Fischer (Pathin) > https://pathin.me\\ninterface IGildiManager is IERC165 {\\n    /// @notice A user share.\\n    struct UserShare {\\n        /// @notice The user address.\\n        address user;\\n        /// @notice The number shares owned by the user.\\n        uint256 shares;\\n    }\\n\\n    /// @notice A report of the shares owned by a user in a specific time period.\\n    struct SharesReport {\\n        /// @notice The token ID.\\n        uint256 tokenId;\\n        /// @notice The start timestamp of the report.\\n        uint256 start;\\n        /// @notice The end timestamp of the report.\\n        uint256 end;\\n        /// @notice The total number of shares owned by all users.\\n        uint256 totalNumberOfShares;\\n        /// @notice The shares owned by each user.\\n        UserShare[] userShares;\\n        /// @notice Info for Pagination, if there are more results.\\n        bool hasMore;\\n        /// @notice Next cursor for Pagination.\\n        uint256 nextCursor;\\n    }\\n\\n    struct TokenBalance {\\n        uint256 tokenId;\\n        uint256 amount;\\n        uint256 lockedAmount;\\n    }\\n\\n    /// @notice A GILDI RWA release.\\n    struct RWARelease {\\n        /// @notice The token ID of the release (equal to release id).\\n        uint256 tokenId;\\n        /// @notice If the release is locked.\\n        bool locked;\\n        /// @notice When the release was unlocked.\\n        uint256 unlockedAt;\\n        /// @notice If the release is in the initial sale.\\n        bool inInitialSale;\\n        /// @notice The total number of shares.\\n        uint256 totalShares;\\n        /// @notice The number of unassigned shares.\\n        uint256 unassignedShares;\\n        /// @notice The number of burned shares.\\n        uint256 burnedShares;\\n        /// @notice The release is deleting.\\n        bool deleting;\\n        /// @notice The number of shares deleted.\\n        uint256 deletedShares;\\n        /// @notice The timestamp of the creation.\\n        uint256 createdAt;\\n    }\\n\\n    /// @notice Fetches all the release IDs.\\n    /// @return An array of all the release IDs.\\n    function getAllReleaseIds() external view returns (uint256[] memory);\\n\\n    /// @notice Create a new release.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    /// @param _amount The amount of the token.\\n    /// @param _ownershipTrackingTimePeriod The time period in which we aggregate the shares owned by a user.\\n    function createNewRelease(uint256 _releaseId, uint256 _amount, uint256 _ownershipTrackingTimePeriod) external;\\n\\n    /// @notice Assigns the user shares to a royalty rights release in a batch operation.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    /// @param _sharesBatch The shares to assign.\\n    /// @dev The shares are assigned in a batch to prevent gas limit issues.\\n    function assignShares(uint256 _releaseId, UserShare[] calldata _sharesBatch) external;\\n\\n    /// @notice Starts the initial sale of a release.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    function startInitialSale(uint256 _releaseId) external;\\n\\n    /// @notice Cancels the initial sale of a release.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    function cancelInitialSale(uint256 _releaseId) external;\\n\\n    /// @notice Ends the initial sale of a release.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    function endInitialSale(uint256 _releaseId) external;\\n\\n    /// @notice Check if a release exists.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    /// @return True if the release exists, false otherwise.\\n    function releaseExists(uint256 _releaseId) external view returns (bool);\\n\\n    /// @notice Deletes a release in batches.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    /// @param _batchSizeOwners The number of owners to delete in a batch.\\n    /// @dev Batch deletion is used to prevent gas limit issues.\\n    function batchDeleteRelease(uint256 _releaseId, uint256 _batchSizeOwners) external;\\n\\n    /// @notice Unlocks a release.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    function unlockRelease(uint256 _releaseId) external;\\n\\n    /// @notice Deposits royalty rights tokens into the manager.\\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\\n    /// @param _account The account to deposit the tokens to.\\n    /// @param _amount The amount of tokens to deposit.\\n    function deposit(uint256 _tokenId, address _account, uint256 _amount) external;\\n\\n    /// @notice Withdraws royalty rights tokens from the manager.\\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\\n    /// @param _account The account to withdraw the tokens from.\\n    /// @param _amount The amount of tokens to withdraw.\\n    function withdraw(uint256 _tokenId, address _account, uint256 _amount) external;\\n\\n    /// @notice Locks tokens for a user.\\n    /// @param _account The account to lock the tokens for.\\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\\n    /// @param _amountToLock The amount of tokens to lock.\\n    function lockTokens(address _account, uint256 _tokenId, uint256 _amountToLock) external;\\n\\n    /// @notice Unlocks tokens for a user.\\n    /// @param _account The account to unlock the tokens for.\\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\\n    /// @param _amountToUnlock The amount of tokens to unlock.\\n    function unlockTokens(address _account, uint256 _tokenId, uint256 _amountToUnlock) external;\\n\\n    /// @notice Transfers ownership of a release's shares to another user.\\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\\n    /// @param _from The address of the current owner.\\n    /// @param _to The address of the new owner.\\n    /// @param _amount The amount of shares to transfer.\\n    function transferOwnership(uint256 _tokenId, address _from, address _to, uint256 _amount) external;\\n\\n    /// @notice Transfers ownership of a release's shares to another user during the initial sale.\\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\\n    /// @param _from The address of the current owner.\\n    /// @param _to The address of the new owner.\\n    /// @param _amount The amount of shares to transfer.\\n    function transferOwnershipInitialSale(uint256 _tokenId, address _from, address _to, uint256 _amount) external;\\n\\n    /// @notice Gets a release by its ID.\\n    /// @param _releaseId The release ID.\\n    /// @return The release.\\n    function getReleaseById(uint256 _releaseId) external view returns (RWARelease memory);\\n\\n    /// @notice Checks if the release is locked.\\n    /// @param _releaseId The release ID.\\n    /// @return True if the release is locked, false otherwise.\\n    function isLocked(uint256 _releaseId) external view returns (bool);\\n\\n    /// @notice Returns if the release is in the initial sale.\\n    /// @param _releaseId The release ID.\\n    /// @return True if the release is in the initial sale, false otherwise.\\n    function isInInitialSale(uint256 _releaseId) external view returns (bool);\\n\\n    /// @notice Fetches the available balance of a user for a specific token.\\n    /// @param _tokenId The token ID.\\n    /// @param _account The account to fetch the balance for.\\n    /// @return The available balance of the user for the token.\\n    function getAvailableBalance(uint256 _tokenId, address _account) external view returns (uint256);\\n\\n    /// @notice Fetch the shares of a release owned by a user in a specific time period paginated.\\n    /// @param _releaseId The release ID.\\n    /// @param _start The start timestamp.\\n    /// @param _end The end timestamp (exclusive).\\n    /// @param _cursor The cursor for pagination.\\n    /// @param _limit The limit for pagination.\\n    function fetchSharesInPeriod(\\n        uint256 _releaseId,\\n        uint256 _start,\\n        uint256 _end,\\n        uint256 _cursor,\\n        uint256 _limit\\n    ) external view returns (SharesReport memory);\\n\\n    /// @notice Fetches the balance of a user for all tokens.\\n    /// @param _account The account to fetch the balance for.\\n    function balanceOf(address _account) external view returns (TokenBalance[] memory);\\n\\n    /// @notice Fetches the balance of a user for a specific token.\\n    /// @param _tokenId The token ID.\\n    /// @param _account The account to fetch the balance for.\\n    function balanceOf(uint256 _tokenId, address _account) external view returns (TokenBalance memory);\\n\\n    /// @notice Checks if the release is fully assigned.\\n    function isFullyAssigned(uint256 _releaseId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8d005682185f1eb885e73880eb7259a70aaba04c43c7c447ba872b8171101f51\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/marketplace/exchange/IGildiExchange.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\nimport {IAccessControl} from '@openzeppelin/contracts/access/IAccessControl.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IGildiManager} from '../../manager/IGildiManager.sol';\\nimport {IGildiPriceOracle} from '../../oracles/price/IGildiPriceOracle.sol';\\nimport {IGildiExchangeOrderBook} from './IGildiExchangeOrderBook.sol';\\nimport {IGildiExchangeFundManager} from './IGildiExchangeFundManager.sol';\\nimport {IGildiExchangePaymentProcessor} from './IGildiExchangePaymentProcessor.sol';\\nimport {IGildiExchangePaymentAggregator} from './IGildiExchangePaymentAggregator.sol';\\n\\n/// @title IGildiExchange\\n/// @notice Interface for the Gildi Exchange.\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\ninterface IGildiExchange is IAccessControl {\\n    /// @notice Represents a fee/burn receiver with an address and a basis points value and the currency to receive in.\\n    struct Receiver {\\n        /// @dev The address that receives the fee\\n        address receiverAddress;\\n        /// @dev The currency in which the fee is paid\\n        address payoutCurrency;\\n        /// @dev The value in basis points\\n        uint16 value;\\n    }\\n\\n    /// @notice Represents a top-level fee distribution with an address and optional sub-fee receivers.\\n    struct FeeDistribution {\\n        /// @dev The primary fee receiver\\n        Receiver feeReceiver;\\n        /// @dev Used to distribute a portion of the parent fee, e.g., burn a fraction\\n        Receiver[] subFeeReceivers;\\n    }\\n\\n    /// @notice Application environment settings\\n    struct AppEnvironment {\\n        /// @dev Application settings including dependencies\\n        AppSettings settings;\\n        /// @dev The basis points denominator for percentage calculations\\n        uint16 basisPoints;\\n        /// @dev The admin role identifier\\n        bytes32 adminRole;\\n        /// @dev The marketplace manager role identifier\\n        bytes32 marketplaceManagerRole;\\n        /// @dev The claimer role identifier\\n        bytes32 claimerRole;\\n    }\\n\\n    /// @notice Application settings\\n    struct AppSettings {\\n        /// @dev The number of decimals for price asking\\n        uint8 priceAskDecimals;\\n        /// @dev The fee distribution structure\\n        FeeDistribution[] fees;\\n        /// @dev The marketplace currency\\n        IERC20 marketplaceCurrency;\\n        /// @dev The maximum number of buys per transaction\\n        uint256 maxBuyPerTransaction;\\n        /// @dev The Gildi manager interface\\n        IGildiManager gildiManager;\\n        /// @dev The order book interface\\n        IGildiExchangeOrderBook orderBook;\\n        /// @dev The price oracle interface\\n        IGildiPriceOracle gildiPriceOracle;\\n        /// @dev The fund manager interface\\n        IGildiExchangeFundManager fundManager;\\n        /// @dev The payment processor interface\\n        IGildiExchangePaymentProcessor paymentProcessor;\\n        /// @dev The payment aggregator interface\\n        IGildiExchangePaymentAggregator paymentAggregator;\\n    }\\n\\n    /// @notice Purchases tokens of a release\\n    /// @dev Sweeps the floor\\n    /// @param _releaseId The ID of the release\\n    /// @param _amount The amount of tokens to purchase\\n    /// @param _maxTotalPrice The maximum total price to spend in Marketplace Currency\\n    /// @param _beneficiary The address to send the tokens to\\n    /// @param _isProxyOperation Whether the operation is a proxy operation\\n    /// @return amountSpent The amount of Marketplace Currency spent\\n    /// @return amountUsdSpent The amount spent in USD\\n    function purchase(\\n        uint256 _releaseId,\\n        uint256 _amount,\\n        uint256 _maxTotalPrice,\\n        address _beneficiary,\\n        bool _isProxyOperation\\n    ) external returns (uint256 amountSpent, uint256 amountUsdSpent);\\n\\n    /// @notice Transfer a token in the context of the Gildi Exchange\\n    /// @param _from The address to transfer from\\n    /// @param _to The address to transfer to\\n    /// @param _value The amount to transfer\\n    /// @param _amountCurrency The currency of the amount\\n    function transferTokenInContext(address _from, address _to, uint256 _value, address _amountCurrency) external;\\n\\n    /// @notice Tries to burn a token in the context of the Gildi Exchange\\n    /// @param _from The address to burn from\\n    /// @param _value The amount to burn\\n    /// @param _amountCurrency The currency of the amount\\n    /// @return Whether the burn was successful\\n    function tryBurnTokenInContext(address _from, uint256 _value, address _amountCurrency) external returns (bool);\\n\\n    /// @notice Gets the price needed to pay in marketplace currency to buy `_amountToBuy` units of `_releaseId`.\\n    /// @param _releaseId The ID of the release\\n    /// @param _amountToBuy The amount of tokens to buy\\n    /// @param _buyer The address of the buyer (optional)\\n    /// @return totalPriceInCurrency The total cost in marketplace currency\\n    /// @return asset The asset the price is in\\n    /// @return totalPriceUsd The total price in USD (using exchange's priceAskDecimals)\\n    function quotePricePreview(\\n        uint256 _releaseId,\\n        uint256 _amountToBuy,\\n        address _buyer\\n    ) external view returns (uint256 totalPriceInCurrency, address asset, uint256 totalPriceUsd);\\n\\n    /// @notice Checks if a release is currently in its initial sale period\\n    /// @param _releaseId The ID of the release\\n    /// @return True if the release is in active initial sale, false otherwise\\n    function isInInitialSale(uint256 _releaseId) external view returns (bool);\\n\\n    /// @notice Returns the app environment.\\n    /// @return appEnvironment The app environment\\n    function getAppEnvironment() external view returns (AppEnvironment memory);\\n\\n    /// @notice Gets the active marketplace asset for a release\\n    /// @param _releaseId The ID of the release\\n    /// @return The address of the active marketplace asset for the release\\n    function getActiveMarketplaceReleaseAsset(uint256 _releaseId) external view returns (address);\\n\\n    /// @notice Get the fees of a specific release\\n    /// @param _releaseId The ID of the release\\n    /// @return An array of fee distributions for the release\\n    function getReleaseFees(uint256 _releaseId) external view returns (FeeDistribution[] memory);\\n\\n    /// @notice Get a list of release IDs\\n    /// @param _activeOnly Whether or not to only return active releases\\n    /// @return activeReleases An array of release IDs\\n    function getReleaseIds(bool _activeOnly) external view returns (uint256[] memory);\\n\\n    /// @notice Creates a listing with default slippage\\n    /// @param _releaseId The ID of the release\\n    /// @param _seller The address of the seller\\n    /// @param _pricePerItem The price per item in USD\\n    /// @param _quantity The quantity being listed\\n    /// @param _fundsReceiver The address to receive funds from the sale (if address(0), defaults to seller)\\n    /// @param _payoutCurrency The currency the seller wants to receive payment in\\n    function createListing(\\n        uint256 _releaseId,\\n        address _seller,\\n        uint256 _pricePerItem,\\n        uint256 _quantity,\\n        address _payoutCurrency,\\n        address _fundsReceiver\\n    ) external;\\n\\n    /// @notice Creates a listing with custom slippage\\n    /// @param _releaseId The ID of the release\\n    /// @param _seller The address of the seller\\n    /// @param _pricePerItem The price per item in USD\\n    /// @param _quantity The quantity being listed\\n    /// @param _payoutCurrency The currency the seller wants to receive payment in\\n    /// @param _fundsReceiver The address to receive funds from the sale (if address(0), defaults to seller)\\n    /// @param _slippageBps Slippage tolerance in basis points\\n    function createListing(\\n        uint256 _releaseId,\\n        address _seller,\\n        uint256 _pricePerItem,\\n        uint256 _quantity,\\n        address _payoutCurrency,\\n        address _fundsReceiver,\\n        uint16 _slippageBps\\n    ) external;\\n\\n    /// @notice Modifies a listing with default slippage\\n    /// @param _listingId The ID of the listing to modify\\n    /// @param _newPricePerItem The new price per item in USD\\n    /// @param _newQuantity The new quantity (if 0, the listing will be removed)\\n    /// @param _payoutCurrency The new payout currency\\n    /// @param _fundsReceiver The address to receive funds from the sale (if address(0), defaults to seller)\\n    function modifyListing(\\n        uint256 _listingId,\\n        uint256 _newPricePerItem,\\n        uint256 _newQuantity,\\n        address _payoutCurrency,\\n        address _fundsReceiver\\n    ) external;\\n\\n    /// @notice Modifies a listing with custom slippage\\n    /// @param _listingId The ID of the listing to modify\\n    /// @param _newPricePerItem The new price per item in USD\\n    /// @param _newQuantity The new quantity (if 0, the listing will be removed)\\n    /// @param _payoutCurrency The new payout currency\\n    /// @param _fundsReceiver The address to receive funds from the sale (if address(0), defaults to seller)\\n    /// @param _slippageBps Slippage tolerance in basis points\\n    function modifyListing(\\n        uint256 _listingId,\\n        uint256 _newPricePerItem,\\n        uint256 _newQuantity,\\n        address _payoutCurrency,\\n        address _fundsReceiver,\\n        uint16 _slippageBps\\n    ) external;\\n\\n    /// @notice Cancels a listing by ID\\n    /// @param _listingId The ID of the listing to cancel\\n    function cancelListing(uint256 _listingId) external;\\n}\\n\",\"keccak256\":\"0xf4475d33b4e6336e4e20e4ada436887f5ac28e99a391a63d93dbed0e4895d25b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/marketplace/exchange/IGildiExchangeFundManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\n/// @title Gildi Exchange Fund Manager Interface\\n/// @notice Interface for the Gildi Exchange Fund Manager contract.\\n/// @custom:security-contact security@gildi.io\\n/// @author Patrick Fischer (Pathin) > https://pathin.me\\ninterface IGildiExchangeFundManager {\\n    // ========== Structs ==========\\n\\n    /// @notice Represents an fund entry storing the buyer, operator, fundParticipant, and value in Marketplace Currency.\\n    struct Fund {\\n        /// @dev Entity receiving the tokens (beneficiary)\\n        address buyer;\\n        /// @dev Entity that executed the transaction\\n        address operator;\\n        /// @dev Entity with funds in fund (seller or fee recipient)\\n        address fundParticipant;\\n        /// @dev Whether this was executed through a proxy\\n        bool isProxyOperation;\\n        /// @dev Amount in Marketplace Currency\\n        FundAmount amount;\\n        /// @dev Payout currency\\n        address payoutCurrency;\\n    }\\n\\n    /// @notice Represents an amount of tokens in a specific currency\\n    struct FundAmount {\\n        /// @dev The amount of tokens\\n        uint256 value;\\n        /// @dev The address of the currency token\\n        address currencyAddress;\\n    }\\n\\n    // ========== View Functions ==========\\n\\n    /// @notice Checks if a release has any funds\\n    /// @param _releaseId The ID of the release\\n    /// @return True if the release has funds, false otherwise\\n    function releaseHasFunds(uint256 _releaseId) external view returns (bool);\\n\\n    // ========== Non-View Functions ==========\\n\\n    /// @notice Adds funds to fund for a participant\\n    /// @param _releaseId The ID of the release\\n    /// @param _participant The address of the fund participant\\n    /// @param _buyer The address of the buyer\\n    /// @param _operator The address of the operator\\n    /// @param _isProxyOperation Whether this is a proxy operation\\n    /// @param _amount The amount to add to fund\\n    /// @param _amountCurrency The currency of the fund amount\\n    /// @param _payoutCurrency The currency to payout in\\n    function handleAddToFund(\\n        uint256 _releaseId,\\n        address _participant,\\n        address _buyer,\\n        address _operator,\\n        bool _isProxyOperation,\\n        uint256 _amount,\\n        address _amountCurrency,\\n        address _payoutCurrency\\n    ) external;\\n\\n    /// @notice Cancels funds for a release in batches\\n    /// @param _releaseId The ID of the release\\n    /// @param _batchSize The number of funds to process in this batch\\n    /// @return processed The number of funds processed\\n    function handleCancelReleaseFunds(uint256 _releaseId, uint256 _batchSize) external returns (uint256 processed);\\n\\n    /// @notice Claims funds for a participant of a release with custom slippage\\n    /// @param _releaseId The ID of the release\\n    /// @param _fundParticipant The address of the fund participant\\n    /// @param _slippageBps Slippage tolerance in basis points (100 = 1%, 500 = 5%)\\n    function claimFunds(uint256 _releaseId, address _fundParticipant, uint16 _slippageBps) external;\\n\\n    /// @notice Claims funds for a participant of a release with default slippage (5%)\\n    /// @param _releaseId The ID of the release\\n    /// @param _fundParticipant The address of the fund participant\\n    function claimFunds(uint256 _releaseId, address _fundParticipant) external;\\n\\n    /// @notice Claims all funds for a participant across all releases with custom slippage\\n    /// @param _fundParticipant The address of the fund participant\\n    /// @param _slippageBps Slippage tolerance in basis points (100 = 1%, 500 = 5%)\\n    function claimAllFunds(address _fundParticipant, uint16 _slippageBps) external;\\n\\n    /// @notice Claims all funds for a participant across all releases with default slippage (5%)\\n    /// @param _fundParticipant The address of the fund participant\\n    function claimAllFunds(address _fundParticipant) external;\\n}\\n\",\"keccak256\":\"0xeeb65068f4ef93ddff2766e77d514855844ab3402fe8eb2908aacf756af7fc48\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/marketplace/exchange/IGildiExchangeOrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\n/// @title IGildiExchangeOrderBook\\n/// @notice Interface for the Gildi Exchange Order Book, which manages listings and provides order book functionality for the marketplace.\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\ninterface IGildiExchangeOrderBook {\\n    /// @notice Represents a listing in the order book for a specific token release.\\n    struct Listing {\\n        /// @dev A unique identifier for the listing.\\n        uint256 id;\\n        /// @dev The ID of the token release being listed.\\n        uint256 releaseId;\\n        /// @dev The address of the seller who created the listing.\\n        address seller;\\n        /// @dev The price per item in USD.\\n        uint256 pricePerItem;\\n        /// @dev The currency in which the seller wants to receive payment (if different from the active release marketplace currency, a swap will be performed).\\n        address payoutCurrency;\\n        /// @dev The quantity of tokens being listed.\\n        uint256 quantity;\\n        /// @dev Slippage protection in basis points (100 = 1%, 500 = 5%), 0 means no slippage allowed.\\n        uint16 slippageBps;\\n        /// @dev The block timestamp when the listing was created (UNIX timestamp).\\n        uint256 createdAt;\\n        /// @dev The block timestamp when the listing was last modified (UNIX timestamp).\\n        uint256 modifiedAt;\\n        /// @dev The ID of the next listing in the linked list (ordered by price).\\n        uint256 nextListingId;\\n        /// @dev The ID of the previous listing in the linked list (ordered by price).\\n        uint256 prevListingId;\\n        /// @dev Optional address to receive funds from the sale.\\n        address fundsReceiver; // If address(0), defaults to seller\\n    }\\n\\n    /// @notice Contains preview information for a potential purchase.\\n    struct PurchasePreview {\\n        /// @dev The total quantity available for purchase.\\n        uint256 totalQuantityAvailable;\\n        /// @dev The total price in marketplace currency.\\n        uint256 totalPriceInCurrency;\\n        /// @dev The address of the currency used for the purchase.\\n        address currency;\\n        /// @dev The total price in USD (using exchange's priceAskDecimals).\\n        uint256 totalPriceUsd;\\n    }\\n\\n    // ========== View Functions ==========\\n\\n    /// @notice Gets a listing by ID\\n    /// @param _listingId The listing ID\\n    /// @return The listing\\n    function getListing(uint256 _listingId) external view returns (Listing memory);\\n\\n    /// @notice Gets all the listings of a specific seller\\n    /// @param _seller The address of the seller\\n    /// @return An array of listings for the seller\\n    function getListingsOfSeller(address _seller) external view returns (Listing[] memory);\\n\\n    /// @notice Gets all the listings of a specific release, ordered by price\\n    /// @param _releaseId The ID of the release\\n    /// @param _cursor The cursor to start from\\n    /// @param _limit The limit of listings to return\\n    /// @return orderedListings An array of listings for the release\\n    /// @return cursor The cursor to continue from\\n    function getOrderedListings(\\n        uint256 _releaseId,\\n        uint256 _cursor,\\n        uint256 _limit\\n    ) external view returns (Listing[] memory orderedListings, uint256 cursor);\\n\\n    /// @notice Gets the available buy quantity for a user\\n    /// @param _releaseId The release ID\\n    /// @param _user The user address\\n    /// @return The available quantity to buy\\n    function getAvailableBuyQuantity(uint256 _releaseId, address _user) external view returns (uint256);\\n\\n    /// @notice Preview a purchase\\n    /// @param _releaseId The ID of the release to purchase\\n    /// @param _buyer The address of the buyer\\n    /// @param _amountToBuy The amount of tokens to buy\\n    /// @return Preview information for the purchase\\n    function previewPurchase(\\n        uint256 _releaseId,\\n        address _buyer,\\n        uint256 _amountToBuy\\n    ) external view returns (PurchasePreview memory);\\n\\n    /// @notice Gets the first listing ID (with lowest price) for a specific release\\n    /// @param _releaseId The ID of the release\\n    /// @return The ID of the listing with the lowest price for this release\\n    function getHeadListingId(uint256 _releaseId) external view returns (uint256);\\n\\n    /// @notice Gets the next listing ID in the price-ordered linked list\\n    /// @param _listingId The current listing ID\\n    /// @return The ID of the next listing with a higher price, or 0 if none exists\\n    function getNextListingId(uint256 _listingId) external view returns (uint256);\\n\\n    /// @notice Gets the total quantity listed for a specific release\\n    /// @param _releaseId The ID of the release\\n    /// @return The total quantity listed\\n    function listedQuantities(uint256 _releaseId) external view returns (uint256);\\n\\n    // ========== Non-View Functions ==========\\n\\n    /// @notice Creates a listing\\n    /// @param _releaseId The ID of the release\\n    /// @param _seller The address of the seller\\n    /// @param _pricePerItem The price per item\\n    /// @param _quantity The quantity being listed\\n    /// @param _payoutCurrency The payout currency of the listing\\n    /// @param _slippageBps Optional slippage protection in basis points (100 = 1%, 500 = 5%)\\n    /// @dev Takes the slippage setting literally, 0 = no slippage, 10000 = 100%, does not make assumptions about the default, caller must know what they are doing\\n    function handleCreateListing(\\n        uint256 _releaseId,\\n        address _seller,\\n        uint256 _pricePerItem,\\n        uint256 _quantity,\\n        address _payoutCurrency,\\n        address _fundsReceiver,\\n        uint16 _slippageBps\\n    ) external;\\n\\n    /// @notice Modifies an existing listing's price, quantity, and slippage settings\\n    /// @param _listingId The ID of the listing to modify\\n    /// @param _pricePerItem The new price per item\\n    /// @param _quantity The new quantity (if 0, the listing will be removed)\\n    /// @param _payoutCurrency The new payout currency\\n    /// @param _slippageBps Slippage protection in basis points (100 = 1%, 500 = 5%)\\n    /// @dev Takes the slippage setting literally, 0 = no slippage, 10000 = 100%, does not make assumptions about the default, caller must know what they are doing\\n    function handleModifyListing(\\n        uint256 _listingId,\\n        uint256 _pricePerItem,\\n        uint256 _quantity,\\n        address _payoutCurrency,\\n        address _fundsReceiver,\\n        uint16 _slippageBps\\n    ) external;\\n\\n    /// @notice Removes a listing\\n    /// @param _listingId The ID of the listing to cancel\\n    function handleRemoveListing(uint256 _listingId) external;\\n\\n    /// @notice Decreases a listing's quantity after a purchase\\n    /// @param _listingId The ID of the listing\\n    /// @param _quantityToBuy The amount to reduce from the listing's quantity (if this reduces quantity to 0, the listing will be removed)\\n    function handleDecreaseListingQuantity(uint256 _listingId, uint256 _quantityToBuy) external;\\n\\n    /// @notice Unlists all listings of a release in batches.\\n    /// @param _releaseId The ID of the release\\n    /// @param _batchSize The batch size\\n    /// @return processedListings The number of listings processed\\n    function handleUnlistReleaseListings(\\n        uint256 _releaseId,\\n        uint256 _batchSize\\n    ) external returns (uint256 processedListings);\\n}\\n\",\"keccak256\":\"0x0b0980096f2c0300d5980fe93e83b91ba69062043ac6b17a0d36f598b6532c81\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/marketplace/exchange/IGildiExchangePaymentAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\nimport './IGildiExchangeSwapAdapter.sol';\\nimport './IGildiExchange.sol';\\n\\n/// @title IGildiExchangePaymentAggregator\\n/// @notice Interface for marketplace payment operations including swap functionality\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\ninterface IGildiExchangePaymentAggregator {\\n    /// @notice Executes a swap out operation to convert source tokens to a target token.\\n    /// @param _amount The amount of source tokens to swap.\\n    /// @param _sourceCurrency The address of the source token.\\n    /// @param _targetToken The token to swap to.\\n    /// @param _minTargetAmount The minimum amount of target tokens to receive (slippage protection).\\n    /// @param _recipient The recipient of the target tokens.\\n    /// @return targetReceived The amount of target tokens received.\\n    function swapOut(\\n        uint256 _amount,\\n        address _sourceCurrency,\\n        address _targetToken,\\n        uint256 _minTargetAmount,\\n        address _recipient\\n    ) external returns (uint256 targetReceived);\\n\\n    /// @notice Previews a swap out operation to check if there's a valid route and estimate the output amount.\\n    /// @param _amount The amount of source tokens to swap.\\n    /// @param _sourceCurrency The address of the source token.\\n    /// @param _targetToken The token to swap to.\\n    /// @return hasValidRoute Whether there's a valid route for the swap.\\n    /// @return expectedTargetAmount The expected amount of target tokens to receive.\\n    /// @return bestRoute The best route for the swap.\\n    function previewSwapOut(\\n        uint256 _amount,\\n        address _sourceCurrency,\\n        address _targetToken\\n    )\\n        external\\n        view\\n        returns (\\n            bool hasValidRoute,\\n            uint256 expectedTargetAmount,\\n            IGildiExchangeSwapAdapter.QuoteRoute memory bestRoute\\n        );\\n\\n    /// @notice Executes the purchase payment flow.\\n    /// @param _releaseId The release ID.\\n    /// @param _amount The amount to purchase.\\n    /// @param _sourceToken The token used for payment (address(0) means native).\\n    /// @param _sourceMaxAmount Maximum amount of _sourceToken to spend.\\n    /// @return amountUsdSpent The amount spent in USD\\n    function purchase(\\n        uint256 _releaseId,\\n        uint256 _amount,\\n        address _sourceToken,\\n        uint256 _sourceMaxAmount\\n    ) external payable returns (uint256 amountUsdSpent);\\n\\n    /// @notice Estimates the amount of `_sourceToken` required to get `_amount` of `_releaseId` for `_buyer` of the marketplace token and returns the current best route.\\n    /// @param _releaseId The release ID.\\n    /// @param _amount The amount of the release.\\n    /// @param _buyer The buyer of the release.\\n    /// @param _sourceToken The token to swap from.\\n    /// @return sourceNeeded The amount of `_sourceToken` required.\\n    /// @return releaseCurrency The active martketplace currency of the release.\\n    /// @return quoteRoute The route of the quote.\\n    /// @return totalPriceUsd The total price in USD (using exchange's priceAskDecimals).\\n    function estimatePurchase(\\n        uint256 _releaseId,\\n        uint256 _amount,\\n        address _buyer,\\n        address _sourceToken\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 sourceNeeded,\\n            address releaseCurrency,\\n            IGildiExchangeSwapAdapter.QuoteRoute memory quoteRoute,\\n            uint256 totalPriceUsd\\n        );\\n\\n    /// @notice Returns the GildiExchange contract instance.\\n    /// @return The GildiExchange contract.\\n    function getGildiExchange() external view returns (IGildiExchange);\\n}\\n\",\"keccak256\":\"0x5f693a99735cda261ab7a91c04e2948ceef2564327f47b374d02d9a4e66be226\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/marketplace/exchange/IGildiExchangePaymentProcessor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\nimport {IGildiExchange} from './IGildiExchange.sol';\\n\\n/// @title IGildiExchangePaymentProcessor\\n/// @notice Interface for the Gildi Exchange Payment Processor.\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\ninterface IGildiExchangePaymentProcessor {\\n    /// @notice Gets the price feed ID for a currency\\n    /// @param _currency The currency address\\n    /// @return The price feed ID\\n    function getPriceFeedId(address _currency) external view returns (bytes32);\\n\\n    /// @notice Converts a price in USD to the equivalent amount in the specified currency\\n    /// @param _priceInUSD The price in USD to convert\\n    /// @param _currency The address of the currency to convert to\\n    /// @return The equivalent amount in the specified currency\\n    function quoteInCurrency(uint256 _priceInUSD, address _currency) external view returns (uint256);\\n\\n    /// @notice Processes payment with fees.\\n    ///      Calculates fees, transfers funds to fee recipients, and optionally creates funds\\n    /// @param _releaseId The ID of the release\\n    /// @param _buyer The address of the buyer\\n    /// @param _seller The address of the seller\\n    /// @param _value The value to process fees for\\n    /// @param _amountCurrency The currency of the amount\\n    /// @param _createFund Whether to create an fund\\n    /// @param _operator The address of the operator\\n    /// @param _listingId The ID of the listing\\n    /// @param _isProxyOperation Whether this is a proxy operation\\n    /// @param _listingPayoutCurrency The currency to payout in from the listing\\n    function handleProcessPaymentWithFees(\\n        uint256 _releaseId,\\n        address _buyer,\\n        address _seller,\\n        uint256 _value,\\n        address _amountCurrency,\\n        bool _createFund,\\n        address _operator,\\n        bool _isProxyOperation,\\n        uint256 _listingId,\\n        address _listingPayoutCurrency,\\n        uint16 _slippageBps\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2a73ddb220645ad27344e5927a358d45abe2d83db524b8fd6f839c56036e56ea\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/marketplace/exchange/IGildiExchangeSwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\n/// @title IGildiExchangeSwapAdapter\\n/// @notice Interface for a DEX/aggregator adapter that can\\n///         quote & swap from a user\\u2019s source token -> marketplace token\\n///         in an \\\"exact out\\\" fashion.\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\ninterface IGildiExchangeSwapAdapter {\\n    /// @notice The route of the quote\\n    /// @param marketplaceAdapter The address of the marketplace adapter\\n    /// @param route The path of the quote\\n    /// @param fees The fees of the quote\\n    /// @param amounts The amounts of the quote\\n    /// @param virtualAmountsWithoutSlippage The virtual amounts of the quote without slippage\\n    struct QuoteRoute {\\n        address marketplaceAdapter;\\n        address[] route;\\n        uint128[] fees;\\n        uint128[] amounts;\\n        uint128[] virtualAmountsWithoutSlippage;\\n    }\\n\\n    /// @notice The quote for a swap in\\n    /// @param sourceTokenRequired The amount of source token required\\n    /// @param rawQuoteData The raw quote data\\n    /// @param quoteRoute The quote route\\n    /// @param validRoute Whether the route is valid\\n    struct SwapInQuote {\\n        uint256 sourceTokenRequired;\\n        bytes rawQuoteData;\\n        QuoteRoute quoteRoute;\\n        bool validRoute;\\n    }\\n\\n    /// @notice The quote for a swap out\\n    /// @param targetTokenOut The target token\\n    /// @param rawQuoteData The raw quote data\\n    /// @param quoteRoute The quote route\\n    /// @param validRoute Whether the route is valid\\n    struct SwapOutQuote {\\n        uint256 targetTokenOut;\\n        bytes rawQuoteData;\\n        QuoteRoute quoteRoute;\\n        bool validRoute;\\n    }\\n\\n    /// @notice Quotes the amount of `_sourceToken` required to get `_marketplaceAmountDesired` of `_marketplaceToken`.\\n    /// @param _sourceToken The token to swap from.\\n    /// @param _marketplaceToken The token to swap to.\\n    /// @param _marketplaceAmountDesired The amount of `_marketplaceToken` desired.\\n    /// @return quote The swap in quote containing required source token amount, quote data and route information\\n    function quoteSwapIn(\\n        address _sourceToken,\\n        address _marketplaceToken,\\n        uint256 _marketplaceAmountDesired\\n    ) external view returns (SwapInQuote memory quote);\\n\\n    /// @notice Performs an \\\"exact out\\\" swap to get `_marketplaceAmount` of `_marketplaceToken`.\\n    /// @param _sourceToken The token to swap from.\\n    /// @param _marketplaceToken The token to swap to.\\n    /// @param _sourceAmountMax The max `_sourceToken` we can spend (slippage buffer).\\n    /// @param _marketplaceAmount The exact marketplace tokens we want out.\\n    /// @param _to The recipient of the marketplace tokens.\\n    /// @param _quoteData The data previously returned by `quoteSwapIn`.\\n    function swapIn(\\n        address _sourceToken,\\n        address _marketplaceToken,\\n        uint256 _sourceAmountMax,\\n        uint256 _marketplaceAmount,\\n        address _to,\\n        bytes calldata _quoteData\\n    ) external returns (uint256 sourceSpent);\\n\\n    /// @notice Quotes the amount of `_targetToken` you can get by providing `_sourceAmount` of `_sourceToken`.\\n    /// @param _sourceToken The token to swap from.\\n    /// @param _targetToken The token to swap to.\\n    /// @param _sourceAmount The amount of `_sourceToken` available.\\n    /// @return quote The quote.\\n    function quoteSwapOut(\\n        address _sourceToken,\\n        address _targetToken,\\n        uint256 _sourceAmount\\n    ) external view returns (SwapOutQuote memory quote);\\n\\n    /// @notice Performs an \\\"exact in\\\" swap to convert `_sourceAmount` of `_sourceToken` into `_targetToken`.\\n    /// @param _sourceToken The token to swap from.\\n    /// @param _targetToken The token to swap to.\\n    /// @param _sourceAmount The exact amount of `_sourceToken` to swap.\\n    /// @param _minTargetAmount The minimum amount of `_targetToken` to receive (slippage protection).\\n    /// @param _to The recipient of the target tokens.\\n    /// @param _quoteData The data previously returned by `quoteSwapOut`.\\n    function swapOut(\\n        address _sourceToken,\\n        address _targetToken,\\n        uint256 _sourceAmount,\\n        uint256 _minTargetAmount,\\n        address _to,\\n        bytes calldata _quoteData\\n    ) external returns (uint256 targetReceived);\\n}\\n\",\"keccak256\":\"0x05e5faabc9b83ea2065e796a915d917eaf2d0a9906dfaf78ae6e2e4868a7e7c6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/oracles/price/IGildiPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\n\\npragma solidity 0.8.24;\\n\\nimport './IGildiPriceResolver.sol';\\n\\n/// @title Gildi Price Oracle Interface\\n/// @notice Interface for the consumer-facing Gildi Price Oracle\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\ninterface IGildiPriceOracle is IGildiPriceResolver {\\n    /// @notice Represents an asset in the system\\n    struct Asset {\\n        /// @dev Unique identifier for the asset\\n        uint256 id;\\n        /// @dev The asset's symbol (e.g., BTC, ETH)\\n        string symbol;\\n        /// @dev The asset's full name\\n        string name;\\n    }\\n\\n    /// @notice Information about a trading pair\\n    struct PairInfo {\\n        /// @dev Unique identifier for the pair\\n        bytes32 pairId;\\n        /// @dev The base asset in the pair\\n        Asset baseAsset;\\n        /// @dev The quote asset in the pair\\n        Asset quoteAsset;\\n    }\\n\\n    /// @dev Thrown when an invalid pair ID is provided\\n    error InvalidPairId();\\n\\n    /// @notice Adds a pair using asset IDs\\n    /// @param _baseAssetId The ID of the base asset\\n    /// @param _quoteAssetId The ID of the quote asset\\n    /// @param _resolver The resolver contract for the asset pair\\n    function addPair(uint256 _baseAssetId, uint256 _quoteAssetId, IGildiPriceResolver _resolver) external;\\n\\n    /// @notice Retrieves the resolver for a specific asset pair\\n    /// @param _pairId The identifier of the asset pair\\n    function getResolver(bytes32 _pairId) external view returns (IGildiPriceResolver resolver);\\n\\n    /// @notice Fetches a list of all registered pairs in \\\"BASE/QUOTE\\\" string form\\n    /// @return An array of registered pairs\\n    function getPairs() external view returns (PairInfo[] memory);\\n\\n    /// @notice Adds a new asset\\n    /// @param _symbol The symbol of the asset\\n    /// @param _name The name of the asset\\n    /// @return The ID of the newly added asset\\n    function addAsset(string memory _symbol, string memory _name) external returns (uint256);\\n\\n    /// @notice Returns all registered assets\\n    /// @return An array of registered assets\\n    function getAssets() external view returns (Asset[] memory);\\n\\n    /// @notice Returns an asset by ID\\n    /// @param _assetId The ID of the asset\\n    /// @return The asset details\\n    function getAssetById(uint256 _assetId) external view returns (Asset memory);\\n\\n    /// @notice Returns pairs that use the specified asset ID as quote\\n    /// @param _quoteAssetId The ID of the quote asset\\n    /// @return An array of registered pairs\\n    function getPairsByQuoteAsset(uint256 _quoteAssetId) external view returns (string[] memory);\\n\\n    /// @notice Retrieves price data by numeric IDs\\n    /// @param _baseAssetId The ID of the base asset\\n    /// @param _quoteAssetId The ID of the quote asset\\n    /// @return The price data for the asset pair\\n    function getPriceById(uint256 _baseAssetId, uint256 _quoteAssetId) external view returns (PriceData memory);\\n\\n    /// @notice Checks if a pair with the given ID exists\\n    /// @param _pairId The identifier of the asset pair\\n    /// @return True if the pair exists\\n    function pairExistsById(bytes32 _pairId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6c406a4d51283a3acb73db7da552e9d22df34f34b7f8f3f772ba04b844419ddd\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/oracles/price/IGildiPriceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\n\\npragma solidity 0.8.24;\\n\\n/// @title Gildi Price Resolver Interface\\n/// @notice Interface that all price resolvers must implement\\n/// @custom:security-contact security@gildi.io\\n/// @author Patrick Fischer\\ninterface IGildiPriceResolver {\\n    /// @notice Price data struct\\n    struct PriceData {\\n        /// @notice The price of the base asset in terms of the quote asset\\n        uint256 price;\\n        /// @notice The number of decimals for the price\\n        uint8 decimals;\\n        /// @notice The UNIX timestamp when the price was last updated\\n        uint256 timestamp;\\n    }\\n\\n    /// @notice Retrieves the price data for a given pair ID\\n    /// @param pairId The identifier of the asset pair\\n    /// @return price The price data for the asset pair\\n    function getPrice(bytes32 pairId) external view returns (PriceData memory price);\\n\\n    /// @notice Retrieves the price data for a given pair ID, with a maximum age\\n    /// @param pairId The identifier of the asset pair\\n    /// @param age The maximum age of the price data in seconds\\n    function getPriceNoOlderThan(bytes32 pairId, uint256 age) external view returns (PriceData memory priceData);\\n}\\n\",\"keccak256\":\"0x82a4c66f173ce75a38cdc50d75c806f13fe99ed53bc3f1458fb50348dcf77b75\",\"license\":\"UNLICENSED\"},\"contracts/marketplace/exchange/GildiExchangePaymentAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\nimport './GildiExchangePaymentBaseUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\n/// @title GildiExchangePaymentAggregator\\n/// @notice A generic payment adapter that aggregates multiple DEX/aggregator adapters.\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\ncontract GildiExchangePaymentAggregator is GildiExchangePaymentBaseUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the aggregator with the exchange, marketplace token, and wrapped native token.\\n    /// @param _gildiExchange The address of the Gildi Exchange.\\n    /// @param _wNativeAddress The address of the wrapped native token.\\n    /// @param _initialDefaultAdmin The address of the initial default admin.\\n    /// @param _initialContractAdmin The address of the initial contract admin.\\n    function initialize(\\n        address _gildiExchange,\\n        address _wNativeAddress,\\n        address _initialDefaultAdmin,\\n        address _initialContractAdmin\\n    ) public initializer {\\n        __GildiExchangePaymentBase_init(_gildiExchange, _initialDefaultAdmin, _initialContractAdmin);\\n        _setPurchaseAllowNative(true);\\n        _setWrappedNative(_wNativeAddress);\\n    }\\n}\\n\",\"keccak256\":\"0x7057e69487e47ec5fcab84d888090eae98b61b7939bb2a2941471cbe4d5b414f\",\"license\":\"UNLICENSED\"},\"contracts/marketplace/exchange/GildiExchangePaymentBaseCore.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\nimport '../../interfaces/external/IWNative.sol';\\nimport '../../interfaces/marketplace/exchange/IGildiExchange.sol';\\nimport '../../interfaces/marketplace/exchange/IGildiExchangePaymentAggregator.sol';\\nimport '../../interfaces/marketplace/exchange/IGildiExchangeSwapAdapter.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\n/// @title GildiExchangePaymentBaseCore\\n/// @notice Core contract holding shared logic and storage definitions for the purchase flow.\\n/// This contract is completely agnostic to access control and reentrancy protection;\\n/// it just provides internal helper functions and defines a storage struct along with internal getters.\\n/// Derived contracts must implement _getStorage().\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\nabstract contract GildiExchangePaymentBaseCore is IGildiExchangePaymentAggregator {\\n    using SafeERC20 for IERC20;\\n    bytes32 public constant ADMIN_ROLE = keccak256('ADMIN_ROLE');\\n\\n    // --- Storage Struct (shared by both implementations) ---\\n    /// @dev Storage struct for the Gildi Marketplace.\\n    /// @param gildiExchange The Gildi Exchange contract.\\n    /// @param marketplaceToken DEPRECATED: The marketplace token address. Use gildiExchange.getActiveMarketplaceReleaseAsset() instead.\\n    /// @param allowNative If native payments are allowed.\\n    /// @param wrappedNative The wrapped native token address.\\n    /// @param adapters The list of aggregator/DEX adapters.\\n    /// @param allowedPurchaseTokens The allowed purchase tokens.\\n    /// @param isPurchaseTokenAllowed Mapping of allowed purchase tokens.\\n    struct GildiExchangePaymentBaseStorage {\\n        IGildiExchange gildiExchange;\\n        bool purchaseAllowNative;\\n        address wrappedNative;\\n        IGildiExchangeSwapAdapter[] adapters;\\n        address[] allowedPurchaseTokens;\\n        mapping(address => bool) isPurchaseTokenAllowed;\\n    }\\n\\n    /// @dev Emitted when an index is out of bounds.\\n    error IndexOutOfRange();\\n\\n    /// @dev Emitted when there are not enough source tokens for the best route.\\n    error NotEnoughSourceTokensForBestRoute();\\n\\n    /// @dev Emitted when slippage exceeds the limit.\\n    error SlippageExceeded();\\n\\n    /// @dev Emitted when a token is not allowed for purchase.\\n    /// @param token The token that is not allowed.\\n    error PurchaseTokenNotAllowed(address token);\\n\\n    /// @dev Emitted when native currency is not allowed for purchase.\\n    error NativeNotAllowed();\\n\\n    /// @dev Emitted when the msg.value does not match the expected amount.\\n    error IncorrectMsgValue();\\n\\n    /// @dev Emitted when there are no swap adapters configured.\\n    error NoAdapters();\\n\\n    /// @dev Emitted when no valid route is found for a swap.\\n    error NoValidRoute();\\n\\n    /// @dev Emitted when there is insufficient liquidity for a swap.\\n    error InsufficientLiquidity();\\n\\n    /// @dev Emitted when the received amount is less than the required minimum.\\n    error InsufficientReceiveAmount();\\n\\n    /// @dev Emitted when a swap operation fails.\\n    error SwapOutFailed();\\n\\n    /// @notice Emitted when a new swap adapter is added.\\n    /// @param adapter The adapter that was added.\\n    event AdapterAdded(IGildiExchangeSwapAdapter adapter);\\n\\n    /// @notice Emitted when a swap adapter is removed.\\n    /// @param adapter The adapter that was removed.\\n    event AdapterRemoved(IGildiExchangeSwapAdapter adapter);\\n\\n    /// @notice Emitted when a token's swap-in status is changed.\\n    /// @param token The token address.\\n    /// @param allowed Whether the token is allowed for swap-in.\\n    event AllowedSwapInTokenSet(address token, bool allowed);\\n\\n    /// @notice Emitted when the wrapped native token address is set.\\n    /// @param wnative The wrapped native token address.\\n    event WrappedNativeSet(address wnative);\\n\\n    /// @notice Emitted when the native payment allowance is changed.\\n    /// @param allow Whether native payments are allowed.\\n    event PurchaseAllowNativeSet(bool allow);\\n\\n    /// @notice Emitted when a token's source status is changed.\\n    /// @param token The token address.\\n    /// @param allowed Whether the token is allowed as a source.\\n    event SourceTokenSet(address token, bool allowed);\\n\\n    /// @notice Emitted when a marketplace token leftover is returned.\\n    event MarketplaceLeftoverReturned(\\n        address indexed marketplaceToken,\\n        address recipient,\\n        uint256 sourceAmount,\\n        bool swapped,\\n        address targetToken,\\n        uint256 targetAmount\\n    );\\n\\n    /// @notice Emitted when a swap operation is executed.\\n    /// @param sourceToken The address of the source token.\\n    /// @param targetToken The address of the target token.\\n    /// @param sourceAmount The amount of source tokens swapped.\\n    /// @param targetAmount The amount of target tokens received.\\n    /// @param recipient The address that received the target tokens.\\n    /// @param adapter The adapter used for the swap.\\n    /// @param route The detailed routing information used for the swap.\\n    event SwapExecuted(\\n        address indexed sourceToken,\\n        address indexed targetToken,\\n        uint256 sourceAmount,\\n        uint256 targetAmount,\\n        address recipient,\\n        address adapter,\\n        IGildiExchangeSwapAdapter.QuoteRoute route\\n    );\\n\\n    /// @notice Emitted when a swap route is selected for a transaction.\\n    /// @param sourceToken The starting token for the swap.\\n    /// @param targetToken The desired output token.\\n    /// @param amount The amount to be swapped.\\n    /// @param expectedOutput The expected output amount.\\n    /// @param selectedAdapter The address of the selected adapter for the route.\\n    event SwapRouteSelected(\\n        address indexed sourceToken,\\n        address indexed targetToken,\\n        uint256 amount,\\n        uint256 expectedOutput,\\n        address selectedAdapter\\n    );\\n\\n    /// @notice The best adapter quote for a swap out\\n    /// @param bestAdapter The best adapter\\n    /// @param bestTargetAmount The best target amount\\n    /// @param bestQuoteData The best quote data\\n    /// @param bestQuoteRoute The best quote route\\n    /// @param hasValidRoute Whether there is any valid route.\\n    struct BestAdapterSwapOutQuote {\\n        address bestAdapter;\\n        uint256 bestTargetAmount;\\n        bytes bestQuoteData;\\n        IGildiExchangeSwapAdapter.QuoteRoute bestQuoteRoute;\\n        bool hasValidRoute;\\n    }\\n\\n    // --- Abstract function: must return the storage pointer ---\\n    function _getStorage() internal view virtual returns (GildiExchangePaymentBaseStorage storage);\\n\\n    /// @dev Returns the message sender.\\n    /// @return The address of the message sender.\\n    function _msgSender() internal view virtual returns (address);\\n\\n    // --- Internal Setters ---\\n    function _setPurchaseAllowNative(bool _allow) internal virtual {\\n        if (_allow == getPurchaseAllowNative()) {\\n            return;\\n        }\\n\\n        _getStorage().purchaseAllowNative = _allow;\\n        emit PurchaseAllowNativeSet(_allow);\\n    }\\n\\n    function _setAllowedPurchaseToken(address _token, bool _allowed) internal virtual {\\n        GildiExchangePaymentBaseStorage storage $ = _getStorage();\\n        if (_allowed) {\\n            if (!$.isPurchaseTokenAllowed[_token]) {\\n                $.allowedPurchaseTokens.push(_token);\\n                $.isPurchaseTokenAllowed[_token] = true;\\n            }\\n        } else {\\n            if ($.isPurchaseTokenAllowed[_token]) {\\n                delete $.isPurchaseTokenAllowed[_token];\\n                uint256 len = $.allowedPurchaseTokens.length;\\n                for (uint256 i = 0; i < len; i++) {\\n                    if (_token == $.allowedPurchaseTokens[i]) {\\n                        $.allowedPurchaseTokens[i] = $.allowedPurchaseTokens[len - 1];\\n                        $.allowedPurchaseTokens.pop();\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        emit AllowedSwapInTokenSet(_token, _allowed);\\n    }\\n\\n    function _addAdapter(IGildiExchangeSwapAdapter _adapter) internal virtual {\\n        for (uint256 i = 0; i < getAdapters().length; i++) {\\n            if (address(_adapter) == address(getAdapters()[i])) {\\n                return;\\n            }\\n        }\\n\\n        GildiExchangePaymentBaseStorage storage $ = _getStorage();\\n        $.adapters.push(_adapter);\\n        emit AdapterAdded(_adapter);\\n    }\\n\\n    function _setWrappedNative(address _wnative) internal virtual {\\n        if (_wnative == getWrappedNative()) {\\n            return;\\n        }\\n\\n        _getStorage().wrappedNative = _wnative;\\n        emit WrappedNativeSet(_wnative);\\n    }\\n\\n    function _removeAdapter(uint256 index) internal virtual {\\n        GildiExchangePaymentBaseStorage storage $ = _getStorage();\\n        IGildiExchangeSwapAdapter[] storage adapters = $.adapters;\\n        if (index >= adapters.length) {\\n            revert IndexOutOfRange();\\n        }\\n        emit AdapterRemoved(adapters[index]);\\n        adapters[index] = adapters[adapters.length - 1];\\n        adapters.pop();\\n    }\\n\\n    function _removeAdapter(IGildiExchangeSwapAdapter _adapter) internal virtual {\\n        GildiExchangePaymentBaseStorage storage $ = _getStorage();\\n        uint256 len = $.adapters.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            if (address(_adapter) == address($.adapters[i])) {\\n                emit AdapterRemoved(_adapter);\\n                if (i != len - 1) {\\n                    $.adapters[i] = $.adapters[len - 1];\\n                }\\n                $.adapters.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    // --- Internal Logic ---\\n    function _approveMarketplaceIfNeeded(address _marketplaceToken, uint256 _requiredAmount) internal {\\n        uint256 allowanceNow = IERC20(_marketplaceToken).allowance(address(this), address(getGildiExchange()));\\n        if (allowanceNow < _requiredAmount) {\\n            IERC20(_marketplaceToken).forceApprove(address(getGildiExchange()), type(uint256).max);\\n        }\\n    }\\n\\n    function _collectPurchaseToken(address _sourceToken, uint256 _sourceMaxAmount) internal {\\n        if (!isPurchaseTokenAllowed(_sourceToken)) {\\n            revert PurchaseTokenNotAllowed(_sourceToken);\\n        }\\n        IERC20(_sourceToken).safeTransferFrom(msg.sender, address(this), _sourceMaxAmount);\\n    }\\n\\n    function _approveFundsToAdapter(address _adapter, address _sourceToken, uint256 _amount) internal {\\n        IERC20(_sourceToken).forceApprove(_adapter, _amount);\\n    }\\n\\n    /// @notice Executes a swap out operation, converting source tokens to a target token\\n    /// @param _amount The amount of source tokens to swap\\n    /// @param _sourceCurrency The source currency to swap from\\n    /// @param _targetToken The token to swap to\\n    /// @param _minTargetAmount The minimum amount of target tokens to receive\\n    /// @param _recipient The recipient of the target tokens\\n    /// @return targetReceived The amount of target tokens received\\n    function _executeSwapOut(\\n        uint256 _amount,\\n        address _sourceCurrency,\\n        address _targetToken,\\n        uint256 _minTargetAmount,\\n        address _recipient\\n    ) internal returns (uint256 targetReceived) {\\n        // No swap needed if the target token is the source token\\n        if (_targetToken == _sourceCurrency) {\\n            IERC20(_sourceCurrency).safeTransfer(_recipient, _amount);\\n            return _amount;\\n        }\\n\\n        // Find the best adapter for the swap\\n        BestAdapterSwapOutQuote memory quote = _swapOutQuoteAndPickAdapter(_amount, _targetToken, _sourceCurrency);\\n\\n        if (!quote.hasValidRoute) {\\n            revert NoValidRoute();\\n        }\\n\\n        if (quote.bestTargetAmount == 0) {\\n            revert InsufficientLiquidity();\\n        }\\n\\n        if (quote.bestTargetAmount < _minTargetAmount) {\\n            revert InsufficientReceiveAmount();\\n        }\\n\\n        _approveFundsToAdapter(quote.bestAdapter, _sourceCurrency, _amount);\\n\\n        // Emit event for selected route before execution\\n        emit SwapRouteSelected(_sourceCurrency, _targetToken, _amount, quote.bestTargetAmount, quote.bestAdapter);\\n\\n        // Execute the swap\\n        targetReceived = IGildiExchangeSwapAdapter(quote.bestAdapter).swapOut(\\n            _sourceCurrency,\\n            _targetToken,\\n            _amount,\\n            _minTargetAmount,\\n            _recipient,\\n            quote.bestQuoteData\\n        );\\n\\n        if (targetReceived < _minTargetAmount) {\\n            revert SwapOutFailed();\\n        }\\n\\n        // Emit event for successful swap execution\\n        emit SwapExecuted(\\n            _sourceCurrency,\\n            _targetToken,\\n            _amount,\\n            targetReceived,\\n            _recipient,\\n            quote.bestAdapter,\\n            quote.bestQuoteRoute\\n        );\\n\\n        return targetReceived;\\n    }\\n\\n    function _returnLeftoverPurchaseSource(address _sourceToken, uint256 _amount, bool _isNative) internal {\\n        if (_isNative) {\\n            _unwrapNative(_amount);\\n            Address.sendValue(payable(msg.sender), _amount);\\n        } else {\\n            IERC20(_sourceToken).safeTransfer(msg.sender, _amount);\\n        }\\n    }\\n\\n    function _collectAndWrapNative(uint256 _sourceMaxAmount) internal {\\n        if (!getPurchaseAllowNative() || getWrappedNative() == address(0)) {\\n            revert NativeNotAllowed();\\n        }\\n        if (msg.value != _sourceMaxAmount) {\\n            revert IncorrectMsgValue();\\n        }\\n        IWNative(getWrappedNative()).deposit{value: _sourceMaxAmount}();\\n    }\\n\\n    function _unwrapNative(uint256 _amount) internal {\\n        IWNative(getWrappedNative()).withdraw(_amount);\\n    }\\n\\n    /// @dev Must pick the best aggregator adapter among available ones.\\n    ///      Can be overriden to implement custom logic.\\n    /// @param _sourceToken The token to swap from.\\n    /// @param _marketplaceAmount The amount of marketplace tokens needed.\\n    /// @return bestAdapter The chosen adapter.\\n    /// @return sourceNeeded The amount of _sourceToken required.\\n    /// @return quoteData The data to pass to bestAdapter.swapIn(...).\\n    function _swapInQuoteAndPickAdapter(\\n        address _sourceToken,\\n        uint256 _marketplaceAmount,\\n        uint256 _releaseId\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (\\n            IGildiExchangeSwapAdapter bestAdapter,\\n            uint256 sourceNeeded,\\n            bytes memory quoteData,\\n            IGildiExchangeSwapAdapter.QuoteRoute memory quoteRoute\\n        )\\n    {\\n        IGildiExchangeSwapAdapter[] memory adapters = getAdapters();\\n        address marketplaceToken = getMarketplaceToken(_releaseId);\\n\\n        if (adapters.length == 0) {\\n            revert NoAdapters();\\n        }\\n\\n        uint256 bestNeeded = type(uint256).max;\\n        bytes memory bestData;\\n        IGildiExchangeSwapAdapter.QuoteRoute memory bestQuoteRoute;\\n        bool anyValidRouteExists = false;\\n        bool insufficientLiquidity = false;\\n\\n        for (uint256 i = 0; i < adapters.length; i++) {\\n            IGildiExchangeSwapAdapter.SwapInQuote memory quote = adapters[i].quoteSwapIn(\\n                _sourceToken,\\n                marketplaceToken,\\n                _marketplaceAmount\\n            );\\n\\n            if (quote.validRoute) {\\n                anyValidRouteExists = true;\\n\\n                if (quote.sourceTokenRequired == 0) {\\n                    // Valid route exists but has insufficient liquidity\\n                    insufficientLiquidity = true;\\n                } else if (quote.sourceTokenRequired < bestNeeded) {\\n                    // Found a better route with sufficient liquidity\\n                    bestNeeded = quote.sourceTokenRequired;\\n                    bestAdapter = adapters[i];\\n                    bestData = quote.rawQuoteData;\\n                    bestQuoteRoute = quote.quoteRoute;\\n                }\\n            }\\n        }\\n\\n        if (address(bestAdapter) == address(0)) {\\n            // No adapter found with sufficient liquidity\\n            if (anyValidRouteExists && insufficientLiquidity) {\\n                // Valid routes exist but all have insufficient liquidity\\n                revert InsufficientLiquidity();\\n            } else {\\n                // No valid route exists between these tokens\\n                revert NoValidRoute();\\n            }\\n        }\\n        return (bestAdapter, bestNeeded, bestData, bestQuoteRoute);\\n    }\\n\\n    /// @dev Estimates the amount of `_sourceToken` required to get `_amount` of `_targetToken` and returns the current best route.\\n    /// @param _amount The amount of the target token.\\n    /// @param _targetToken The target token.\\n    /// @param _sourceToken The source token.\\n    /// @return quote The quote.\\n    function _swapOutQuoteAndPickAdapter(\\n        uint256 _amount,\\n        address _targetToken,\\n        address _sourceToken\\n    ) internal view virtual returns (BestAdapterSwapOutQuote memory quote) {\\n        IGildiExchangeSwapAdapter[] memory adapters = getAdapters();\\n\\n        quote.bestTargetAmount = 0;\\n\\n        /* uint256 targetTokenOut;\\n        bytes rawQuoteData;\\n        QuoteRoute quoteRoute;\\n        bool validRoute;*/\\n        for (uint256 i = 0; i < adapters.length; i++) {\\n            try adapters[i].quoteSwapOut(_sourceToken, _targetToken, _amount) returns (\\n                IGildiExchangeSwapAdapter.SwapOutQuote memory swapOutQuote\\n            ) {\\n                if (swapOutQuote.validRoute) {\\n                    if (swapOutQuote.targetTokenOut > quote.bestTargetAmount || !quote.hasValidRoute) {\\n                        // Better route found with non-zero output\\n                        quote.bestTargetAmount = swapOutQuote.targetTokenOut;\\n                        quote.bestAdapter = address(adapters[i]);\\n                        quote.bestQuoteData = swapOutQuote.rawQuoteData;\\n                        quote.bestQuoteRoute = swapOutQuote.quoteRoute;\\n                        quote.hasValidRoute = true;\\n                    }\\n                }\\n            } catch {\\n                // Skip this adapter if it reverts\\n                continue;\\n            }\\n        }\\n    }\\n\\n    /// @dev Attempts to refund leftover marketplace tokens by swapping them back to the original source token\\n    /// @dev Falls back to direct transfer of marketplace token if the swap fails\\n    /// @param _sourceToken The marketplace token address\\n    /// @param _amount The amount of marketplace tokens to refund\\n    /// @param _targetToken The destination token (original source token)\\n    /// @param _recipient The recipient address who will receive the tokens\\n    function _refundReleaseMarketplaceToken(\\n        address _sourceToken,\\n        uint256 _amount,\\n        address _targetToken,\\n        address _recipient\\n    ) internal {\\n        IERC20 sourceToken = IERC20(_sourceToken);\\n\\n        if (_targetToken == _sourceToken) {\\n            sourceToken.safeTransfer(_recipient, _amount);\\n            return;\\n        }\\n\\n        // Try swap out\\n        BestAdapterSwapOutQuote memory quote = _swapOutQuoteAndPickAdapter(_amount, _targetToken, _sourceToken);\\n\\n        bool swapExecuted = false;\\n\\n        if (quote.hasValidRoute && quote.bestTargetAmount > 0) {\\n            // Emit event for selected route before execution\\n            emit SwapRouteSelected(_sourceToken, _targetToken, _amount, quote.bestTargetAmount, quote.bestAdapter);\\n\\n            _approveFundsToAdapter(quote.bestAdapter, _sourceToken, _amount);\\n            try\\n                IGildiExchangeSwapAdapter(quote.bestAdapter).swapOut(\\n                    _sourceToken,\\n                    _targetToken,\\n                    _amount,\\n                    0,\\n                    _recipient,\\n                    quote.bestQuoteData\\n                )\\n            returns (uint256 targetReceived) {\\n                if (targetReceived > 0) {\\n                    // Emit events for successful swap\\n                    emit SwapExecuted(\\n                        _sourceToken,\\n                        _targetToken,\\n                        _amount,\\n                        targetReceived,\\n                        _recipient,\\n                        quote.bestAdapter,\\n                        quote.bestQuoteRoute\\n                    );\\n                    swapExecuted = true;\\n                }\\n            } catch {\\n                _approveFundsToAdapter(quote.bestAdapter, _sourceToken, 0);\\n            }\\n        }\\n\\n        if (!swapExecuted) {\\n            sourceToken.safeTransfer(_recipient, _amount);\\n            emit MarketplaceLeftoverReturned(_sourceToken, _recipient, _amount, false, address(0), 0);\\n        }\\n    }\\n\\n    // --- Public Functions ---\\n\\n    // --- Getters ---\\n    function getGildiExchange() public view returns (IGildiExchange) {\\n        return _getStorage().gildiExchange;\\n    }\\n\\n    /// @notice Returns the active marketplace token address for a given release or the default marketplace token.\\n    /// @param _releaseId Optional release ID to get the specific token for, or 0 for default\\n    /// @return The marketplace token address to use for the specified release\\n    function getMarketplaceToken(uint256 _releaseId) public view returns (address) {\\n        IGildiExchange exchange = getGildiExchange();\\n        return exchange.getActiveMarketplaceReleaseAsset(_releaseId);\\n    }\\n\\n    function getPurchaseAllowNative() public view returns (bool) {\\n        return _getStorage().purchaseAllowNative;\\n    }\\n\\n    function getWrappedNative() public view returns (address) {\\n        return _getStorage().wrappedNative;\\n    }\\n\\n    function getAdapters() public view returns (IGildiExchangeSwapAdapter[] memory) {\\n        return _getStorage().adapters;\\n    }\\n\\n    function isPurchaseTokenAllowed(address _token) public view returns (bool) {\\n        return _getStorage().isPurchaseTokenAllowed[_token];\\n    }\\n\\n    function getAllowedPurchaseTokens() public view returns (address[] memory) {\\n        return _getStorage().allowedPurchaseTokens;\\n    }\\n\\n    /// @inheritdoc IGildiExchangePaymentAggregator\\n    function swapOut(\\n        uint256 _amount,\\n        address _sourceCurrency,\\n        address _targetToken,\\n        uint256 _minTargetAmount,\\n        address _recipient\\n    ) public virtual returns (uint256 targetReceived) {\\n        // First, validate if we have a valid route\\n        (bool hasValidRoute, uint256 expectedAmount, ) = previewSwapOut(_amount, _sourceCurrency, _targetToken);\\n        if (!hasValidRoute || expectedAmount < _minTargetAmount) {\\n            revert NoValidRoute();\\n        }\\n\\n        // Transfer source tokens from the sender to this contract\\n        IERC20(_sourceCurrency).safeTransferFrom(_msgSender(), address(this), _amount);\\n\\n        // Execute the swap out\\n        return _executeSwapOut(_amount, _sourceCurrency, _targetToken, _minTargetAmount, _recipient);\\n    }\\n\\n    /// @inheritdoc IGildiExchangePaymentAggregator\\n    function purchase(\\n        uint256 _releaseId,\\n        uint256 _amount,\\n        address _sourceToken,\\n        uint256 _sourceMaxAmount\\n    ) public payable returns (uint256 amountUsdSpent) {\\n        // 1) Get required marketplace token amount.\\n        (uint256 requiredSourceAmount, address releaseCurrency, ) = getGildiExchange().quotePricePreview(\\n            _releaseId,\\n            _amount,\\n            msg.sender\\n        );\\n\\n        // 2) Collect user\\u2019s source tokens.\\n        bool isNative = _sourceToken == address(0);\\n        if (isNative) {\\n            _collectAndWrapNative(_sourceMaxAmount);\\n            _sourceToken = getWrappedNative();\\n        } else {\\n            _collectPurchaseToken(_sourceToken, _sourceMaxAmount);\\n        }\\n\\n        uint256 sourceSpent = 0;\\n\\n        if (_sourceToken != releaseCurrency) {\\n            // 3) Pick the best adapter.\\n            (\\n                IGildiExchangeSwapAdapter bestAdapter,\\n                uint256 sourceNeeded,\\n                bytes memory quoteData,\\n\\n            ) = _swapInQuoteAndPickAdapter(_sourceToken, requiredSourceAmount, _releaseId);\\n            if (sourceNeeded > _sourceMaxAmount) {\\n                revert NotEnoughSourceTokensForBestRoute();\\n            }\\n\\n            // 4) Transfer funds to the adapter.\\n            _approveFundsToAdapter(address(bestAdapter), _sourceToken, _sourceMaxAmount);\\n\\n            // 5) Execute the swap.\\n            sourceSpent = bestAdapter.swapIn(\\n                _sourceToken,\\n                releaseCurrency,\\n                _sourceMaxAmount,\\n                requiredSourceAmount,\\n                address(this),\\n                quoteData\\n            );\\n            if (sourceSpent > _sourceMaxAmount) {\\n                revert SlippageExceeded();\\n            }\\n        }\\n\\n        // 6) Approve and call purchase.\\n        _approveMarketplaceIfNeeded(releaseCurrency, requiredSourceAmount);\\n        (uint256 releaseMarketplaceTokenSpent, uint256 actualUsdSpent) = getGildiExchange().purchase(\\n            _releaseId,\\n            _amount,\\n            requiredSourceAmount,\\n            _msgSender(),\\n            true\\n        );\\n        if (_sourceToken == releaseCurrency) {\\n            sourceSpent = releaseMarketplaceTokenSpent;\\n        }\\n\\n        // 7) Refund leftover tokens.\\n        if (sourceSpent < _sourceMaxAmount) {\\n            _returnLeftoverPurchaseSource(_sourceToken, _sourceMaxAmount - sourceSpent, isNative);\\n        }\\n\\n        // 8) Try swap back unspent release marketplace token\\n        if (releaseMarketplaceTokenSpent < requiredSourceAmount && _sourceToken != releaseCurrency) {\\n            _refundReleaseMarketplaceToken(\\n                releaseCurrency,\\n                requiredSourceAmount - releaseMarketplaceTokenSpent,\\n                _sourceToken,\\n                msg.sender\\n            );\\n        }\\n\\n        return actualUsdSpent;\\n    }\\n\\n    /// @inheritdoc IGildiExchangePaymentAggregator\\n    function estimatePurchase(\\n        uint256 _releaseId,\\n        uint256 _amount,\\n        address _buyer,\\n        address _sourceToken\\n    )\\n        public\\n        view\\n        virtual\\n        returns (\\n            uint256 sourceNeeded,\\n            address releaseCurrency,\\n            IGildiExchangeSwapAdapter.QuoteRoute memory quoteRoute,\\n            uint256 totalPriceUsd\\n        )\\n    {\\n        if (_sourceToken == address(0)) {\\n            _sourceToken = getWrappedNative();\\n        }\\n\\n        IGildiExchange gildiExchange = getGildiExchange();\\n        (uint256 requiredAmount, address requiredAmountCurrency, uint256 usdPrice) = gildiExchange.quotePricePreview(\\n            _releaseId,\\n            _amount,\\n            _buyer\\n        );\\n\\n        if (_sourceToken == requiredAmountCurrency) {\\n            return (\\n                requiredAmount,\\n                requiredAmountCurrency,\\n                IGildiExchangeSwapAdapter.QuoteRoute({\\n                    marketplaceAdapter: address(0),\\n                    route: new address[](0),\\n                    fees: new uint128[](0),\\n                    amounts: new uint128[](0),\\n                    virtualAmountsWithoutSlippage: new uint128[](0)\\n                }),\\n                usdPrice\\n            );\\n        }\\n\\n        (, sourceNeeded, , quoteRoute) = _swapInQuoteAndPickAdapter(_sourceToken, requiredAmount, _releaseId);\\n\\n        return (sourceNeeded, requiredAmountCurrency, quoteRoute, usdPrice);\\n    }\\n\\n    /// @notice Previews a swap out operation to check if there's a valid route and estimate the output amount.\\n    /// @param _amount The amount of source tokens to swap.\\n    /// @param _sourceCurrency The address of the source token.\\n    /// @param _targetToken The token to swap to.\\n    /// @return hasValidRoute Whether there's a valid route for the swap.\\n    /// @return expectedTargetAmount The expected amount of target tokens to receive.\\n    /// @return bestRoute The best route for the swap.\\n    function previewSwapOut(\\n        uint256 _amount,\\n        address _sourceCurrency,\\n        address _targetToken\\n    )\\n        public\\n        view\\n        virtual\\n        returns (\\n            bool hasValidRoute,\\n            uint256 expectedTargetAmount,\\n            IGildiExchangeSwapAdapter.QuoteRoute memory bestRoute\\n        )\\n    {\\n        // No swap needed if the target token is the source token\\n        if (_targetToken == _sourceCurrency) {\\n            return (\\n                false,\\n                _amount,\\n                IGildiExchangeSwapAdapter.QuoteRoute({\\n                    marketplaceAdapter: address(0),\\n                    route: new address[](0),\\n                    fees: new uint128[](0),\\n                    amounts: new uint128[](0),\\n                    virtualAmountsWithoutSlippage: new uint128[](0)\\n                })\\n            );\\n        }\\n\\n        // Check for adapters\\n        IGildiExchangeSwapAdapter[] memory adapters = getAdapters();\\n        if (adapters.length == 0) {\\n            return (\\n                false,\\n                0,\\n                IGildiExchangeSwapAdapter.QuoteRoute({\\n                    marketplaceAdapter: address(0),\\n                    route: new address[](0),\\n                    fees: new uint128[](0),\\n                    amounts: new uint128[](0),\\n                    virtualAmountsWithoutSlippage: new uint128[](0)\\n                })\\n            );\\n        }\\n\\n        BestAdapterSwapOutQuote memory quote = _swapOutQuoteAndPickAdapter(_amount, _targetToken, _sourceCurrency);\\n        expectedTargetAmount = quote.bestTargetAmount;\\n        bestRoute = quote.bestQuoteRoute;\\n        hasValidRoute = quote.hasValidRoute;\\n    }\\n}\\n\",\"keccak256\":\"0x16b0be310b6111aa5689ce720fb59ce582f9cb856ae408565eb3d86ba3f9e135\",\"license\":\"UNLICENSED\"},\"contracts/marketplace/exchange/GildiExchangePaymentBaseUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\nimport '../../interfaces/external/IWNative.sol';\\nimport '../../interfaces/marketplace/exchange/IGildiExchange.sol';\\nimport '../../interfaces/marketplace/exchange/IGildiExchangeSwapAdapter.sol';\\nimport './GildiExchangePaymentBaseCore.sol';\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {ReentrancyGuardUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol';\\nimport {ContextUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\n/// @title GildiExchangePaymentBaseUpgradeable\\n/// @notice Abstract upgradeable base contract implementing the payment flow for the marketplace.\\n/// @dev Inherits from Initializable, ContextUpgradeable, OwnableUpgradeable, and ReentrancyGuardUpgradeable.\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\nabstract contract GildiExchangePaymentBaseUpgradeable is\\n    GildiExchangePaymentBaseCore,\\n    Initializable,\\n    ContextUpgradeable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    // keccak256(abi.encode(uint256(keccak256(\\\"gildi.storage.GildiExchangePaymentBase\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant GildiExchangePaymentBaseStorageLocation =\\n        0x29b67bb007a31b15dbc8250e7a602c4b79c971e992017fd3dae3b054f8ae4e00;\\n\\n    /// @notice Initializes the upgradeable contract.\\n    /// @param _gildiExchange The address of the Gildi Exchange.\\n    /// @param _initialDefaultAdmin The address of the initial default admin.\\n    /// @param _initialContractAdmin The address of the initial contract admin.\\n    function __GildiExchangePaymentBase_init(\\n        address _gildiExchange,\\n        address _initialDefaultAdmin,\\n        address _initialContractAdmin\\n    ) internal onlyInitializing {\\n        __GildiExchangePaymentBase_init_unchained(_gildiExchange, _initialDefaultAdmin, _initialContractAdmin);\\n    }\\n\\n    /// @notice Performs unchained initialization for the upgradeable contract.\\n    /// @param _gildiExchange The address of the Gildi Exchange.\\n    /// @param _initialDefaultAdmin The address of the initial default admin.\\n    /// @param _initialContractAdmin The address of the initial contract admin.\\n    function __GildiExchangePaymentBase_init_unchained(\\n        address _gildiExchange,\\n        address _initialDefaultAdmin,\\n        address _initialContractAdmin\\n    ) internal onlyInitializing {\\n        __ReentrancyGuard_init();\\n        __AccessControl_init();\\n        GildiExchangePaymentBaseStorage storage s = _getGildiExchangePaymentBaseStorage();\\n        s.gildiExchange = IGildiExchange(_gildiExchange);\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _initialDefaultAdmin);\\n        _grantRole(ADMIN_ROLE, _initialContractAdmin);\\n    }\\n\\n    //----- Admin Functions -----\\n\\n    /// @notice Sets whether native payments are allowed for purchases.\\n    /// @param _allow True if native payments are enabled.\\n    function setPurchaseAllowNative(bool _allow) public onlyRole(ADMIN_ROLE) {\\n        super._setPurchaseAllowNative(_allow);\\n    }\\n\\n    /// @notice Sets the allowed purchase status for a given source token.\\n    /// @param _token The address of the token.\\n    /// @param _allowed True to allow the token.\\n    function setAllowedPurchaseToken(address _token, bool _allowed) external onlyRole(ADMIN_ROLE) {\\n        super._setAllowedPurchaseToken(_token, _allowed);\\n    }\\n\\n    /// @notice Adds a new aggregator/DEX adapter.\\n    /// @param _adapter The adapter to add.\\n    function addAdapter(IGildiExchangeSwapAdapter _adapter) external onlyRole(ADMIN_ROLE) {\\n        super._addAdapter(_adapter);\\n    }\\n\\n    /// @notice Removes an adapter by instance.\\n    /// @param adapter The adapter instance to remove.\\n    function removeAdapter(IGildiExchangeSwapAdapter adapter) external onlyRole(ADMIN_ROLE) {\\n        super._removeAdapter(adapter);\\n    }\\n\\n    /// @notice Sets the wrapped native token address.\\n    /// @param _wnative The address of the wrapped native token.\\n    function setWrappedNative(address _wnative) external onlyRole(ADMIN_ROLE) {\\n        super._setWrappedNative(_wnative);\\n    }\\n\\n    /// @notice Removes an adapter by its index.\\n    /// @param index The index of the adapter to remove.\\n    function removeAdapter(uint256 index) external onlyRole(ADMIN_ROLE) {\\n        super._removeAdapter(index);\\n    }\\n\\n    //----- Internal Storage Getter -----\\n\\n    /// @dev Returns the storage pointer for unstructured storage.\\n    function _getStorage() internal pure override returns (GildiExchangePaymentBaseStorage storage) {\\n        return _getGildiExchangePaymentBaseStorage();\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        override(GildiExchangePaymentBaseCore, ContextUpgradeable)\\n        returns (address sender)\\n    {\\n        return super._msgSender();\\n    }\\n\\n    /// @dev Internal function to retrieve the storage struct from a fixed slot.\\n    /// @return $ The storage pointer.\\n    function _getGildiExchangePaymentBaseStorage() private pure returns (GildiExchangePaymentBaseStorage storage $) {\\n        assembly {\\n            $.slot := GildiExchangePaymentBaseStorageLocation\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb8ad31e6c1b21ac3514d27f42c84a7b1f2f5b8ed72d31de2edc2afc30fe6141b\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608080604052346100b9577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081549060ff8260401c166100aa57506001600160401b036002600160401b031982821601610065575b604051612fc59081620000bf8239f35b6001600160401b031990911681179091556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1388080610055565b63f92ee8a960e01b8152600490fd5b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a71461144e5750806313636c40146113e7578063248a9ca3146113ad5780632591cf7e146112d55780632f2ff15d1461128a57806336568abe146112425780633dccbfc5146111ea5780634bee3c6f14610fa057806352cb60ca14610f7b578063545ac70d14610edc578063585cd34b14610db85780635bbbef3614610d8657806360d54d4114610d5057806375b238fc14610d1557806384b248cc14610cdf5780638742003414610cad57806391d1485414610c575780639242ac4d14610c24578063a217fddf14610c08578063a4ed81b314610b35578063b82e16e314610a74578063c08afa11146103ca578063d547741f1461037b578063e861e90714610345578063f212578f146103145763f8c8765e1461013f57600080fd5b34610311576080366003190112610311576101586114e9565b6101606114d3565b6101686114a7565b6101706114bd565b917ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009384549360ff8560401c16159467ffffffffffffffff811680159081610309575b60011490816102ff575b1590816102f6575b506102e45767ffffffffffffffff198116600117875561027f946102719361026b92886102c5575b506101f6612e6e565b6101fe612e6e565b610206612e6e565b61020e612e6e565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005561023a612e6e565b600080516020612f7083398151915280546001600160a01b0319166001600160a01b03909216919091179055612126565b506121c6565b5061027a612967565b612544565b610287575080f35b68ff00000000000000001981541690557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a180f35b68ffffffffffffffffff191668010000000000000001178955386101ed565b60405163f92ee8a960e01b8152600490fd5b905015386101c5565b303b1591506101bd565b8791506101b3565b80fd5b5034610311576020366003190112610311576020610333600435611abd565b6040516001600160a01b039091168152f35b5034610311578060031936011261031157600080516020612eb0833981519152546040516001600160a01b039091168152602090f35b5034610311576040366003190112610311576103c660043561039b6114d3565b90808452600080516020612f508339815191526020526103c1600160408620015461202e565b61230f565b5080f35b506080366003190112610311576103df6114a7565b600080516020612f708339815191525460405163d6d6254960e01b815260048035908201526024803590820152336044820152908290606090839060649082906001600160a01b03165afa8015610a695784928591610a33575b506001600160a01b03841693846109f15750905060ff600080516020612f708339815191525460a01c161580156109d1575b6109bf5760643534036109ad57600080516020612eb083398151915280546001600160a01b031685813b1561031157604051630d0e30db60e41b81529182906004908290606435905af1801561097957610996575b50548492916001600160a01b03909116905b92938493906001600160a01b03828116908416036108a5575b600080516020612f7083398151915254604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201819052916020908290604490829088165afa90811561078f57879161086a575b50851161079a575b50604060018060a01b03600080516020612f70833981519152541660a482518098819362b9a28560e81b835260043560048401526024356024840152896044840152336064840152600160848401525af195861561078f5787958897610754575b506001600160a01b038481169084161461074d575b6064358110610616575b50506020955082841080610600575b6105e3575b8585604051908152f35b6105f16105f7943394611a9a565b90612a34565b388080806105d9565b506001600160a01b0382811690821614156105d4565b61062290606435611a9a565b9061073057600080516020612eb08339815191525487906001600160a01b0316803b1561072c57818091602460405180948193632e1a7d4d60e01b83528860048401525af1801561072157610709575b50508047106106e9578680808093335af13d156106e0573d61069381611b73565b906106a16040519283611655565b8152809760203d92013e5b156106bd57602095505b38806105c5565b85518690156106ce57602081519101fd5b60405163d6bda27560e01b8152600490fd5b606096506106ac565b60405163cf47918160e01b81524760048201526024810191909152604490fd5b610712906115d7565b61071d578638610672565b8680fd5b6040513d84823e3d90fd5b5080fd5b6020965061074890336001600160a01b038516612d70565b6106b6565b50846105bb565b955095506040853d604011610787575b8161077160409383611655565b8101031261071d576020855195015195386105a6565b3d9150610764565b6040513d89823e3d90fd5b60405160208101916020600063095ea7b360e01b9485815283602486015281196044860152604485526107cc8561161d565b845190826001600160a01b038a165af16000513d82610845575b5050156107f5575b5050610545565b61083d9261082e916040519160208301526024820152600060448201526044815261081f8161161d565b6001600160a01b038616612d14565b6001600160a01b038416612d14565b3880806107ee565b90915061086257506001600160a01b0385163b15155b38806107e6565b60011461085b565b9650506020863d60201161089d575b8161088660209383611655565b8101031261089857848896519061053d565b600080fd5b3d9150610879565b935093506108b66004358383611da5565b5095919060643510610984578695602091610907916108e46064356001600160a01b03808516908916612da9565b6040519889809481936312601ff160e31b8352308b6064358b8d60048801611a5e565b03926001600160a01b03165af1948515610979578695610945575b5084606435106109335785936104eb565b604051638199f5f360e01b8152600490fd5b9094506020813d602011610971575b8161096160209383611655565b8101031261089857519338610922565b3d9150610954565b6040513d88823e3d90fd5b6040516303baa8b560e61b8152600490fd5b6109a49095919392956115d7565b939091386104c0565b6040516326ea953d60e01b8152600490fd5b6040516320f2ada960e11b8152600490fd5b50600080516020612eb0833981519152546001600160a01b03161561046b565b6109fc60ff916119dd565b541615610a1a5790849291610a156064353033886125b3565b6104d2565b604051634f85a0e360e11b815260048101859052602490fd5b9050610a5891925060603d606011610a62575b610a508183611655565b8101906116b6565b5091909138610439565b503d610a46565b6040513d86823e3d90fd5b50346103115780600319360112610311576040518091600080516020612f1083398151915290815480845260208094019081938352600080516020612ed083398151915290835b818110610b185750505084610ad1910385611655565b60405193838594850191818652518092526040850193925b828110610af857505050500390f35b83516001600160a01b031685528695509381019392810192600101610ae9565b82546001600160a01b031684529286019260019283019201610abb565b50346103115780600319360112610311576040518091600080516020612ef0833981519152908154808452602080940190819383527f685bee2f432a88d68bec8e47b0c5e34915fc950db830614bd33d8bd5246ddba190835b818110610beb5750505084610ba4910385611655565b60405193838594850191818652518092526040850193925b828110610bcb57505050500390f35b83516001600160a01b031685528695509381019392810192600101610bbc565b82546001600160a01b031684529286019260019283019201610b8e565b5034610311578060031936011261031157602090604051908152f35b5034610311578060031936011261031157602060ff600080516020612f708339815191525460a01c166040519015158152f35b50346103115760403660031901126103115760ff6040602092610c786114d3565b6004358252600080516020612f5083398151915285528282206001600160a01b03909116825284522054604051911615158152f35b503461031157602036600319011261031157600435801515810361072c57610cdc90610cd7611fb4565b6129ca565b80f35b5034610311578060031936011261031157600080516020612f70833981519152546040516001600160a01b039091168152602090f35b503461031157806003193601126103115760206040517fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758152f35b5034610311576020366003190112610311576004356001600160a01b038116810361072c57610cdc90610d81611fb4565b6127fb565b503461031157602036600319011261031157602060ff610dac610da76114e9565b6119dd565b54166040519015158152f35b50346103115760208060031936011261072c576001600160a01b0360043581811690819003610ed857610de9611fb4565b600080516020612f108339815191525490845b828110610e07578580f35b83610e1182612061565b919054600392831b1c168314610e2a5750600101610dfc565b9391947fdf980d21d8c7bb34800e668dbe003299093bac8e693614151d3c57f73f98a93d9195604051908152a16000198201918211610ec457818403610e80575b50505050610e776120d5565b38808080808580f35b610eb992610e90610e9c93612061565b9054911b1c1692612061565b819391549060031b9160018060a01b03809116831b921b19161790565b905538808080610e6b565b634e487b7160e01b85526011600452602485fd5b8380fd5b50346103115760a03660031901126103115760043590610efa6114d3565b610f026114a7565b6001600160a01b03926084359260643592918585168503610311575082610f2a83838961185a565b50919015918215610f71575b5050610f5f5785610f52602097610f57973090339086166125b3565b61263d565b604051908152f35b6040516317813d4560e01b8152600490fd5b1090508338610f36565b503461031157602036600319011261031157610cdc610f986114e9565b61027a611fb4565b503461031157604036600319011261031157610fba6114e9565b60249060243591821515928381036111e657610fd4611fb4565b156110b357509060ff610fe6836119dd565b54161561101a575b600080516020612f30833981519152916040915b82516001600160a01b0390921682526020820152a180f35b600080516020612ef0833981519152805490600160401b82101561109f579161108061105e836040956001600080516020612f308339815191529896019055612092565b815491926001600160a01b0386811660039390931b92831b921b199092161790565b905561108b826119dd565b600160ff1982541617905591509150610fee565b634e487b7160e01b85526041600452602485fd5b60ff6110be836119dd565b54166110de575b50604090600080516020612f3083398151915292611002565b916110e8826119dd565b805460ff19169055600080516020612ef083398151915280546001600160a01b038481169590929190875b828110611126575b5050505050916110c5565b8461113082612092565b919054600392831b1c1689146111495750600101611113565b95969750600094939419928381019081116111d357610e9c8561116e61117b93612092565b9054908a1b1c1692612092565b905583549081156111c15750916040959391600080516020612f3083398151915297959301926111aa84612092565b81939154921b1b191690555590913880808061111b565b634e487b7160e01b8952603160045288fd5b634e487b7160e01b8a526011600452828afd5b8480fd5b50346103115760603660031901126103115761123e61121b61120a6114d3565b6112126114a7565b9060043561185a565b60409391935193849315158452602084015260606040840152606083019061153c565b0390f35b50346103115760403660031901126103115761125c6114d3565b336001600160a01b03821603611278576103c69060043561230f565b60405163334bd91960e11b8152600490fd5b5034610311576040366003190112610311576103c66004356112aa6114d3565b90808452600080516020612f508339815191526020526112d0600160408620015461202e565b612288565b5034610311576020366003190112610311576004356112f2611fb4565b600080516020612f10833981519152548082101561139b576020907fdf980d21d8c7bb34800e668dbe003299093bac8e693614151d3c57f73f98a93d61133784612061565b905460405160039290921b1c6001600160a01b0390811682529390a160001981019081116113875761137d9161136f610e9c92612061565b90549060031b1c1692612061565b9055610cdc6120d5565b634e487b7160e01b84526011600452602484fd5b604051631390f2a160e01b8152600490fd5b503461031157602036600319011261031157600160406020926004358152600080516020612f508339815191528452200154604051908152f35b50346103115760803660031901126103115761144461141b6114076114a7565b61140f6114bd565b906024356004356116f0565b919390604051948594855260018060a01b0316602085015260806040850152608084019061153c565b9060608301520390f35b90503461072c57602036600319011261072c5760043563ffffffff60e01b81168091036114a35760209250637965db0b60e01b8114908115611492575b5015158152f35b6301ffc9a760e01b1490503861148b565b8280fd5b604435906001600160a01b038216820361089857565b606435906001600160a01b038216820361089857565b602435906001600160a01b038216820361089857565b600435906001600160a01b038216820361089857565b90815180825260208080930193019160005b82811061151f575050505090565b83516001600160801b031685529381019392810192600101611511565b80516001600160a01b03908116835260208083015160a0828601819052815190860181905260c08601969593929182019160005b8281106115c157505050505060806115ad61159b6115be9596604086015185820360408701526114ff565b606085015184820360608601526114ff565b9201519060808184039101526114ff565b90565b8351851689529781019792810192600101611570565b67ffffffffffffffff81116115eb57604052565b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff8211176115eb57604052565b6080810190811067ffffffffffffffff8211176115eb57604052565b6020810190811067ffffffffffffffff8211176115eb57604052565b90601f8019910116810190811067ffffffffffffffff8211176115eb57604052565b6040519061168482611601565b60606080836000815282602082015282604082015282808201520152565b51906001600160a01b038216820361089857565b908160609103126108985780519160406116d2602084016116a2565b92015190565b67ffffffffffffffff81116115eb5760051b60200190565b909161176694936116ff611677565b506001600160a01b039181831615611841575b600080516020612f70833981519152546040805163d6d6254960e01b81526004810187905260248101979097526001600160a01b039092166044870152949690946060918891851690829081906064820190565b03915afa9384156118375760009260009760009661180c575b50808816908316146117a15750906117979291611da5565b9492505093929190565b949250508351936117b185611639565b6000855280516117c081611639565b600081528151906117d082611639565b600082528251926117e084611639565b600084528051976117f089611601565b6000895260208901528701526060860152608085015293929190565b919350945061182b91965060603d606011610a6257610a508183611655565b9691929096943861177f565b513d6000823e3d90fd5b600080516020612eb08339815191525483169150611712565b9291611864611677565b506001600160a01b03938185168386161461197257604080518081600080516020612f1083398151915298895480845260208094019160009b8c52600080516020612ed0833981519152948c915b83831061195657505050506118c992500382611655565b51156118f057506118db939450612392565b60208101519060806060820151910151151592565b939250505081519161190183611639565b838352805161190f81611639565b84815281519061191e82611639565b85825282519261192d84611639565b86845280519561193c87611601565b878752602087015285015260608401526080830152829190565b86548116855260019687019688965094820194909201916118b2565b9350505060409081519161198583611639565b600090818452805161199681611639565b8281528151906119a582611639565b8382528251926119b484611639565b8484528051966119c388611601565b858852602088015286015260608501526080840152929190565b6001600160a01b031660009081527f29b67bb007a31b15dbc8250e7a602c4b79c971e992017fd3dae3b054f8ae4e046020526040902090565b60005b838110611a295750506000910152565b8181015183820152602001611a19565b90602091611a5281518092818552858086019101611a16565b601f01601f1916010190565b929360c0946115be97969260018060a01b0394858092168752166020860152604085015260608401521660808201528160a08201520190611a39565b91908203918211611aa757565b634e487b7160e01b600052601160045260246000fd5b600080516020612f7083398151915254604051636c493fa160e11b81526004810192909252602090829060249082906001600160a01b03165afa908115611b3d57600091611b09575090565b90506020813d602011611b35575b81611b2460209383611655565b81010312610898576115be906116a2565b3d9150611b17565b6040513d6000823e3d90fd5b8051821015611b5d5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b67ffffffffffffffff81116115eb57601f01601f191660200190565b9080601f8301121561089857815190602091611baa816116d8565b93611bb86040519586611655565b81855260208086019260051b82010192831161089857602001905b828210611be1575050505090565b81516001600160801b0381168103610898578152908301908301611bd3565b6020808284031261089857815167ffffffffffffffff9283821161089857019060808285031261089857604080519460808601868110868211176115eb578252835186528284015185811161089857840181601f8201121561089857805190611c6882611b73565b91611c7585519384611655565b8083528386828401011161089857611c9291868085019101611a16565b83870152818401518581116108985784019060a08282031261089857825193611cba85611601565b611cc3836116a2565b8552808301518781116108985783019082601f8301121561089857815191611cea836116d8565b92611cf787519485611655565b808452828085019160051b830101918583116108985783809101915b838310611d8d5750505050850152828201518681116108985781611d38918401611b8f565b8385015260608201518681116108985781611d54918401611b8f565b6060850152608082015195861161089857606095611d729201611b8f565b60808301528401520151801515810361089857606082015290565b8190611d98846116a2565b8152019101908390611d13565b9190600092611db2611677565b5060405192838094600080516020612f108339815191529060208254918281520191600052600080516020612ed08339815191529060005b818110611f9257505050611e099291611e04910386611655565b611abd565b835115611f805760001995606090611e1f611677565b9060009760009860005b8951811015611f3a57611e8b60008a6001600160a01b03611e4a858f611b49565b51604051631ccfbc4f60e01b81526001600160a01b03808f1660048301528d1660248201526044810193909352919384929190911690829081906064820190565b03915afa908115611b3d57600091611f17575b506060810151611eb2575b50600101611e29565b91509960019180518015600014611ed1575050506001819a5b90611ea9565b8d819d939d10611ee6575b5050600190611ecb565b9c509550935090506001600160a01b03611f00848a611b49565b511690600160406020870151960151949038611edc565b611f3491503d806000833e611f2c8183611655565b810190611c00565b38611e9e565b5094509450945094509460018060a01b03831615611f5a57505093929190565b81611f78575b5015610f5f5760405163bb55fd2760e01b8152600490fd5b905081611f60565b6040516376866e3360e01b8152600490fd5b82546001600160a01b0316845288945060209093019260019283019201611dea565b3360009081527fb16e88c42fd4e48df2dd6a2eabd6bc9aec654ec170056b470819f8892cc6431c60205260409020547fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217759060ff16156120105750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b80600052600080516020612f5083398151915260205260406000203360005260205260ff60406000205416156120105750565b600080516020612f108339815191528054821015611b5d57600052600080516020612ed08339815191520190600090565b600080516020612ef08339815191528054821015611b5d576000527f685bee2f432a88d68bec8e47b0c5e34915fc950db830614bd33d8bd5246ddba10190600090565b600080516020612f10833981519152805480156121105760001901906120fa82612061565b81549060018060a01b039060031b1b1916905555565b634e487b7160e01b600052603160045260246000fd5b6001600160a01b031660008181527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d6020526040812054909190600080516020612f508339815191529060ff166121c1578280526020526040822081835260205260408220600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b505090565b6001600160a01b031660008181527fb16e88c42fd4e48df2dd6a2eabd6bc9aec654ec170056b470819f8892cc6431c60205260408120549091907fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177590600080516020612f508339815191529060ff16612282578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b50505090565b90600091808352600080516020612f5083398151915280602052604084209260018060a01b03169283855260205260ff60408520541615600014612282578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b90600091808352600080516020612f5083398151915280602052604084209260018060a01b03169283855260205260ff60408520541660001461228257818452602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b6040519193926123a183611601565b6000835260006020840152606060408401526123bb611677565b6060840152600060808401528294604051958687600080516020612f1083398151915260208154938481520190600052600080516020612ed08339815191529260005b81811061252257505061241392500388611655565b6000602086015260005b8751811015612519576001906001600160a01b0361243b828b611b49565b5160405163156e586360e11b81526001600160a01b03888116600483015287166024820152604481018990529160009183916064918391165afa600091816124fc575b5061248b57505b0161241d565b606081015161249b575b50612485565b8051906020890151821180156124f0575b6124b7575b50612495565b60409160208a0152838060a01b036124cf848d611b49565b511689526020810151828a01520151606088015281608088015238806124b1565b506080890151156124ac565b6125129192503d806000833e611f2c8183611655565b903861247e565b50955050505050565b84546001600160a01b031683526001948501948c9450602090930192016123fe565b600080516020612eb0833981519152805490916001600160a01b0390811690821681146125ae577f141c8827a0e1bf1f8e0a0f1d0b4fce811fd3b387abb10419267afc2b7458377692816020936bffffffffffffffffffffffff60a01b16179055604051908152a1565b505050565b6040516323b872dd60e01b60208201526001600160a01b0392831660248201529290911660448301526064820192909252612604916125ff82608481015b03601f198101845283611655565b612d14565b565b90815260208101919091526001600160a01b0391821660408201529116606082015260a0608082018190526115be9291019061153c565b92936001600160a01b0380841694818416949093909290918686146127e957612667838587612392565b92608084015115610f5f5760208401908151156127d757898251106127c557868a92818588511690612699918c612da9565b5186516040805184815260208101939093529086166001600160a01b03168282015297908b908b908060608101037eca6e73aca46e0ddb95d988d9ed12ccb9c0a8fee020318f9c1367fb575443fc91a3848751169288880151878a519e8f958695634ad2cad760e11b8752600487019561271296611a5e565b03815a602094600091f19889156127ba57600099612786575b50881061277557928261276f9260608a967fccad6e02c54518d4498d41df1a13ae7b76100987b53410e79190eed4660822cf98965116920151925195869586612606565b0390a390565b835163015c439d60e21b8152600490fd5b90986020823d6020116127b2575b816127a160209383611655565b81010312610311575051973861272b565b3d9150612794565b85513d6000823e3d90fd5b60405163d83fd56f60e01b8152600490fd5b60405163bb55fd2760e01b8152600490fd5b5092955050506115be92508391612d70565b600090600080516020612f108339815191528054925b6040805180868252602080920185600052600080516020612ed083398151915260005b89811061294a57505081612849910382611655565b518310156128d557905185815260008481526001600160a01b03928391859180850191600080516020612ed0833981519152915b8b82106128b557505050926128988161289d94950382611655565b611b49565b5116908416146128af57600101612811565b50505050565b60019295839295509381948754168152019401920191869286949261287d565b5050509091600160401b8110156115eb577fcf9c2c7f9adbb156bd76affb04df84595f8f5e69cab2e61221b05b05a902fa269261291d82602094600161293f95019055612061565b81546001600160a01b0393841694929360039290921b85811b92901b19161790565b9055604051908152a1565b81546001600160a01b031683529184019160019182019101612834565b600080516020612f70833981519152805460ff8160a01c1615156001146129c65760ff60a01b1916600160a01b179055604051600181527f61fc8ba2723b8e5549ddaf194062961ae4398bf7c9db7e332a16ac936707cf2c90602090a1565b5050565b600080516020612f7083398151915290815490151560ff8260a01c16151581146125ae5760ff60a01b1990911660a082901b60ff60a01b16179091556040519081527f61fc8ba2723b8e5549ddaf194062961ae4398bf7c9db7e332a16ac936707cf2c90602090a1565b6001600160a01b0380821694929390929183821691828714612d065790612a5b9186612392565b906000916080810151151580612cf9575b612ad9575b505015612a7e5750505050565b8260a092612aae7ff9d082f0aef9f7627e1314708c9f0a8f2b3acf5b3feec8790b2017b16472869a958488612d70565b604051921682526020820152600060408201526000606082015260006080820152a2388080806128af565b6020818101518251604080518a8152808501939093529088166001600160a01b0316828201529391928792909181908b907eca6e73aca46e0ddb95d988d9ed12ccb9c0a8fee020318f9c1367fb575443fc90606090a3612b3d89848451168c612da9565b8987612b90868c878751168a880151918c8c51809681958294634ad2cad760e11b84528b60048501528c602485015260448401528360648401528d8a16608484015260c060a484015260c4830190611a39565b03925af1899181612cbe575b50612c555750505050511691805191808301938160008b63095ea7b360e01b9788815284602489015282604489015260448852612bd88861161d565b828851925af16000513d82612c39575b505015612bfd575b50505050505b3880612a71565b612c2f94612c2993519283015260248201526000604482015260448152612c238161161d565b88612d14565b86612d14565b3880808080612bf0565b909150612c4d5750893b15155b3880612be8565b600114612c46565b93919550935082959195612c6f575b505050505050612bf6565b7fccad6e02c54518d4498d41df1a13ae7b76100987b53410e79190eed4660822cf94959650908160608a612cae94511691015191519485948c86612606565b0390a36001388583828080612c64565b93509394955050508481813d8311612cf2575b612cdb8183611655565b8101031261071d5787899493928c92519038612b9c565b503d612cd1565b5060208101511515612a6c565b505050905061260492612d70565b906000602091828151910182855af115611b3d576000513d612d6757506001600160a01b0381163b155b612d455750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b60011415612d3e565b60405163a9059cbb60e01b60208201526001600160a01b0390921660248301526044820192909252612604916125ff82606481016125f1565b60405163095ea7b360e01b60208083018281526001600160a01b03861660248501526044808501979097529583529094919391600090612dea606487611655565b85519082865af16000513d82612e49575b505015612e085750505050565b612e40936125ff9160405191602083015260018060a01b031660248201526000604482015260448152612e3a8161161d565b82612d14565b388080806128af565b909150612e6657506001600160a01b0382163b15155b3880612dfb565b600114612e5f565b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c1615612e9d57565b604051631afcd79f60e31b8152600490fdfe29b67bb007a31b15dbc8250e7a602c4b79c971e992017fd3dae3b054f8ae4e016c7e8d030f530c774f3a6dd2421a053a4f87dbee12eeeb19716eeafac718564e29b67bb007a31b15dbc8250e7a602c4b79c971e992017fd3dae3b054f8ae4e0329b67bb007a31b15dbc8250e7a602c4b79c971e992017fd3dae3b054f8ae4e02bb9f8b65acf4c7b7609ee42e01734bfd2dca87d2dba521cffe793a4553e94c6b02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680029b67bb007a31b15dbc8250e7a602c4b79c971e992017fd3dae3b054f8ae4e00a26469706673582212205bd638d2e9a034d7175f17c3947752547f9df934e399f4cf3c31cda4334b9e4b64736f6c63430008180033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a71461144e5750806313636c40146113e7578063248a9ca3146113ad5780632591cf7e146112d55780632f2ff15d1461128a57806336568abe146112425780633dccbfc5146111ea5780634bee3c6f14610fa057806352cb60ca14610f7b578063545ac70d14610edc578063585cd34b14610db85780635bbbef3614610d8657806360d54d4114610d5057806375b238fc14610d1557806384b248cc14610cdf5780638742003414610cad57806391d1485414610c575780639242ac4d14610c24578063a217fddf14610c08578063a4ed81b314610b35578063b82e16e314610a74578063c08afa11146103ca578063d547741f1461037b578063e861e90714610345578063f212578f146103145763f8c8765e1461013f57600080fd5b34610311576080366003190112610311576101586114e9565b6101606114d3565b6101686114a7565b6101706114bd565b917ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009384549360ff8560401c16159467ffffffffffffffff811680159081610309575b60011490816102ff575b1590816102f6575b506102e45767ffffffffffffffff198116600117875561027f946102719361026b92886102c5575b506101f6612e6e565b6101fe612e6e565b610206612e6e565b61020e612e6e565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005561023a612e6e565b600080516020612f7083398151915280546001600160a01b0319166001600160a01b03909216919091179055612126565b506121c6565b5061027a612967565b612544565b610287575080f35b68ff00000000000000001981541690557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a180f35b68ffffffffffffffffff191668010000000000000001178955386101ed565b60405163f92ee8a960e01b8152600490fd5b905015386101c5565b303b1591506101bd565b8791506101b3565b80fd5b5034610311576020366003190112610311576020610333600435611abd565b6040516001600160a01b039091168152f35b5034610311578060031936011261031157600080516020612eb0833981519152546040516001600160a01b039091168152602090f35b5034610311576040366003190112610311576103c660043561039b6114d3565b90808452600080516020612f508339815191526020526103c1600160408620015461202e565b61230f565b5080f35b506080366003190112610311576103df6114a7565b600080516020612f708339815191525460405163d6d6254960e01b815260048035908201526024803590820152336044820152908290606090839060649082906001600160a01b03165afa8015610a695784928591610a33575b506001600160a01b03841693846109f15750905060ff600080516020612f708339815191525460a01c161580156109d1575b6109bf5760643534036109ad57600080516020612eb083398151915280546001600160a01b031685813b1561031157604051630d0e30db60e41b81529182906004908290606435905af1801561097957610996575b50548492916001600160a01b03909116905b92938493906001600160a01b03828116908416036108a5575b600080516020612f7083398151915254604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201819052916020908290604490829088165afa90811561078f57879161086a575b50851161079a575b50604060018060a01b03600080516020612f70833981519152541660a482518098819362b9a28560e81b835260043560048401526024356024840152896044840152336064840152600160848401525af195861561078f5787958897610754575b506001600160a01b038481169084161461074d575b6064358110610616575b50506020955082841080610600575b6105e3575b8585604051908152f35b6105f16105f7943394611a9a565b90612a34565b388080806105d9565b506001600160a01b0382811690821614156105d4565b61062290606435611a9a565b9061073057600080516020612eb08339815191525487906001600160a01b0316803b1561072c57818091602460405180948193632e1a7d4d60e01b83528860048401525af1801561072157610709575b50508047106106e9578680808093335af13d156106e0573d61069381611b73565b906106a16040519283611655565b8152809760203d92013e5b156106bd57602095505b38806105c5565b85518690156106ce57602081519101fd5b60405163d6bda27560e01b8152600490fd5b606096506106ac565b60405163cf47918160e01b81524760048201526024810191909152604490fd5b610712906115d7565b61071d578638610672565b8680fd5b6040513d84823e3d90fd5b5080fd5b6020965061074890336001600160a01b038516612d70565b6106b6565b50846105bb565b955095506040853d604011610787575b8161077160409383611655565b8101031261071d576020855195015195386105a6565b3d9150610764565b6040513d89823e3d90fd5b60405160208101916020600063095ea7b360e01b9485815283602486015281196044860152604485526107cc8561161d565b845190826001600160a01b038a165af16000513d82610845575b5050156107f5575b5050610545565b61083d9261082e916040519160208301526024820152600060448201526044815261081f8161161d565b6001600160a01b038616612d14565b6001600160a01b038416612d14565b3880806107ee565b90915061086257506001600160a01b0385163b15155b38806107e6565b60011461085b565b9650506020863d60201161089d575b8161088660209383611655565b8101031261089857848896519061053d565b600080fd5b3d9150610879565b935093506108b66004358383611da5565b5095919060643510610984578695602091610907916108e46064356001600160a01b03808516908916612da9565b6040519889809481936312601ff160e31b8352308b6064358b8d60048801611a5e565b03926001600160a01b03165af1948515610979578695610945575b5084606435106109335785936104eb565b604051638199f5f360e01b8152600490fd5b9094506020813d602011610971575b8161096160209383611655565b8101031261089857519338610922565b3d9150610954565b6040513d88823e3d90fd5b6040516303baa8b560e61b8152600490fd5b6109a49095919392956115d7565b939091386104c0565b6040516326ea953d60e01b8152600490fd5b6040516320f2ada960e11b8152600490fd5b50600080516020612eb0833981519152546001600160a01b03161561046b565b6109fc60ff916119dd565b541615610a1a5790849291610a156064353033886125b3565b6104d2565b604051634f85a0e360e11b815260048101859052602490fd5b9050610a5891925060603d606011610a62575b610a508183611655565b8101906116b6565b5091909138610439565b503d610a46565b6040513d86823e3d90fd5b50346103115780600319360112610311576040518091600080516020612f1083398151915290815480845260208094019081938352600080516020612ed083398151915290835b818110610b185750505084610ad1910385611655565b60405193838594850191818652518092526040850193925b828110610af857505050500390f35b83516001600160a01b031685528695509381019392810192600101610ae9565b82546001600160a01b031684529286019260019283019201610abb565b50346103115780600319360112610311576040518091600080516020612ef0833981519152908154808452602080940190819383527f685bee2f432a88d68bec8e47b0c5e34915fc950db830614bd33d8bd5246ddba190835b818110610beb5750505084610ba4910385611655565b60405193838594850191818652518092526040850193925b828110610bcb57505050500390f35b83516001600160a01b031685528695509381019392810192600101610bbc565b82546001600160a01b031684529286019260019283019201610b8e565b5034610311578060031936011261031157602090604051908152f35b5034610311578060031936011261031157602060ff600080516020612f708339815191525460a01c166040519015158152f35b50346103115760403660031901126103115760ff6040602092610c786114d3565b6004358252600080516020612f5083398151915285528282206001600160a01b03909116825284522054604051911615158152f35b503461031157602036600319011261031157600435801515810361072c57610cdc90610cd7611fb4565b6129ca565b80f35b5034610311578060031936011261031157600080516020612f70833981519152546040516001600160a01b039091168152602090f35b503461031157806003193601126103115760206040517fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758152f35b5034610311576020366003190112610311576004356001600160a01b038116810361072c57610cdc90610d81611fb4565b6127fb565b503461031157602036600319011261031157602060ff610dac610da76114e9565b6119dd565b54166040519015158152f35b50346103115760208060031936011261072c576001600160a01b0360043581811690819003610ed857610de9611fb4565b600080516020612f108339815191525490845b828110610e07578580f35b83610e1182612061565b919054600392831b1c168314610e2a5750600101610dfc565b9391947fdf980d21d8c7bb34800e668dbe003299093bac8e693614151d3c57f73f98a93d9195604051908152a16000198201918211610ec457818403610e80575b50505050610e776120d5565b38808080808580f35b610eb992610e90610e9c93612061565b9054911b1c1692612061565b819391549060031b9160018060a01b03809116831b921b19161790565b905538808080610e6b565b634e487b7160e01b85526011600452602485fd5b8380fd5b50346103115760a03660031901126103115760043590610efa6114d3565b610f026114a7565b6001600160a01b03926084359260643592918585168503610311575082610f2a83838961185a565b50919015918215610f71575b5050610f5f5785610f52602097610f57973090339086166125b3565b61263d565b604051908152f35b6040516317813d4560e01b8152600490fd5b1090508338610f36565b503461031157602036600319011261031157610cdc610f986114e9565b61027a611fb4565b503461031157604036600319011261031157610fba6114e9565b60249060243591821515928381036111e657610fd4611fb4565b156110b357509060ff610fe6836119dd565b54161561101a575b600080516020612f30833981519152916040915b82516001600160a01b0390921682526020820152a180f35b600080516020612ef0833981519152805490600160401b82101561109f579161108061105e836040956001600080516020612f308339815191529896019055612092565b815491926001600160a01b0386811660039390931b92831b921b199092161790565b905561108b826119dd565b600160ff1982541617905591509150610fee565b634e487b7160e01b85526041600452602485fd5b60ff6110be836119dd565b54166110de575b50604090600080516020612f3083398151915292611002565b916110e8826119dd565b805460ff19169055600080516020612ef083398151915280546001600160a01b038481169590929190875b828110611126575b5050505050916110c5565b8461113082612092565b919054600392831b1c1689146111495750600101611113565b95969750600094939419928381019081116111d357610e9c8561116e61117b93612092565b9054908a1b1c1692612092565b905583549081156111c15750916040959391600080516020612f3083398151915297959301926111aa84612092565b81939154921b1b191690555590913880808061111b565b634e487b7160e01b8952603160045288fd5b634e487b7160e01b8a526011600452828afd5b8480fd5b50346103115760603660031901126103115761123e61121b61120a6114d3565b6112126114a7565b9060043561185a565b60409391935193849315158452602084015260606040840152606083019061153c565b0390f35b50346103115760403660031901126103115761125c6114d3565b336001600160a01b03821603611278576103c69060043561230f565b60405163334bd91960e11b8152600490fd5b5034610311576040366003190112610311576103c66004356112aa6114d3565b90808452600080516020612f508339815191526020526112d0600160408620015461202e565b612288565b5034610311576020366003190112610311576004356112f2611fb4565b600080516020612f10833981519152548082101561139b576020907fdf980d21d8c7bb34800e668dbe003299093bac8e693614151d3c57f73f98a93d61133784612061565b905460405160039290921b1c6001600160a01b0390811682529390a160001981019081116113875761137d9161136f610e9c92612061565b90549060031b1c1692612061565b9055610cdc6120d5565b634e487b7160e01b84526011600452602484fd5b604051631390f2a160e01b8152600490fd5b503461031157602036600319011261031157600160406020926004358152600080516020612f508339815191528452200154604051908152f35b50346103115760803660031901126103115761144461141b6114076114a7565b61140f6114bd565b906024356004356116f0565b919390604051948594855260018060a01b0316602085015260806040850152608084019061153c565b9060608301520390f35b90503461072c57602036600319011261072c5760043563ffffffff60e01b81168091036114a35760209250637965db0b60e01b8114908115611492575b5015158152f35b6301ffc9a760e01b1490503861148b565b8280fd5b604435906001600160a01b038216820361089857565b606435906001600160a01b038216820361089857565b602435906001600160a01b038216820361089857565b600435906001600160a01b038216820361089857565b90815180825260208080930193019160005b82811061151f575050505090565b83516001600160801b031685529381019392810192600101611511565b80516001600160a01b03908116835260208083015160a0828601819052815190860181905260c08601969593929182019160005b8281106115c157505050505060806115ad61159b6115be9596604086015185820360408701526114ff565b606085015184820360608601526114ff565b9201519060808184039101526114ff565b90565b8351851689529781019792810192600101611570565b67ffffffffffffffff81116115eb57604052565b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff8211176115eb57604052565b6080810190811067ffffffffffffffff8211176115eb57604052565b6020810190811067ffffffffffffffff8211176115eb57604052565b90601f8019910116810190811067ffffffffffffffff8211176115eb57604052565b6040519061168482611601565b60606080836000815282602082015282604082015282808201520152565b51906001600160a01b038216820361089857565b908160609103126108985780519160406116d2602084016116a2565b92015190565b67ffffffffffffffff81116115eb5760051b60200190565b909161176694936116ff611677565b506001600160a01b039181831615611841575b600080516020612f70833981519152546040805163d6d6254960e01b81526004810187905260248101979097526001600160a01b039092166044870152949690946060918891851690829081906064820190565b03915afa9384156118375760009260009760009661180c575b50808816908316146117a15750906117979291611da5565b9492505093929190565b949250508351936117b185611639565b6000855280516117c081611639565b600081528151906117d082611639565b600082528251926117e084611639565b600084528051976117f089611601565b6000895260208901528701526060860152608085015293929190565b919350945061182b91965060603d606011610a6257610a508183611655565b9691929096943861177f565b513d6000823e3d90fd5b600080516020612eb08339815191525483169150611712565b9291611864611677565b506001600160a01b03938185168386161461197257604080518081600080516020612f1083398151915298895480845260208094019160009b8c52600080516020612ed0833981519152948c915b83831061195657505050506118c992500382611655565b51156118f057506118db939450612392565b60208101519060806060820151910151151592565b939250505081519161190183611639565b838352805161190f81611639565b84815281519061191e82611639565b85825282519261192d84611639565b86845280519561193c87611601565b878752602087015285015260608401526080830152829190565b86548116855260019687019688965094820194909201916118b2565b9350505060409081519161198583611639565b600090818452805161199681611639565b8281528151906119a582611639565b8382528251926119b484611639565b8484528051966119c388611601565b858852602088015286015260608501526080840152929190565b6001600160a01b031660009081527f29b67bb007a31b15dbc8250e7a602c4b79c971e992017fd3dae3b054f8ae4e046020526040902090565b60005b838110611a295750506000910152565b8181015183820152602001611a19565b90602091611a5281518092818552858086019101611a16565b601f01601f1916010190565b929360c0946115be97969260018060a01b0394858092168752166020860152604085015260608401521660808201528160a08201520190611a39565b91908203918211611aa757565b634e487b7160e01b600052601160045260246000fd5b600080516020612f7083398151915254604051636c493fa160e11b81526004810192909252602090829060249082906001600160a01b03165afa908115611b3d57600091611b09575090565b90506020813d602011611b35575b81611b2460209383611655565b81010312610898576115be906116a2565b3d9150611b17565b6040513d6000823e3d90fd5b8051821015611b5d5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b67ffffffffffffffff81116115eb57601f01601f191660200190565b9080601f8301121561089857815190602091611baa816116d8565b93611bb86040519586611655565b81855260208086019260051b82010192831161089857602001905b828210611be1575050505090565b81516001600160801b0381168103610898578152908301908301611bd3565b6020808284031261089857815167ffffffffffffffff9283821161089857019060808285031261089857604080519460808601868110868211176115eb578252835186528284015185811161089857840181601f8201121561089857805190611c6882611b73565b91611c7585519384611655565b8083528386828401011161089857611c9291868085019101611a16565b83870152818401518581116108985784019060a08282031261089857825193611cba85611601565b611cc3836116a2565b8552808301518781116108985783019082601f8301121561089857815191611cea836116d8565b92611cf787519485611655565b808452828085019160051b830101918583116108985783809101915b838310611d8d5750505050850152828201518681116108985781611d38918401611b8f565b8385015260608201518681116108985781611d54918401611b8f565b6060850152608082015195861161089857606095611d729201611b8f565b60808301528401520151801515810361089857606082015290565b8190611d98846116a2565b8152019101908390611d13565b9190600092611db2611677565b5060405192838094600080516020612f108339815191529060208254918281520191600052600080516020612ed08339815191529060005b818110611f9257505050611e099291611e04910386611655565b611abd565b835115611f805760001995606090611e1f611677565b9060009760009860005b8951811015611f3a57611e8b60008a6001600160a01b03611e4a858f611b49565b51604051631ccfbc4f60e01b81526001600160a01b03808f1660048301528d1660248201526044810193909352919384929190911690829081906064820190565b03915afa908115611b3d57600091611f17575b506060810151611eb2575b50600101611e29565b91509960019180518015600014611ed1575050506001819a5b90611ea9565b8d819d939d10611ee6575b5050600190611ecb565b9c509550935090506001600160a01b03611f00848a611b49565b511690600160406020870151960151949038611edc565b611f3491503d806000833e611f2c8183611655565b810190611c00565b38611e9e565b5094509450945094509460018060a01b03831615611f5a57505093929190565b81611f78575b5015610f5f5760405163bb55fd2760e01b8152600490fd5b905081611f60565b6040516376866e3360e01b8152600490fd5b82546001600160a01b0316845288945060209093019260019283019201611dea565b3360009081527fb16e88c42fd4e48df2dd6a2eabd6bc9aec654ec170056b470819f8892cc6431c60205260409020547fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217759060ff16156120105750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b80600052600080516020612f5083398151915260205260406000203360005260205260ff60406000205416156120105750565b600080516020612f108339815191528054821015611b5d57600052600080516020612ed08339815191520190600090565b600080516020612ef08339815191528054821015611b5d576000527f685bee2f432a88d68bec8e47b0c5e34915fc950db830614bd33d8bd5246ddba10190600090565b600080516020612f10833981519152805480156121105760001901906120fa82612061565b81549060018060a01b039060031b1b1916905555565b634e487b7160e01b600052603160045260246000fd5b6001600160a01b031660008181527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d6020526040812054909190600080516020612f508339815191529060ff166121c1578280526020526040822081835260205260408220600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b505090565b6001600160a01b031660008181527fb16e88c42fd4e48df2dd6a2eabd6bc9aec654ec170056b470819f8892cc6431c60205260408120549091907fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177590600080516020612f508339815191529060ff16612282578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b50505090565b90600091808352600080516020612f5083398151915280602052604084209260018060a01b03169283855260205260ff60408520541615600014612282578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b90600091808352600080516020612f5083398151915280602052604084209260018060a01b03169283855260205260ff60408520541660001461228257818452602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b6040519193926123a183611601565b6000835260006020840152606060408401526123bb611677565b6060840152600060808401528294604051958687600080516020612f1083398151915260208154938481520190600052600080516020612ed08339815191529260005b81811061252257505061241392500388611655565b6000602086015260005b8751811015612519576001906001600160a01b0361243b828b611b49565b5160405163156e586360e11b81526001600160a01b03888116600483015287166024820152604481018990529160009183916064918391165afa600091816124fc575b5061248b57505b0161241d565b606081015161249b575b50612485565b8051906020890151821180156124f0575b6124b7575b50612495565b60409160208a0152838060a01b036124cf848d611b49565b511689526020810151828a01520151606088015281608088015238806124b1565b506080890151156124ac565b6125129192503d806000833e611f2c8183611655565b903861247e565b50955050505050565b84546001600160a01b031683526001948501948c9450602090930192016123fe565b600080516020612eb0833981519152805490916001600160a01b0390811690821681146125ae577f141c8827a0e1bf1f8e0a0f1d0b4fce811fd3b387abb10419267afc2b7458377692816020936bffffffffffffffffffffffff60a01b16179055604051908152a1565b505050565b6040516323b872dd60e01b60208201526001600160a01b0392831660248201529290911660448301526064820192909252612604916125ff82608481015b03601f198101845283611655565b612d14565b565b90815260208101919091526001600160a01b0391821660408201529116606082015260a0608082018190526115be9291019061153c565b92936001600160a01b0380841694818416949093909290918686146127e957612667838587612392565b92608084015115610f5f5760208401908151156127d757898251106127c557868a92818588511690612699918c612da9565b5186516040805184815260208101939093529086166001600160a01b03168282015297908b908b908060608101037eca6e73aca46e0ddb95d988d9ed12ccb9c0a8fee020318f9c1367fb575443fc91a3848751169288880151878a519e8f958695634ad2cad760e11b8752600487019561271296611a5e565b03815a602094600091f19889156127ba57600099612786575b50881061277557928261276f9260608a967fccad6e02c54518d4498d41df1a13ae7b76100987b53410e79190eed4660822cf98965116920151925195869586612606565b0390a390565b835163015c439d60e21b8152600490fd5b90986020823d6020116127b2575b816127a160209383611655565b81010312610311575051973861272b565b3d9150612794565b85513d6000823e3d90fd5b60405163d83fd56f60e01b8152600490fd5b60405163bb55fd2760e01b8152600490fd5b5092955050506115be92508391612d70565b600090600080516020612f108339815191528054925b6040805180868252602080920185600052600080516020612ed083398151915260005b89811061294a57505081612849910382611655565b518310156128d557905185815260008481526001600160a01b03928391859180850191600080516020612ed0833981519152915b8b82106128b557505050926128988161289d94950382611655565b611b49565b5116908416146128af57600101612811565b50505050565b60019295839295509381948754168152019401920191869286949261287d565b5050509091600160401b8110156115eb577fcf9c2c7f9adbb156bd76affb04df84595f8f5e69cab2e61221b05b05a902fa269261291d82602094600161293f95019055612061565b81546001600160a01b0393841694929360039290921b85811b92901b19161790565b9055604051908152a1565b81546001600160a01b031683529184019160019182019101612834565b600080516020612f70833981519152805460ff8160a01c1615156001146129c65760ff60a01b1916600160a01b179055604051600181527f61fc8ba2723b8e5549ddaf194062961ae4398bf7c9db7e332a16ac936707cf2c90602090a1565b5050565b600080516020612f7083398151915290815490151560ff8260a01c16151581146125ae5760ff60a01b1990911660a082901b60ff60a01b16179091556040519081527f61fc8ba2723b8e5549ddaf194062961ae4398bf7c9db7e332a16ac936707cf2c90602090a1565b6001600160a01b0380821694929390929183821691828714612d065790612a5b9186612392565b906000916080810151151580612cf9575b612ad9575b505015612a7e5750505050565b8260a092612aae7ff9d082f0aef9f7627e1314708c9f0a8f2b3acf5b3feec8790b2017b16472869a958488612d70565b604051921682526020820152600060408201526000606082015260006080820152a2388080806128af565b6020818101518251604080518a8152808501939093529088166001600160a01b0316828201529391928792909181908b907eca6e73aca46e0ddb95d988d9ed12ccb9c0a8fee020318f9c1367fb575443fc90606090a3612b3d89848451168c612da9565b8987612b90868c878751168a880151918c8c51809681958294634ad2cad760e11b84528b60048501528c602485015260448401528360648401528d8a16608484015260c060a484015260c4830190611a39565b03925af1899181612cbe575b50612c555750505050511691805191808301938160008b63095ea7b360e01b9788815284602489015282604489015260448852612bd88861161d565b828851925af16000513d82612c39575b505015612bfd575b50505050505b3880612a71565b612c2f94612c2993519283015260248201526000604482015260448152612c238161161d565b88612d14565b86612d14565b3880808080612bf0565b909150612c4d5750893b15155b3880612be8565b600114612c46565b93919550935082959195612c6f575b505050505050612bf6565b7fccad6e02c54518d4498d41df1a13ae7b76100987b53410e79190eed4660822cf94959650908160608a612cae94511691015191519485948c86612606565b0390a36001388583828080612c64565b93509394955050508481813d8311612cf2575b612cdb8183611655565b8101031261071d5787899493928c92519038612b9c565b503d612cd1565b5060208101511515612a6c565b505050905061260492612d70565b906000602091828151910182855af115611b3d576000513d612d6757506001600160a01b0381163b155b612d455750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b60011415612d3e565b60405163a9059cbb60e01b60208201526001600160a01b0390921660248301526044820192909252612604916125ff82606481016125f1565b60405163095ea7b360e01b60208083018281526001600160a01b03861660248501526044808501979097529583529094919391600090612dea606487611655565b85519082865af16000513d82612e49575b505015612e085750505050565b612e40936125ff9160405191602083015260018060a01b031660248201526000604482015260448152612e3a8161161d565b82612d14565b388080806128af565b909150612e6657506001600160a01b0382163b15155b3880612dfb565b600114612e5f565b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c1615612e9d57565b604051631afcd79f60e31b8152600490fdfe29b67bb007a31b15dbc8250e7a602c4b79c971e992017fd3dae3b054f8ae4e016c7e8d030f530c774f3a6dd2421a053a4f87dbee12eeeb19716eeafac718564e29b67bb007a31b15dbc8250e7a602c4b79c971e992017fd3dae3b054f8ae4e0329b67bb007a31b15dbc8250e7a602c4b79c971e992017fd3dae3b054f8ae4e02bb9f8b65acf4c7b7609ee42e01734bfd2dca87d2dba521cffe793a4553e94c6b02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680029b67bb007a31b15dbc8250e7a602c4b79c971e992017fd3dae3b054f8ae4e00a26469706673582212205bd638d2e9a034d7175f17c3947752547f9df934e399f4cf3c31cda4334b9e4b64736f6c63430008180033",
  "devdoc": {
    "author": "Gildi Company",
    "custom:security-contact": "security@gildi.io",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "FailedCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "IncorrectMsgValue()": [
        {
          "details": "Emitted when the msg.value does not match the expected amount."
        }
      ],
      "IndexOutOfRange()": [
        {
          "details": "Emitted when an index is out of bounds."
        }
      ],
      "InsufficientBalance(uint256,uint256)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "InsufficientLiquidity()": [
        {
          "details": "Emitted when there is insufficient liquidity for a swap."
        }
      ],
      "InsufficientReceiveAmount()": [
        {
          "details": "Emitted when the received amount is less than the required minimum."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NativeNotAllowed()": [
        {
          "details": "Emitted when native currency is not allowed for purchase."
        }
      ],
      "NoAdapters()": [
        {
          "details": "Emitted when there are no swap adapters configured."
        }
      ],
      "NoValidRoute()": [
        {
          "details": "Emitted when no valid route is found for a swap."
        }
      ],
      "NotEnoughSourceTokensForBestRoute()": [
        {
          "details": "Emitted when there are not enough source tokens for the best route."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "PurchaseTokenNotAllowed(address)": [
        {
          "details": "Emitted when a token is not allowed for purchase.",
          "params": {
            "token": "The token that is not allowed."
          }
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ],
      "SlippageExceeded()": [
        {
          "details": "Emitted when slippage exceeds the limit."
        }
      ],
      "SwapOutFailed()": [
        {
          "details": "Emitted when a swap operation fails."
        }
      ]
    },
    "events": {
      "AdapterAdded(address)": {
        "params": {
          "adapter": "The adapter that was added."
        }
      },
      "AdapterRemoved(address)": {
        "params": {
          "adapter": "The adapter that was removed."
        }
      },
      "AllowedSwapInTokenSet(address,bool)": {
        "params": {
          "allowed": "Whether the token is allowed for swap-in.",
          "token": "The token address."
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "PurchaseAllowNativeSet(bool)": {
        "params": {
          "allow": "Whether native payments are allowed."
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "SourceTokenSet(address,bool)": {
        "params": {
          "allowed": "Whether the token is allowed as a source.",
          "token": "The token address."
        }
      },
      "SwapExecuted(address,address,uint256,uint256,address,address,(address,address[],uint128[],uint128[],uint128[]))": {
        "params": {
          "adapter": "The adapter used for the swap.",
          "recipient": "The address that received the target tokens.",
          "route": "The detailed routing information used for the swap.",
          "sourceAmount": "The amount of source tokens swapped.",
          "sourceToken": "The address of the source token.",
          "targetAmount": "The amount of target tokens received.",
          "targetToken": "The address of the target token."
        }
      },
      "SwapRouteSelected(address,address,uint256,uint256,address)": {
        "params": {
          "amount": "The amount to be swapped.",
          "expectedOutput": "The expected output amount.",
          "selectedAdapter": "The address of the selected adapter for the route.",
          "sourceToken": "The starting token for the swap.",
          "targetToken": "The desired output token."
        }
      },
      "WrappedNativeSet(address)": {
        "params": {
          "wnative": "The wrapped native token address."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addAdapter(address)": {
        "params": {
          "_adapter": "The adapter to add."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "estimatePurchase(uint256,uint256,address,address)": {
        "params": {
          "_amount": "The amount of the release.",
          "_buyer": "The buyer of the release.",
          "_releaseId": "The release ID.",
          "_sourceToken": "The token to swap from."
        },
        "returns": {
          "quoteRoute": "The route of the quote.",
          "releaseCurrency": "The active martketplace currency of the release.",
          "sourceNeeded": "The amount of `_sourceToken` required.",
          "totalPriceUsd": "The total price in USD (using exchange's priceAskDecimals)."
        }
      },
      "getGildiExchange()": {
        "returns": {
          "_0": "The GildiExchange contract."
        }
      },
      "getMarketplaceToken(uint256)": {
        "params": {
          "_releaseId": "Optional release ID to get the specific token for, or 0 for default"
        },
        "returns": {
          "_0": "The marketplace token address to use for the specified release"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,address,address)": {
        "params": {
          "_gildiExchange": "The address of the Gildi Exchange.",
          "_initialContractAdmin": "The address of the initial contract admin.",
          "_initialDefaultAdmin": "The address of the initial default admin.",
          "_wNativeAddress": "The address of the wrapped native token."
        }
      },
      "previewSwapOut(uint256,address,address)": {
        "params": {
          "_amount": "The amount of source tokens to swap.",
          "_sourceCurrency": "The address of the source token.",
          "_targetToken": "The token to swap to."
        },
        "returns": {
          "bestRoute": "The best route for the swap.",
          "expectedTargetAmount": "The expected amount of target tokens to receive.",
          "hasValidRoute": "Whether there's a valid route for the swap."
        }
      },
      "purchase(uint256,uint256,address,uint256)": {
        "params": {
          "_amount": "The amount to purchase.",
          "_releaseId": "The release ID.",
          "_sourceMaxAmount": "Maximum amount of _sourceToken to spend.",
          "_sourceToken": "The token used for payment (address(0) means native)."
        },
        "returns": {
          "amountUsdSpent": "The amount spent in USD"
        }
      },
      "removeAdapter(address)": {
        "params": {
          "adapter": "The adapter instance to remove."
        }
      },
      "removeAdapter(uint256)": {
        "params": {
          "index": "The index of the adapter to remove."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setAllowedPurchaseToken(address,bool)": {
        "params": {
          "_allowed": "True to allow the token.",
          "_token": "The address of the token."
        }
      },
      "setPurchaseAllowNative(bool)": {
        "params": {
          "_allow": "True if native payments are enabled."
        }
      },
      "setWrappedNative(address)": {
        "params": {
          "_wnative": "The address of the wrapped native token."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "swapOut(uint256,address,address,uint256,address)": {
        "params": {
          "_amount": "The amount of source tokens to swap.",
          "_minTargetAmount": "The minimum amount of target tokens to receive (slippage protection).",
          "_recipient": "The recipient of the target tokens.",
          "_sourceCurrency": "The address of the source token.",
          "_targetToken": "The token to swap to."
        },
        "returns": {
          "targetReceived": "The amount of target tokens received."
        }
      }
    },
    "title": "GildiExchangePaymentAggregator",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AdapterAdded(address)": {
        "notice": "Emitted when a new swap adapter is added."
      },
      "AdapterRemoved(address)": {
        "notice": "Emitted when a swap adapter is removed."
      },
      "AllowedSwapInTokenSet(address,bool)": {
        "notice": "Emitted when a token's swap-in status is changed."
      },
      "MarketplaceLeftoverReturned(address,address,uint256,bool,address,uint256)": {
        "notice": "Emitted when a marketplace token leftover is returned."
      },
      "PurchaseAllowNativeSet(bool)": {
        "notice": "Emitted when the native payment allowance is changed."
      },
      "SourceTokenSet(address,bool)": {
        "notice": "Emitted when a token's source status is changed."
      },
      "SwapExecuted(address,address,uint256,uint256,address,address,(address,address[],uint128[],uint128[],uint128[]))": {
        "notice": "Emitted when a swap operation is executed."
      },
      "SwapRouteSelected(address,address,uint256,uint256,address)": {
        "notice": "Emitted when a swap route is selected for a transaction."
      },
      "WrappedNativeSet(address)": {
        "notice": "Emitted when the wrapped native token address is set."
      }
    },
    "kind": "user",
    "methods": {
      "addAdapter(address)": {
        "notice": "Adds a new aggregator/DEX adapter."
      },
      "estimatePurchase(uint256,uint256,address,address)": {
        "notice": "Estimates the amount of `_sourceToken` required to get `_amount` of `_releaseId` for `_buyer` of the marketplace token and returns the current best route."
      },
      "getGildiExchange()": {
        "notice": "Returns the GildiExchange contract instance."
      },
      "getMarketplaceToken(uint256)": {
        "notice": "Returns the active marketplace token address for a given release or the default marketplace token."
      },
      "initialize(address,address,address,address)": {
        "notice": "Initializes the aggregator with the exchange, marketplace token, and wrapped native token."
      },
      "previewSwapOut(uint256,address,address)": {
        "notice": "Previews a swap out operation to check if there's a valid route and estimate the output amount."
      },
      "purchase(uint256,uint256,address,uint256)": {
        "notice": "Executes the purchase payment flow."
      },
      "removeAdapter(address)": {
        "notice": "Removes an adapter by instance."
      },
      "removeAdapter(uint256)": {
        "notice": "Removes an adapter by its index."
      },
      "setAllowedPurchaseToken(address,bool)": {
        "notice": "Sets the allowed purchase status for a given source token."
      },
      "setPurchaseAllowNative(bool)": {
        "notice": "Sets whether native payments are allowed for purchases."
      },
      "setWrappedNative(address)": {
        "notice": "Sets the wrapped native token address."
      },
      "swapOut(uint256,address,address,uint256,address)": {
        "notice": "Executes a swap out operation to convert source tokens to a target token."
      }
    },
    "notice": "A generic payment adapter that aggregates multiple DEX/aggregator adapters.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}