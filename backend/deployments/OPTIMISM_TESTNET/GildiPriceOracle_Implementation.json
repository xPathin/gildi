{
  "address": "0x4e11F1AC807BC3a80A8DaC0aA6636f79f72891A8",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "AssetNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPairId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSymbol",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSymbolLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PairNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ResolverAddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SymbolTaken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "AssetDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "pairId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseAssetId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quoteAssetId",
          "type": "uint256"
        }
      ],
      "name": "PairDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseAsset",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "quoteAsset",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "ResolverAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "addAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_baseAssetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quoteAssetId",
          "type": "uint256"
        },
        {
          "internalType": "contract IGildiPriceResolver",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "name": "addPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetId",
          "type": "uint256"
        }
      ],
      "name": "deleteAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_pairId",
          "type": "bytes32"
        }
      ],
      "name": "deletePair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetId",
          "type": "uint256"
        }
      ],
      "name": "getAssetById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct IGildiPriceOracle.Asset",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAssets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct IGildiPriceOracle.Asset[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPairs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "pairId",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                }
              ],
              "internalType": "struct IGildiPriceOracle.Asset",
              "name": "baseAsset",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                }
              ],
              "internalType": "struct IGildiPriceOracle.Asset",
              "name": "quoteAsset",
              "type": "tuple"
            }
          ],
          "internalType": "struct IGildiPriceOracle.PairInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quoteAssetId",
          "type": "uint256"
        }
      ],
      "name": "getPairsByQuoteAsset",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_pairId",
          "type": "bytes32"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGildiPriceResolver.PriceData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_baseAssetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quoteAssetId",
          "type": "uint256"
        }
      ],
      "name": "getPriceById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGildiPriceResolver.PriceData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_pairId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_age",
          "type": "uint256"
        }
      ],
      "name": "getPriceNoOlderThan",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGildiPriceResolver.PriceData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_pairId",
          "type": "bytes32"
        }
      ],
      "name": "getResolver",
      "outputs": [
        {
          "internalType": "contract IGildiPriceResolver",
          "name": "resolver",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_contractAdmin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_pairId",
          "type": "bytes32"
        }
      ],
      "name": "pairExistsById",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_baseAssetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quoteAssetId",
          "type": "uint256"
        },
        {
          "internalType": "contract IGildiPriceResolver",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "name": "updateResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d0704563697a9a594f420ad8d5dc83cc6406cfd73ad0efac316b2d9cbc1969f",
  "receipt": {
    "to": null,
    "from": "0xdda45D610A204EB5CB204e9d49920F788296C676",
    "contractAddress": "0x4e11F1AC807BC3a80A8DaC0aA6636f79f72891A8",
    "transactionIndex": 4,
    "gasUsed": "2063117",
    "logsBloom": "0x
    "blockHash": "0x913ce938280fb67f10e5139cec3b8cde5b952fae5dd7ab26fa77bd7d8f1e4a70",
    "transactionHash": "0x7d0704563697a9a594f420ad8d5dc83cc6406cfd73ad0efac316b2d9cbc1969f",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 33459885,
        "transactionHash": "0x7d0704563697a9a594f420ad8d5dc83cc6406cfd73ad0efac316b2d9cbc1969f",
        "address": "0x4e11F1AC807BC3a80A8DaC0aA6636f79f72891A8",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 12,
        "blockHash": "0x913ce938280fb67f10e5139cec3b8cde5b952fae5dd7ab26fa77bd7d8f1e4a70"
      }
    ],
    "blockNumber": 33459885,
    "cumulativeGasUsed": "2659778",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5fcb370cb2b9ee0340656465635a79fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"AssetNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPairId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSymbol\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSymbolLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PairNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ResolverAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SymbolTaken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"AssetDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"pairId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAssetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteAssetId\",\"type\":\"uint256\"}],\"name\":\"PairDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseAsset\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"quoteAsset\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"ResolverAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseAssetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quoteAssetId\",\"type\":\"uint256\"},{\"internalType\":\"contract IGildiPriceResolver\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"addPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetId\",\"type\":\"uint256\"}],\"name\":\"deleteAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pairId\",\"type\":\"bytes32\"}],\"name\":\"deletePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetId\",\"type\":\"uint256\"}],\"name\":\"getAssetById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct IGildiPriceOracle.Asset\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct IGildiPriceOracle.Asset[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPairs\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"pairId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct IGildiPriceOracle.Asset\",\"name\":\"baseAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct IGildiPriceOracle.Asset\",\"name\":\"quoteAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct IGildiPriceOracle.PairInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quoteAssetId\",\"type\":\"uint256\"}],\"name\":\"getPairsByQuoteAsset\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pairId\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IGildiPriceResolver.PriceData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseAssetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quoteAssetId\",\"type\":\"uint256\"}],\"name\":\"getPriceById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IGildiPriceResolver.PriceData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pairId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"}],\"name\":\"getPriceNoOlderThan\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IGildiPriceResolver.PriceData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pairId\",\"type\":\"bytes32\"}],\"name\":\"getResolver\",\"outputs\":[{\"internalType\":\"contract IGildiPriceResolver\",\"name\":\"resolver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contractAdmin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pairId\",\"type\":\"bytes32\"}],\"name\":\"pairExistsById\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseAssetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quoteAssetId\",\"type\":\"uint256\"},{\"internalType\":\"contract IGildiPriceResolver\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"updateResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Gildi Company\",\"custom:security-contact\":\"security@gildi.io\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AssetNotFound(uint256)\":[{\"details\":\"Thrown when an asset is not found\",\"params\":{\"assetId\":\"The ID of the asset that was not found\"}}],\"IndexOutOfBounds()\":[{\"details\":\"Thrown when an index is out of bounds\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"InvalidPairId()\":[{\"details\":\"Thrown when an invalid pair ID is provided\"}],\"InvalidSymbol()\":[{\"details\":\"Thrown when a symbol contains invalid characters\"}],\"InvalidSymbolLength()\":[{\"details\":\"Thrown when a symbol length is invalid\"}],\"NotAdmin()\":[{\"details\":\"Thrown when a non-admin attempts to perform an admin-only action\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"PairNotFound()\":[{\"details\":\"Thrown when a pair is not found\"}],\"ResolverAddressZero()\":[{\"details\":\"Thrown when a resolver address is zero\"}],\"SymbolTaken()\":[{\"details\":\"Thrown when a symbol is already taken\"}]},\"events\":{\"AssetDeleted(uint256,string,string)\":{\"params\":{\"assetId\":\"The asset ID\",\"name\":\"The asset name\",\"symbol\":\"The asset symbol\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"PairDeleted(bytes32,uint256,uint256)\":{\"params\":{\"baseAssetId\":\"The base asset id\",\"pairId\":\"The pair ID\",\"quoteAssetId\":\"The quote asset id\"}},\"ResolverAdded(string,string,address)\":{\"params\":{\"baseAsset\":\"The base asset address\",\"quoteAsset\":\"The quote asset address\",\"resolver\":\"The address of the resolver contract\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addAsset(string,string)\":{\"params\":{\"_name\":\"The name of the asset\",\"_symbol\":\"The symbol of the asset\"},\"returns\":{\"_0\":\"The ID of the newly added asset\"}},\"addPair(uint256,uint256,address)\":{\"params\":{\"_baseAssetId\":\"The ID of the base asset\",\"_quoteAssetId\":\"The ID of the quote asset\",\"_resolver\":\"The resolver contract for the pair\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"deleteAsset(uint256)\":{\"params\":{\"_assetId\":\"The ID of the asset to delete\"}},\"deletePair(bytes32)\":{\"params\":{\"_pairId\":\"The ID of the pair to delete\"}},\"getAssetById(uint256)\":{\"params\":{\"_assetId\":\"The ID of the asset to retrieve\"},\"returns\":{\"_0\":\"The asset with the specified ID\"}},\"getAssets()\":{\"returns\":{\"_0\":\"An array of all assets in the registry\"}},\"getPairs()\":{\"returns\":{\"_0\":\"An array of PairInfo structs containing all registered pairs\"}},\"getPairsByQuoteAsset(uint256)\":{\"params\":{\"_quoteAssetId\":\"The ID of the quote asset to filter by\"},\"returns\":{\"_0\":\"An array of pair strings in the format \\\"BASE/QUOTE\\\"\"}},\"getPrice(bytes32)\":{\"params\":{\"pairId\":\"The identifier of the asset pair\"},\"returns\":{\"_0\":\"The price data for the asset pair\"}},\"getPriceById(uint256,uint256)\":{\"params\":{\"_baseAssetId\":\"The ID of the base asset\",\"_quoteAssetId\":\"The ID of the quote asset\"},\"returns\":{\"_0\":\"Price data for the specified asset pair\"}},\"getPriceNoOlderThan(bytes32,uint256)\":{\"params\":{\"age\":\"The maximum age of the price data in seconds\",\"pairId\":\"The identifier of the asset pair\"}},\"getResolver(bytes32)\":{\"params\":{\"_pairId\":\"The identifier of the asset pair\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address)\":{\"params\":{\"_contractAdmin\":\"The address of the contract admin\",\"_defaultAdmin\":\"The address of the default admin\"}},\"pairExistsById(bytes32)\":{\"params\":{\"_pairId\":\"The identifier of the asset pair\"},\"returns\":{\"_0\":\"True if the pair exists\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"updateResolver(uint256,uint256,address)\":{\"params\":{\"_baseAssetId\":\"The ID of the base asset\",\"_quoteAssetId\":\"The ID of the quote asset\",\"_resolver\":\"The new resolver contract for the pair\"}}},\"stateVariables\":{\"allAssets\":{\"details\":\"Store assets in an array for getAssets()\"},\"assetRegistry\":{\"details\":\"Map asset ID -> Asset\"},\"nextAssetId\":{\"details\":\"Next asset ID to be assigned\"},\"pairExists\":{\"details\":\"Mapping to track if a pair exists\"},\"pairResolvers\":{\"details\":\"Mapping from pair hash to IGildiPriceResolver implementation\"},\"pairs\":{\"details\":\"Array of all pairs\"},\"symbolToId\":{\"details\":\"Maps uppercase symbol -> assetId\"}},\"title\":\"Gildi Price Oracle\",\"version\":1},\"userdoc\":{\"events\":{\"AssetDeleted(uint256,string,string)\":{\"notice\":\"Emitted when an asset is deleted\"},\"PairDeleted(bytes32,uint256,uint256)\":{\"notice\":\"Emitted when a pair is deleted\"},\"ResolverAdded(string,string,address)\":{\"notice\":\"Emitted when a resolver is added for a pair\"}},\"kind\":\"user\",\"methods\":{\"addAsset(string,string)\":{\"notice\":\"Adds a new asset to the registry\"},\"addPair(uint256,uint256,address)\":{\"notice\":\"Add a new pair using numeric asset IDs\"},\"deleteAsset(uint256)\":{\"notice\":\"Deletes an asset and all pairs that reference it\"},\"deletePair(bytes32)\":{\"notice\":\"Deletes a pair from the oracle\"},\"getAssetById(uint256)\":{\"notice\":\"Return asset by ID\"},\"getAssets()\":{\"notice\":\"Return all registered assets\"},\"getPairs()\":{\"notice\":\"Return all pairs in the form \\\"BASE/QUOTE\\\" for direct usage\"},\"getPairsByQuoteAsset(uint256)\":{\"notice\":\"Return pairs that use a specific quote asset ID\"},\"getPrice(bytes32)\":{\"notice\":\"Retrieves the price data for a given pair ID\"},\"getPriceById(uint256,uint256)\":{\"notice\":\"Overload to get price by numeric IDs\"},\"getPriceNoOlderThan(bytes32,uint256)\":{\"notice\":\"Retrieves the price data for a given pair ID, with a maximum age\"},\"getResolver(bytes32)\":{\"notice\":\"Retrieves the resolver for a specific asset pair\"},\"initialize(address,address)\":{\"notice\":\"Initializes the contract and sets up roles\"},\"pairExistsById(bytes32)\":{\"notice\":\"Checks if a pair with the given ID exists\"},\"updateResolver(uint256,uint256,address)\":{\"notice\":\"Update the resolver for an existing pair\"}},\"notice\":\"Manages asset pairs and delegates price resolution to resolvers\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/price/GildiPriceOracle.sol\":\"GildiPriceOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x85a70e2b1b65e9ba456add364d22b97eb9944083df1c39c0b4bd6a4b5aa386a4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\\n        return INITIALIZABLE_STORAGE;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        bytes32 slot = _initializableStorageSlot();\\n        assembly {\\n            $.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x6694b63ddb2c59bbe341c846171798350e8f72fa02189fcdeaca864e28b54e1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\\n\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xbff9f59c84e5337689161ce7641c0ef8e872d6a7536fbc1f5133f128887aba3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"contracts/interfaces/oracles/price/IGildiPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\n\\npragma solidity 0.8.24;\\n\\nimport './IGildiPriceResolver.sol';\\n\\n/// @title Gildi Price Oracle Interface\\n/// @notice Interface for the consumer-facing Gildi Price Oracle\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\ninterface IGildiPriceOracle is IGildiPriceResolver {\\n    /// @notice Represents an asset in the system\\n    struct Asset {\\n        /// @dev Unique identifier for the asset\\n        uint256 id;\\n        /// @dev The asset's symbol (e.g., BTC, ETH)\\n        string symbol;\\n        /// @dev The asset's full name\\n        string name;\\n    }\\n\\n    /// @notice Information about a trading pair\\n    struct PairInfo {\\n        /// @dev Unique identifier for the pair\\n        bytes32 pairId;\\n        /// @dev The base asset in the pair\\n        Asset baseAsset;\\n        /// @dev The quote asset in the pair\\n        Asset quoteAsset;\\n    }\\n\\n    /// @dev Thrown when an invalid pair ID is provided\\n    error InvalidPairId();\\n\\n    /// @notice Adds a pair using asset IDs\\n    /// @param _baseAssetId The ID of the base asset\\n    /// @param _quoteAssetId The ID of the quote asset\\n    /// @param _resolver The resolver contract for the asset pair\\n    function addPair(uint256 _baseAssetId, uint256 _quoteAssetId, IGildiPriceResolver _resolver) external;\\n\\n    /// @notice Retrieves the resolver for a specific asset pair\\n    /// @param _pairId The identifier of the asset pair\\n    function getResolver(bytes32 _pairId) external view returns (IGildiPriceResolver resolver);\\n\\n    /// @notice Fetches a list of all registered pairs in \\\"BASE/QUOTE\\\" string form\\n    /// @return An array of registered pairs\\n    function getPairs() external view returns (PairInfo[] memory);\\n\\n    /// @notice Adds a new asset\\n    /// @param _symbol The symbol of the asset\\n    /// @param _name The name of the asset\\n    /// @return The ID of the newly added asset\\n    function addAsset(string memory _symbol, string memory _name) external returns (uint256);\\n\\n    /// @notice Returns all registered assets\\n    /// @return An array of registered assets\\n    function getAssets() external view returns (Asset[] memory);\\n\\n    /// @notice Returns an asset by ID\\n    /// @param _assetId The ID of the asset\\n    /// @return The asset details\\n    function getAssetById(uint256 _assetId) external view returns (Asset memory);\\n\\n    /// @notice Returns pairs that use the specified asset ID as quote\\n    /// @param _quoteAssetId The ID of the quote asset\\n    /// @return An array of registered pairs\\n    function getPairsByQuoteAsset(uint256 _quoteAssetId) external view returns (string[] memory);\\n\\n    /// @notice Retrieves price data by numeric IDs\\n    /// @param _baseAssetId The ID of the base asset\\n    /// @param _quoteAssetId The ID of the quote asset\\n    /// @return The price data for the asset pair\\n    function getPriceById(uint256 _baseAssetId, uint256 _quoteAssetId) external view returns (PriceData memory);\\n\\n    /// @notice Checks if a pair with the given ID exists\\n    /// @param _pairId The identifier of the asset pair\\n    /// @return True if the pair exists\\n    function pairExistsById(bytes32 _pairId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6c406a4d51283a3acb73db7da552e9d22df34f34b7f8f3f772ba04b844419ddd\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/oracles/price/IGildiPriceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\n\\npragma solidity 0.8.24;\\n\\n/// @title Gildi Price Resolver Interface\\n/// @notice Interface that all price resolvers must implement\\n/// @custom:security-contact security@gildi.io\\n/// @author Patrick Fischer\\ninterface IGildiPriceResolver {\\n    /// @notice Price data struct\\n    struct PriceData {\\n        /// @notice The price of the base asset in terms of the quote asset\\n        uint256 price;\\n        /// @notice The number of decimals for the price\\n        uint8 decimals;\\n        /// @notice The UNIX timestamp when the price was last updated\\n        uint256 timestamp;\\n    }\\n\\n    /// @notice Retrieves the price data for a given pair ID\\n    /// @param pairId The identifier of the asset pair\\n    /// @return price The price data for the asset pair\\n    function getPrice(bytes32 pairId) external view returns (PriceData memory price);\\n\\n    /// @notice Retrieves the price data for a given pair ID, with a maximum age\\n    /// @param pairId The identifier of the asset pair\\n    /// @param age The maximum age of the price data in seconds\\n    function getPriceNoOlderThan(bytes32 pairId, uint256 age) external view returns (PriceData memory priceData);\\n}\\n\",\"keccak256\":\"0x82a4c66f173ce75a38cdc50d75c806f13fe99ed53bc3f1458fb50348dcf77b75\",\"license\":\"UNLICENSED\"},\"contracts/oracles/price/GildiPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\n\\npragma solidity 0.8.24;\\n\\nimport '../../interfaces/oracles/price/IGildiPriceOracle.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\n/// @title Gildi Price Oracle\\n/// @notice Manages asset pairs and delegates price resolution to resolvers\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\ncontract GildiPriceOracle is Initializable, AccessControlUpgradeable, IGildiPriceOracle {\\n    bytes32 public constant ADMIN_ROLE = keccak256('ADMIN_ROLE');\\n\\n    /// @dev Mapping from pair hash to IGildiPriceResolver implementation\\n    mapping(bytes32 => IGildiPriceResolver) private pairResolvers;\\n\\n    // Custom Errors\\n    /// @dev Thrown when a non-admin attempts to perform an admin-only action\\n    error NotAdmin();\\n    /// @dev Thrown when a resolver address is zero\\n    error ResolverAddressZero();\\n    /// @dev Thrown when an index is out of bounds\\n    error IndexOutOfBounds();\\n    /// @dev Thrown when an asset is not found\\n    /// @param assetId The ID of the asset that was not found\\n    error AssetNotFound(uint256 assetId);\\n    /// @dev Thrown when a symbol length is invalid\\n    error InvalidSymbolLength();\\n    /// @dev Thrown when a pair is not found\\n    error PairNotFound();\\n    /// @dev Thrown when a symbol contains invalid characters\\n    error InvalidSymbol();\\n    /// @dev Thrown when a symbol is already taken\\n    error SymbolTaken();\\n\\n    // Events\\n    /// @notice Emitted when a resolver is added for a pair\\n    /// @param baseAsset The base asset address\\n    /// @param quoteAsset The quote asset address\\n    /// @param resolver The address of the resolver contract\\n    event ResolverAdded(string baseAsset, string quoteAsset, address indexed resolver);\\n\\n    /// @notice Emitted when a pair is deleted\\n    /// @param pairId The pair ID\\n    /// @param baseAssetId The base asset id\\n    /// @param quoteAssetId The quote asset id\\n    event PairDeleted(bytes32 pairId, uint256 baseAssetId, uint256 quoteAssetId);\\n\\n    /// @notice Emitted when an asset is deleted\\n    /// @param assetId The asset ID\\n    /// @param symbol The asset symbol\\n    /// @param name The asset name\\n    event AssetDeleted(uint256 assetId, string symbol, string name);\\n\\n    // Assets\\n    /// @dev Array of all pairs\\n    Pair[] private pairs;\\n    /// @dev Mapping to track if a pair exists\\n    mapping(bytes32 => bool) private pairExists;\\n\\n    /// @dev Map asset ID -> Asset\\n    mapping(uint256 => Asset) private assetRegistry;\\n    /// @dev Next asset ID to be assigned\\n    uint256 private nextAssetId;\\n    /// @dev Maps uppercase symbol -> assetId\\n    mapping(bytes32 => uint256) private symbolToId;\\n    /// @dev Store assets in an array for getAssets()\\n    Asset[] private allAssets;\\n\\n    // Pairs\\n    /// @dev Structure to represent an asset pair\\n    struct Pair {\\n        /// @dev The unique identifier for the base asset\\n        uint256 baseAssetId;\\n        /// @dev The unique identifier for the quote asset\\n        uint256 quoteAssetId;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the contract and sets up roles\\n    /// @param _defaultAdmin The address of the default admin\\n    /// @param _contractAdmin The address of the contract admin\\n    function initialize(address _defaultAdmin, address _contractAdmin) public initializer {\\n        __AccessControl_init();\\n        _grantRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\\n        _grantRole(ADMIN_ROLE, _contractAdmin);\\n    }\\n\\n    /// @inheritdoc IGildiPriceOracle\\n    function getResolver(bytes32 _pairId) external view override returns (IGildiPriceResolver resolver) {\\n        if (!pairExists[_pairId]) {\\n            revert InvalidPairId();\\n        }\\n\\n        resolver = pairResolvers[_pairId];\\n        return resolver;\\n    }\\n\\n    /// @dev Computes a unique pair ID for an asset pair\\n    /// @param _baseAsset The base asset address\\n    /// @param _quoteAsset The quote asset address\\n    /// @return The hash of the asset pair\\n    function _generatePairId(string memory _baseAsset, string memory _quoteAsset) internal pure returns (bytes32) {\\n        // Convert both strings to uppercase, then hash them together\\n        // (or just hash them directly if preferred)\\n        bytes memory b1 = bytes(_baseAsset);\\n        bytes memory b2 = bytes(_quoteAsset);\\n        for (uint i = 0; i < b1.length; i++) {\\n            if (b1[i] >= 0x61 && b1[i] <= 0x7A) {\\n                b1[i] = bytes1(uint8(b1[i]) - 32);\\n            }\\n        }\\n        for (uint j = 0; j < b2.length; j++) {\\n            if (b2[j] >= 0x61 && b2[j] <= 0x7A) {\\n                b2[j] = bytes1(uint8(b2[j]) - 32);\\n            }\\n        }\\n        return keccak256(abi.encodePacked(b1, '/', b2));\\n    }\\n\\n    /// @notice Return all pairs in the form \\\"BASE/QUOTE\\\" for direct usage\\n    /// @return An array of PairInfo structs containing all registered pairs\\n    function getPairs() external view returns (PairInfo[] memory) {\\n        PairInfo[] memory pairList = new PairInfo[](pairs.length);\\n        for (uint i = 0; i < pairs.length; i++) {\\n            Asset memory baseAsset = assetRegistry[pairs[i].baseAssetId];\\n            Asset memory quoteAsset = assetRegistry[pairs[i].quoteAssetId];\\n\\n            pairList[i] = PairInfo({\\n                pairId: _generatePairId(baseAsset.symbol, quoteAsset.symbol),\\n                baseAsset: baseAsset,\\n                quoteAsset: quoteAsset\\n            });\\n        }\\n        return pairList;\\n    }\\n\\n    /// @notice Adds a new asset to the registry\\n    /// @param _symbol The symbol of the asset\\n    /// @param _name The name of the asset\\n    /// @return The ID of the newly added asset\\n    function addAsset(string memory _symbol, string memory _name) external onlyRole(ADMIN_ROLE) returns (uint256) {\\n        // Validate & uppercase symbol\\n        bytes memory s = bytes(_symbol);\\n        if (s.length < 3 || s.length > 6) {\\n            revert InvalidSymbolLength();\\n        }\\n\\n        for (uint i = 0; i < s.length; i++) {\\n            if (s[i] >= 0x61 && s[i] <= 0x7A) {\\n                s[i] = bytes1(uint8(s[i]) - 32);\\n            }\\n            // Only [A-Z0-9] allowed\\n            if ((s[i] < 0x30 || s[i] > 0x39) && (s[i] < 0x41 || s[i] > 0x5A)) {\\n                revert InvalidSymbol();\\n            }\\n        }\\n        bytes32 symbolHash = keccak256(s);\\n        if (symbolToId[symbolHash] != 0) {\\n            revert SymbolTaken();\\n        }\\n\\n        nextAssetId++;\\n        assetRegistry[nextAssetId] = Asset(nextAssetId, string(s), _name);\\n        symbolToId[symbolHash] = nextAssetId;\\n        allAssets.push(assetRegistry[nextAssetId]);\\n        return nextAssetId;\\n    }\\n\\n    /// @notice Deletes an asset and all pairs that reference it\\n    /// @param _assetId The ID of the asset to delete\\n    function deleteAsset(uint256 _assetId) external onlyRole(ADMIN_ROLE) {\\n        // 1. Check that the asset exists\\n        Asset memory asset = assetRegistry[_assetId];\\n        if (asset.id != _assetId) {\\n            revert AssetNotFound(_assetId);\\n        }\\n\\n        // 2. Remove the asset from assetRegistry and symbolToId\\n        delete assetRegistry[_assetId];\\n\\n        // Convert symbol to uppercase hash (same logic used for pair ID generation)\\n        bytes memory symbolBytes = bytes(asset.symbol);\\n        for (uint256 k = 0; k < symbolBytes.length; k++) {\\n            // uppercase ASCII conversion\\n            if (symbolBytes[k] >= 0x61 && symbolBytes[k] <= 0x7A) {\\n                symbolBytes[k] = bytes1(uint8(symbolBytes[k]) - 32);\\n            }\\n        }\\n        bytes32 symbolHash = keccak256(symbolBytes);\\n        delete symbolToId[symbolHash];\\n\\n        // Remove from allAssets array\\n        uint256 length = allAssets.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (allAssets[i].id == _assetId) {\\n                allAssets[i] = allAssets[length - 1];\\n                allAssets.pop();\\n                break;\\n            }\\n        }\\n\\n        // 3. Remove all pairs referencing this asset\\n        uint256 pairCount = pairs.length;\\n        uint256 idx = 0;\\n        while (idx < pairCount) {\\n            Pair memory p = pairs[idx];\\n            if (p.baseAssetId == _assetId || p.quoteAssetId == _assetId) {\\n                // Compute pairId\\n                Asset memory baseA = assetRegistry[p.baseAssetId];\\n                Asset memory quoteA = assetRegistry[p.quoteAssetId];\\n\\n                // If baseA or quoteA was also deleted, we can still reconstruct the pair ID\\n                // from the original strings we stored in memory (asset.symbol) if needed.\\n                // If you strictly need the original uppercase symbols, you can store them\\n                // temporarily before deleting, but let's keep it straightforward here.\\n                bytes32 pairId = _generatePairId(baseA.symbol, quoteA.symbol);\\n\\n                // Delete from pairResolvers and pairExists\\n                delete pairResolvers[pairId];\\n                pairExists[pairId] = false;\\n\\n                // Emit an event\\n                emit PairDeleted(pairId, baseA.id, quoteA.id);\\n\\n                // Remove the pair from the array\\n                pairs[idx] = pairs[pairCount - 1];\\n                pairs.pop();\\n                pairCount--;\\n            } else {\\n                idx++;\\n            }\\n        }\\n\\n        // 4. Emit asset deleted event\\n        emit AssetDeleted(_assetId, asset.symbol, asset.name);\\n    }\\n\\n    /// @notice Deletes a pair from the oracle\\n    /// @param _pairId The ID of the pair to delete\\n    function deletePair(bytes32 _pairId) external onlyRole(ADMIN_ROLE) {\\n        // 1. Check that the pair exists\\n        if (!pairExists[_pairId]) {\\n            revert PairNotFound();\\n        }\\n\\n        uint256 baseAssetId = 0;\\n        uint256 quoteAssetId = 0;\\n\\n        // 2. Delete the pair from pairResolvers, pairExists and pairs\\n        delete pairResolvers[_pairId];\\n        pairExists[_pairId] = false;\\n        for (uint256 i = 0; i < pairs.length; i++) {\\n            Asset memory baseAsset = assetRegistry[pairs[i].baseAssetId];\\n            Asset memory quoteAsset = assetRegistry[pairs[i].quoteAssetId];\\n            if (_generatePairId(baseAsset.symbol, quoteAsset.symbol) == _pairId) {\\n                pairs[i] = pairs[pairs.length - 1];\\n                pairs.pop();\\n\\n                baseAssetId = baseAsset.id;\\n                quoteAssetId = quoteAsset.id;\\n                break;\\n            }\\n        }\\n\\n        // 3. Emit pair deleted event\\n        emit PairDeleted(_pairId, baseAssetId, quoteAssetId);\\n    }\\n\\n    /// @notice Return all registered assets\\n    /// @return An array of all assets in the registry\\n    function getAssets() external view returns (Asset[] memory) {\\n        return allAssets;\\n    }\\n\\n    /// @notice Return asset by ID\\n    /// @param _assetId The ID of the asset to retrieve\\n    /// @return The asset with the specified ID\\n    function getAssetById(uint256 _assetId) external view returns (Asset memory) {\\n        return assetRegistry[_assetId];\\n    }\\n\\n    /// @notice Add a new pair using numeric asset IDs\\n    /// @param _baseAssetId The ID of the base asset\\n    /// @param _quoteAssetId The ID of the quote asset\\n    /// @param _resolver The resolver contract for the pair\\n    function addPair(\\n        uint256 _baseAssetId,\\n        uint256 _quoteAssetId,\\n        IGildiPriceResolver _resolver\\n    ) external onlyRole(ADMIN_ROLE) {\\n        // Ensure both assets exist\\n        if (assetRegistry[_baseAssetId].id == 0) {\\n            revert AssetNotFound(_baseAssetId);\\n        }\\n        if (assetRegistry[_quoteAssetId].id == 0) {\\n            revert AssetNotFound(_quoteAssetId);\\n        }\\n\\n        if (address(_resolver) == address(0)) {\\n            revert ResolverAddressZero();\\n        }\\n\\n        // Convert to uppercase for hashing\\n        bytes32 pairId = _generatePairId(assetRegistry[_baseAssetId].symbol, assetRegistry[_quoteAssetId].symbol);\\n        pairResolvers[pairId] = _resolver;\\n\\n        if (!pairExists[pairId]) {\\n            pairs.push(Pair(assetRegistry[_baseAssetId].id, assetRegistry[_quoteAssetId].id));\\n            pairExists[pairId] = true;\\n        }\\n\\n        emit ResolverAdded(assetRegistry[_baseAssetId].symbol, assetRegistry[_quoteAssetId].symbol, address(_resolver));\\n    }\\n\\n    /// @notice Update the resolver for an existing pair\\n    /// @param _baseAssetId The ID of the base asset\\n    /// @param _quoteAssetId The ID of the quote asset\\n    /// @param _resolver The new resolver contract for the pair\\n    function updateResolver(\\n        uint256 _baseAssetId,\\n        uint256 _quoteAssetId,\\n        IGildiPriceResolver _resolver\\n    ) external onlyRole(ADMIN_ROLE) {\\n        bytes32 pairId = _generatePairId(assetRegistry[_baseAssetId].symbol, assetRegistry[_quoteAssetId].symbol);\\n        pairResolvers[pairId] = _resolver;\\n    }\\n\\n    /// @notice Return pairs that use a specific quote asset ID\\n    /// @param _quoteAssetId The ID of the quote asset to filter by\\n    /// @return An array of pair strings in the format \\\"BASE/QUOTE\\\"\\n    function getPairsByQuoteAsset(uint256 _quoteAssetId) external view returns (string[] memory) {\\n        if (assetRegistry[_quoteAssetId].id == 0) {\\n            revert AssetNotFound(_quoteAssetId);\\n        }\\n        string memory quoteSymbol = assetRegistry[_quoteAssetId].symbol;\\n\\n        Asset memory pairQuoteAsset;\\n\\n        // Filter pairs where pair.quoteAsset == quoteSymbol\\n        uint count;\\n        for (uint i = 0; i < pairs.length; i++) {\\n            pairQuoteAsset = assetRegistry[pairs[i].quoteAssetId];\\n            if (keccak256(bytes(pairQuoteAsset.symbol)) == keccak256(bytes(quoteSymbol))) {\\n                count++;\\n            }\\n        }\\n\\n        string[] memory results = new string[](count);\\n        uint index;\\n        for (uint j = 0; j < pairs.length; j++) {\\n            pairQuoteAsset = assetRegistry[pairs[j].quoteAssetId];\\n            if (keccak256(bytes(pairQuoteAsset.symbol)) == keccak256(bytes(quoteSymbol))) {\\n                Asset memory pairBaseAsset = assetRegistry[pairs[j].baseAssetId];\\n                results[index] = string(abi.encodePacked(pairBaseAsset.symbol, '/', pairQuoteAsset.symbol));\\n                index++;\\n            }\\n        }\\n        return results;\\n    }\\n\\n    /// @notice Overload to get price by numeric IDs\\n    /// @param _baseAssetId The ID of the base asset\\n    /// @param _quoteAssetId The ID of the quote asset\\n    /// @return Price data for the specified asset pair\\n    function getPriceById(uint256 _baseAssetId, uint256 _quoteAssetId) external view returns (PriceData memory) {\\n        if (assetRegistry[_baseAssetId].id == 0) {\\n            revert AssetNotFound(_baseAssetId);\\n        }\\n        if (assetRegistry[_quoteAssetId].id == 0) {\\n            revert AssetNotFound(_quoteAssetId);\\n        }\\n\\n        bytes32 pairId = _generatePairId(assetRegistry[_baseAssetId].symbol, assetRegistry[_quoteAssetId].symbol);\\n        IGildiPriceResolver resolver = pairResolvers[pairId];\\n        if (!pairExists[pairId]) {\\n            revert InvalidPairId();\\n        }\\n\\n        return resolver.getPrice(pairId);\\n    }\\n\\n    /// @inheritdoc IGildiPriceResolver\\n    function getPrice(bytes32 _pairId) external view override returns (PriceData memory) {\\n        IGildiPriceResolver resolver = pairResolvers[_pairId];\\n        if (!pairExists[_pairId]) {\\n            revert InvalidPairId();\\n        }\\n\\n        return resolver.getPrice(_pairId);\\n    }\\n\\n    /// @inheritdoc IGildiPriceResolver\\n    function getPriceNoOlderThan(bytes32 _pairId, uint256 _age) external view override returns (PriceData memory) {\\n        IGildiPriceResolver resolver = pairResolvers[_pairId];\\n        if (!pairExists[_pairId]) {\\n            revert InvalidPairId();\\n        }\\n\\n        return resolver.getPriceNoOlderThan(_pairId, _age);\\n    }\\n\\n    /// @inheritdoc IGildiPriceOracle\\n    function pairExistsById(bytes32 _pairId) external view override returns (bool) {\\n        return pairExists[_pairId];\\n    }\\n}\\n\",\"keccak256\":\"0x5f9ce3e97b3e113175690e2800e5fdb6d53720b56f22d666d4fb9d9d398c4ac3\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608080604052346100b8577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081549060ff8260401c166100a957506001600160401b036002600160401b031982821601610064575b6040516123da90816100be8239f35b6001600160401b031990911681179091556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1388080610055565b63f92ee8a960e01b8152600490fd5b600080fdfe608060408181526004918236101561001657600080fd5b600090813560e01c90816301ffc9a714611863575080631e08cf0614611676578063248a9ca31461163e5780632f2ff15d1461161457806331d98b3f1461157b578063328fe7ad1461131457806336568abe146112ce57806337410dfa14610edf578063485cc95514610d7d57806361408e6c14610d0857806367e4ac2c14610c2657806375b238fc14610beb578063767eb5ef14610a455780637eb79b531461068057806391d148541461062c578063a217fddf14610611578063a4ae35e014610571578063ac5ae002146103c5578063b3e444a71461037f578063d22696b0146101f7578063d547741f146101aa578063e7c9eaf6146101795763ea6ec3de1461012157600080fd5b34610176576020366003190112610176578235808252600260205260ff8383205416156101675781526020818152908290205491516001600160a01b0390921682529150f35b50505163a8c399e560e01b8152fd5b80fd5b5091346101a65760203660031901126101a6578160209360ff923581526002855220541690519015158152f35b8280fd5b509190346101a657806003193601126101a6576101f391356101ee60016101cf6118e6565b9383875260008051602061238583398151915260205286200154611f81565b612301565b5080f35b509190346101a657806003193601126101a6576024358235610217611b62565b508085526003602052828520541561036957818552600360205282852054156103535761026d61028661028b9361027f93885260036020526001868920019088526102746001878a200191875194858092611a7c565b0384611992565b855193848092611a7c565b0383611992565b611fb4565b8084528360205260018060a01b03828520541692600260205260ff83862054161561034557906024606092845195869384926331d98b3f60e01b84528301525afa91821561033b57610306939261030a575b50519182918291909160408060608301948051845260ff60208201511660208501520151910152565b0390f35b61032d91925060603d606011610334575b6103258183611992565b810190611b81565b90386102dd565b503d61031b565b81513d85823e3d90fd5b825163a8c399e560e01b8152fd5b50905163ad917ae760e01b815291820152602490fd5b8360249184519163ad917ae760e01b8352820152fd5b5091346101a65760203660031901126101a65781610306936103b2926103a3611bbf565b50358152600360205220611bdf565b9051918291602083526020830190611a0b565b50346101765760208060031936011261056d5783356103e2611f07565b8083526002825260ff84842054161561055d5780835282825283832080546001600160a01b031916905560028252838320805460ff19169055919283929083805b6001805490818310156105295761043983611b12565b50548852600380885261044d868a20611bdf565b9161045785611b12565b50015489528752610469858920611bdf565b918661047c898401518a86015190611fb4565b1461048c57505050600101610423565b929350939495509596506000198101908111610516577f8d4fcfa1c49eaf4fe4869705d7f4ba530c099e8f1d8669dbf3b956b848158d3e9697506105109392916104e26104db6104e893611b12565b5091611b12565b90611ea8565b6104f0611ec8565b519351905b51938493846040919493926060820195825260208201520152565b0390a180f35b634e487b7160e01b875260118852602487fd5b505050939550610510919250937f8d4fcfa1c49eaf4fe4869705d7f4ba530c099e8f1d8669dbf3b956b848158d3e946104f5565b5050505163d719ab6960e01b8152fd5b5080fd5b509190346101a657806003193601126101a657813561058e611b62565b508084528360205260018060a01b03828520541692600260205260ff838620541615610345579060446060928451958693849263052571af60e51b845283015260243560248301525afa91821561033b57610306939261030a5750519182918291909160408060608301948051845260ff60208201511660208501520151910152565b50903461056d578160031936011261056d5751908152602090f35b5091346101a657816003193601126101a6578160209360ff9261064d6118e6565b9035825260008051602061238583398151915286528282206001600160a01b039091168252855220549151911615158152f35b50903461056d57602090816003193601126101a6578335906106a0611f07565b818452600394600384526106b5828620611bdf565b9583875103610a2f57838652600385528286209186835560016106d9818501611e5f565b6106e66002809501611e5f565b868901938451828a905b61099e575b50888151910120895260058852888681205560068054908a5b8281106108dd575b50505081549389945b80861061077d578a7f71ce3c978265c49a3ec3706039ecedd12f11fb57ed7bedbe44a8a4294ccfef358b8b8f8c61051091610770828f5192015191606084519788978852870152606086019061191f565b918483039085015261191f565b8a8a61078888611b12565b508a5161079481611944565b8782549283835201548d8085840194838652149182156108d3575b5050156108be577f8d4fcfa1c49eaf4fe4869705d7f4ba530c099e8f1d8669dbf3b956b848158d3e93929161085d915184528683526107ef8d8520611bdf565b905184528683528c610802818620611bdf565b9489610815868501518789015190611fb4565b958683528281528383206bffffffffffffffffffffffff60a01b8154169055522060ff1981541690555192518c51938493846040919493926060820195825260208201520152565b0390a16000198101908082116108ab5761088361087983611b12565b506104e289611b12565b61088b611ec8565b1561089857925b9261071f565b634e487b7160e01b8b526011855260248bfd5b634e487b7160e01b8c526011865260248cfd5b5050505092946108cd90611c2a565b94610892565b1490508d386107af565b93848a6108eb839997611cfd565b5054146108fb570195939561070e565b919260001992915082810190811161098b579061092461091d61092a93611cfd565b5091611cfd565b90611e16565b8154801561097857019061093d82611cfd565b6109665783818d61095a9355610954898201611e5f565b01611e5f565b55388080959395610716565b634e487b7160e01b8c528b865260248cfd5b634e487b7160e01b8c526031865260248cfd5b634e487b7160e01b8d526011875260248dfd5b928095938251811015610a275781906001600160f81b0319606160f81b816109c68488611c7b565b5116101580610a0d575b6109df575b50019093956106f0565b6109e98286611c7b565b516109f760f891821c611c8c565b901b168d1a610a068286611c7b565b53386109d5565b50603d60f91b81610a1e8488611c7b565b511611156109d0565b5092946106f5565b5082602492519163ad917ae760e01b8352820152fd5b50903461056d578160031936011261056d57906001805491610a6683611c4f565b93610a7381519586611992565b838552610a7f84611c4f565b60209490601f1901835b818110610bac575050825b818110610b2157505080519380850191818652865180935280860182828560051b890101980194915b848310610aca5787890388f35b9091929394958480610b0f839b603f198c82030187528a519086610aff60608451845286850151908088860152840190611a0b565b9201519087818403910152611a0b565b9a980196959491909101920190610abd565b9384610b31829896979497611b12565b505485526003808552610b45888720611bdf565b9083610b5084611b12565b50015487528552610b62888720611bdf565b610b73868301518783015190611fb4565b91895192610b8084611976565b83528683015288820152610b948288611c67565b52610b9f8187611c67565b5001959395949194610a94565b958396819498969851610bbe81611976565b868152610bc9611bbf565b83820152610bd5611bbf565b8982015282828901015201969496959295610a89565b50903461056d578160031936011261056d57602090517fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758152f35b5034610176578060031936011261017657600654610c4381611c4f565b91610c5084519384611992565b8183526006815260209283810192827ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f855b838310610ce357505050508451938085019181865251809252858501958260051b8601019392955b828710610cb75785850386f35b909192938280610cd3600193603f198a82030186528851611a0b565b9601920196019592919092610caa565b600388600192610cf6859b98999b611bdf565b81520192019201919096949396610c82565b50903461056d5761028690610d5461027f61026d610d25366118b7565b9691610d2f611f07565b885260036020526001868920019088526102746001878a200191875194858092611a7c565b83526020839052822080546001600160a01b0319166001600160a01b0390921691909117905580f35b5091346101a657816003193601126101a6578035906001600160a01b0382168203610edb57610daa6118e6565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009283549260ff84871c16159367ffffffffffffffff811680159081610ed3575b6001149081610ec9575b159081610ec0575b50610eb15767ffffffffffffffff198116600117865584610e92575b5060ff8554871c1615610e84575090610e34610e3a92612118565b506121b8565b50610e43578280f35b805468ff00000000000000001916905551600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a138808280f35b8551631afcd79f60e31b8152fd5b68ffffffffffffffffff19166801000000000000000117855538610e19565b50855163f92ee8a960e01b8152fd5b90501538610dfd565b303b159150610df5565b869150610deb565b8380fd5b50903461056d578060031936011261056d5767ffffffffffffffff91833583811161056d57610f1190369086016119b4565b9060243584811161056d57610f2990369087016119b4565b610f31611f07565b8251600381109081156112c3575b506112b357815b8351811015611056576001600160f81b0319606160f81b81610f688488611c7b565b511610158061103c575b61100e575b600360fc1b81610f878488611c7b565b511610908115610ff3575b81610fb5575b50610fa557600101610f46565b845163010466f160e21b81528790fd5b9050604160f81b81610fc78488611c7b565b511610908115610fd9575b5038610f98565b602d60f91b9150610fea8387611c7b565b51161138610fd2565b9050603960f81b816110058488611c7b565b51161190610f92565b806110198387611c7b565b5161102760f891821c611c8c565b901b16841a6110368387611c7b565b53610f77565b50603d60f91b8161104d8488611c7b565b51161115610f72565b50949293825195602096878501209182845260058852868420546112a35761107e8654611c2a565b80875587519061108d82611976565b808252898201968752888201938452855260038952878520905181556001958682019051805190848211611290576110cf826110c98554611a42565b85611cb6565b8b908c601f8411600114611227575091806111059260029695948b926111aa575b50508160011b916000199060031b1c19161790565b90555b019151805191821161121457611122826110c98554611a42565b8890601f83116001146111b55761115092918691836111aa5750508160011b916000199060031b1c19161790565b90555b83549082526005865280858320558152600385528381209160065491600160401b8310156111975750816109249161118f949301600655611cfd565b549051908152f35b634e487b7160e01b815260418552602490fd5b0151905038806110f0565b8386528986208793929091601f198416885b8d8282106111fe57505084116111e5575b505050811b019055611153565b015160001960f88460031b161c191690553880806111d8565b8385015186558b979095019493840193016111c7565b634e487b7160e01b855260418752602485fd5b8a92601f9695949296198316858c52828c20928c905b82821061127757505096836002981061125e575b505050811b019055611108565b015160001960f88460031b161c19169055388080611251565b838a015185558e9690940193928301929081019061123d565b634e487b7160e01b885260418a52602488fd5b865163f0c5992760e01b81528690fd5b83516306a7103560e01b81528690fd5b600691501138610f3f565b50903461056d578060031936011261056d576112e86118e6565b90336001600160a01b0383160361130557506101f3919235612301565b5163334bd91960e11b81528390fd5b509190346101a6576020928360031936011261017657823593848252600393600382528383205415611564575092916113639482526003845260019261136a8483852001835197888092611a7c565b0387611992565b611372611bbf565b5082958390855492878201925b84811061151157506113a86113938a611c4f565b996113a087519b8c611992565b808b52611c4f565b601f1901865b8181106115025750508591865b8581106114225750505050505080519380850191818652865180935281818701918460051b880101970193905b8382106113f55786880387f35b90919293948380611411839a603f198b8203018652895161191f565b9997019594939190910191016113e8565b978881611433819d9b9c999c611b12565b50015489528388528a8880611449838d20611bdf565b018b815183815191012087518b201461146d575b50505050019997999895986113bb565b916114dd918161149486889c97966114876114f89a611b12565b505481528c845220611bdf565b01519051935193816114af86935180928680870191016118fc565b8201602f60f81b848201526114cf602194835193849187850191016118fc565b010386810184520182611992565b6114e7828d611c67565b526114f2818c611c67565b50611c2a565b938a88388b61145d565b60608b82018b015289016113ae565b968781611522819c9a9b989b611b12565b5001548852828752866115368b8a20611bdf565b01518781519101208451862014611554575b0198969897949761137f565b9761155e90611c2a565b97611548565b835163ad917ae760e01b8152908101869052602490fd5b509190346101a65760203660031901126101a6578135611599611b62565b508084528360205260018060a01b03828520541692600260205260ff83862054161561034557906024606092845195869384926331d98b3f60e01b84528301525afa91821561033b57610306939261030a5750519182918291909160408060608301948051845260ff60208201511660208501520151910152565b509190346101a657806003193601126101a6576101f3913561163960016101cf6118e6565b61227a565b5091346101a65760203660031901126101a6578160209360019235815260008051602061238583398151915285522001549051908152f35b50903461056d57611686366118b7565b61169293919293611f07565b83855260209060038252828620541561184c57838652600382528286205415611835576001600160a01b0316938415611825578086526003825260019061170361027f61026d6102868a6116f8878a8181852001938d81522001918a5194858092611a7c565b885193848092611a7c565b80885287845284882080546001600160a01b03191688179055600284528488205460ff161561178f575b5091611789917f82c83109e5f14eb4b46ffbed56ed4c551e94cbaaf954198815cde6e308a6c23b95949388526003825280848920019488528388200161177c8451958587968752860190611a7c565b9184830390850152611a7c565b0390a280f35b8188526003845284882054868952858920548651916117ad83611944565b82528582019081528454600160401b8110156118125780866117d192018755611b12565b929092611800575182555190840155875260028352838720805460ff191683179055959650869561178961172d565b634e487b7160e01b8b528a8c5260248bfd5b634e487b7160e01b8b5260418c5260248bfd5b8251637ea067a160e01b81528790fd5b825163ad917ae760e01b8152808801859052602490fd5b825163ad917ae760e01b8152808801869052602490fd5b905083346101a65760203660031901126101a6573563ffffffff60e01b81168091036101a65760209250637965db0b60e01b81149081156118a6575b5015158152f35b6301ffc9a760e01b1490508361189f565b60609060031901126118e15760043590602435906044356001600160a01b03811681036118e15790565b600080fd5b602435906001600160a01b03821682036118e157565b60005b83811061190f5750506000910152565b81810151838201526020016118ff565b90602091611938815180928185528580860191016118fc565b601f01601f1916010190565b6040810190811067ffffffffffffffff82111761196057604052565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761196057604052565b90601f8019910116810190811067ffffffffffffffff82111761196057604052565b81601f820112156118e15780359067ffffffffffffffff821161196057604051926119e9601f8401601f191660200185611992565b828452602083830101116118e157816000926020809301838601378301015290565b611a3f91815181526040611a2e602084015160606020850152606084019061191f565b92015190604081840391015261191f565b90565b90600182811c92168015611a72575b6020831014611a5c57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611a51565b805460009392611a8b82611a42565b91828252602093600191600181169081600014611af35750600114611ab2575b5050505050565b90939495506000929192528360002092846000945b838610611adf57505050500101903880808080611aab565b805485870183015294019385908201611ac7565b60ff19168685015250505090151560051b010191503880808080611aab565b600154811015611b4c57600160005260011b7fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b634e487b7160e01b600052603260045260246000fd5b60405190611b6f82611976565b60006040838281528260208201520152565b908160609103126118e15760405190611b9982611976565b8051825260208101519060ff821682036118e15760409160208401520151604082015290565b60405190611bcc82611976565b6060604083600081528260208201520152565b90600260408051611bef81611976565b611c268195805483528351611c1281611c0b8160018601611a7c565b0382611992565b602084015261026d84518096819301611a7c565b0152565b6000198114611c395760010190565b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff81116119605760051b60200190565b8051821015611b4c5760209160051b010190565b908151811015611b4c570160200190565b60ff601f199116019060ff8211611c3957565b818110611caa575050565b60008155600101611c9f565b9190601f8111611cc557505050565b611cf1926000526020600020906020601f840160051c83019310611cf3575b601f0160051c0190611c9f565b565b9091508190611ce4565b600654811015611b4c576003906006600052027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0190600090565b90808214611e1257611d4a8154611a42565b9067ffffffffffffffff821161196057611d68826110c98554611a42565b600090601f8311600114611da757611d98929160009183611d9c5750508160011b916000199060031b1c19161790565b9055565b0154905038806110f0565b815260208082208483528183209291601f1985169083905b828210611df9575050908460019594939210611de0575b505050811b019055565b015460001960f88460031b161c19169055388080611dd6565b8495819295850154815560018091019601940190611dbf565b5050565b90611e4957818103611e26575050565b60028083611cf194548455611e416001820160018601611d38565b019101611d38565b634e487b7160e01b600052600060045260246000fd5b611e698154611a42565b9081611e73575050565b81601f60009311600114611e85575055565b908083918252611ea4601f60208420940160051c840160018501611c9f565b5555565b9190611e4957808203611eb9575050565b60018181925484550154910155565b6001548015611ef15760001901611ede81611b12565b611e495760018160008093550155600155565b634e487b7160e01b600052603160045260246000fd5b3360009081527fb16e88c42fd4e48df2dd6a2eabd6bc9aec654ec170056b470819f8892cc6431c60205260409020547fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217759060ff1615611f635750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b8060005260008051602061238583398151915260205260406000203360005260205260ff6040600020541615611f635750565b60005b815181101561203b576001906001600160f81b0319606160f81b81611fdc8487611c7b565b5116101580612021575b611ff2575b5001611fb7565b611ffc8285611c7b565b5161200a60f891821c611c8c565b901b1660001a61201a8285611c7b565b5338611feb565b50603d60f91b816120328487611c7b565b51161115611fe6565b509060005b81518110156120c4576001906001600160f81b0319606160f81b816120658487611c7b565b51161015806120aa575b61207b575b5001612040565b6120858285611c7b565b5161209360f891821c611c8c565b901b1660001a6120a38285611c7b565b5338612074565b50603d60f91b816120bb8487611c7b565b5116111561206f565b506121126021604051809360206120e481840197888151938492016118fc565b8201602f60f81b602082015261210382518093602087850191016118fc565b01036001810184520182611992565b51902090565b6001600160a01b031660008181527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d60205260408120549091906000805160206123858339815191529060ff166121b3578280526020526040822081835260205260408220600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b505090565b6001600160a01b031660008181527fb16e88c42fd4e48df2dd6a2eabd6bc9aec654ec170056b470819f8892cc6431c60205260408120549091907fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775906000805160206123858339815191529060ff16612274578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b50505090565b9060009180835260008051602061238583398151915280602052604084209260018060a01b03169283855260205260ff60408520541615600014612274578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b9060009180835260008051602061238583398151915280602052604084209260018060a01b03169283855260205260ff60408520541660001461227457818452602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a460019056fe02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800a2646970667358221220e5f17d752fc1480ba9771ecd51d83d700e7b129699ed753e0ab161b7a552453964736f6c63430008180033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600090813560e01c90816301ffc9a714611863575080631e08cf0614611676578063248a9ca31461163e5780632f2ff15d1461161457806331d98b3f1461157b578063328fe7ad1461131457806336568abe146112ce57806337410dfa14610edf578063485cc95514610d7d57806361408e6c14610d0857806367e4ac2c14610c2657806375b238fc14610beb578063767eb5ef14610a455780637eb79b531461068057806391d148541461062c578063a217fddf14610611578063a4ae35e014610571578063ac5ae002146103c5578063b3e444a71461037f578063d22696b0146101f7578063d547741f146101aa578063e7c9eaf6146101795763ea6ec3de1461012157600080fd5b34610176576020366003190112610176578235808252600260205260ff8383205416156101675781526020818152908290205491516001600160a01b0390921682529150f35b50505163a8c399e560e01b8152fd5b80fd5b5091346101a65760203660031901126101a6578160209360ff923581526002855220541690519015158152f35b8280fd5b509190346101a657806003193601126101a6576101f391356101ee60016101cf6118e6565b9383875260008051602061238583398151915260205286200154611f81565b612301565b5080f35b509190346101a657806003193601126101a6576024358235610217611b62565b508085526003602052828520541561036957818552600360205282852054156103535761026d61028661028b9361027f93885260036020526001868920019088526102746001878a200191875194858092611a7c565b0384611992565b855193848092611a7c565b0383611992565b611fb4565b8084528360205260018060a01b03828520541692600260205260ff83862054161561034557906024606092845195869384926331d98b3f60e01b84528301525afa91821561033b57610306939261030a575b50519182918291909160408060608301948051845260ff60208201511660208501520151910152565b0390f35b61032d91925060603d606011610334575b6103258183611992565b810190611b81565b90386102dd565b503d61031b565b81513d85823e3d90fd5b825163a8c399e560e01b8152fd5b50905163ad917ae760e01b815291820152602490fd5b8360249184519163ad917ae760e01b8352820152fd5b5091346101a65760203660031901126101a65781610306936103b2926103a3611bbf565b50358152600360205220611bdf565b9051918291602083526020830190611a0b565b50346101765760208060031936011261056d5783356103e2611f07565b8083526002825260ff84842054161561055d5780835282825283832080546001600160a01b031916905560028252838320805460ff19169055919283929083805b6001805490818310156105295761043983611b12565b50548852600380885261044d868a20611bdf565b9161045785611b12565b50015489528752610469858920611bdf565b918661047c898401518a86015190611fb4565b1461048c57505050600101610423565b929350939495509596506000198101908111610516577f8d4fcfa1c49eaf4fe4869705d7f4ba530c099e8f1d8669dbf3b956b848158d3e9697506105109392916104e26104db6104e893611b12565b5091611b12565b90611ea8565b6104f0611ec8565b519351905b51938493846040919493926060820195825260208201520152565b0390a180f35b634e487b7160e01b875260118852602487fd5b505050939550610510919250937f8d4fcfa1c49eaf4fe4869705d7f4ba530c099e8f1d8669dbf3b956b848158d3e946104f5565b5050505163d719ab6960e01b8152fd5b5080fd5b509190346101a657806003193601126101a657813561058e611b62565b508084528360205260018060a01b03828520541692600260205260ff838620541615610345579060446060928451958693849263052571af60e51b845283015260243560248301525afa91821561033b57610306939261030a5750519182918291909160408060608301948051845260ff60208201511660208501520151910152565b50903461056d578160031936011261056d5751908152602090f35b5091346101a657816003193601126101a6578160209360ff9261064d6118e6565b9035825260008051602061238583398151915286528282206001600160a01b039091168252855220549151911615158152f35b50903461056d57602090816003193601126101a6578335906106a0611f07565b818452600394600384526106b5828620611bdf565b9583875103610a2f57838652600385528286209186835560016106d9818501611e5f565b6106e66002809501611e5f565b868901938451828a905b61099e575b50888151910120895260058852888681205560068054908a5b8281106108dd575b50505081549389945b80861061077d578a7f71ce3c978265c49a3ec3706039ecedd12f11fb57ed7bedbe44a8a4294ccfef358b8b8f8c61051091610770828f5192015191606084519788978852870152606086019061191f565b918483039085015261191f565b8a8a61078888611b12565b508a5161079481611944565b8782549283835201548d8085840194838652149182156108d3575b5050156108be577f8d4fcfa1c49eaf4fe4869705d7f4ba530c099e8f1d8669dbf3b956b848158d3e93929161085d915184528683526107ef8d8520611bdf565b905184528683528c610802818620611bdf565b9489610815868501518789015190611fb4565b958683528281528383206bffffffffffffffffffffffff60a01b8154169055522060ff1981541690555192518c51938493846040919493926060820195825260208201520152565b0390a16000198101908082116108ab5761088361087983611b12565b506104e289611b12565b61088b611ec8565b1561089857925b9261071f565b634e487b7160e01b8b526011855260248bfd5b634e487b7160e01b8c526011865260248cfd5b5050505092946108cd90611c2a565b94610892565b1490508d386107af565b93848a6108eb839997611cfd565b5054146108fb570195939561070e565b919260001992915082810190811161098b579061092461091d61092a93611cfd565b5091611cfd565b90611e16565b8154801561097857019061093d82611cfd565b6109665783818d61095a9355610954898201611e5f565b01611e5f565b55388080959395610716565b634e487b7160e01b8c528b865260248cfd5b634e487b7160e01b8c526031865260248cfd5b634e487b7160e01b8d526011875260248dfd5b928095938251811015610a275781906001600160f81b0319606160f81b816109c68488611c7b565b5116101580610a0d575b6109df575b50019093956106f0565b6109e98286611c7b565b516109f760f891821c611c8c565b901b168d1a610a068286611c7b565b53386109d5565b50603d60f91b81610a1e8488611c7b565b511611156109d0565b5092946106f5565b5082602492519163ad917ae760e01b8352820152fd5b50903461056d578160031936011261056d57906001805491610a6683611c4f565b93610a7381519586611992565b838552610a7f84611c4f565b60209490601f1901835b818110610bac575050825b818110610b2157505080519380850191818652865180935280860182828560051b890101980194915b848310610aca5787890388f35b9091929394958480610b0f839b603f198c82030187528a519086610aff60608451845286850151908088860152840190611a0b565b9201519087818403910152611a0b565b9a980196959491909101920190610abd565b9384610b31829896979497611b12565b505485526003808552610b45888720611bdf565b9083610b5084611b12565b50015487528552610b62888720611bdf565b610b73868301518783015190611fb4565b91895192610b8084611976565b83528683015288820152610b948288611c67565b52610b9f8187611c67565b5001959395949194610a94565b958396819498969851610bbe81611976565b868152610bc9611bbf565b83820152610bd5611bbf565b8982015282828901015201969496959295610a89565b50903461056d578160031936011261056d57602090517fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758152f35b5034610176578060031936011261017657600654610c4381611c4f565b91610c5084519384611992565b8183526006815260209283810192827ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f855b838310610ce357505050508451938085019181865251809252858501958260051b8601019392955b828710610cb75785850386f35b909192938280610cd3600193603f198a82030186528851611a0b565b9601920196019592919092610caa565b600388600192610cf6859b98999b611bdf565b81520192019201919096949396610c82565b50903461056d5761028690610d5461027f61026d610d25366118b7565b9691610d2f611f07565b885260036020526001868920019088526102746001878a200191875194858092611a7c565b83526020839052822080546001600160a01b0319166001600160a01b0390921691909117905580f35b5091346101a657816003193601126101a6578035906001600160a01b0382168203610edb57610daa6118e6565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009283549260ff84871c16159367ffffffffffffffff811680159081610ed3575b6001149081610ec9575b159081610ec0575b50610eb15767ffffffffffffffff198116600117865584610e92575b5060ff8554871c1615610e84575090610e34610e3a92612118565b506121b8565b50610e43578280f35b805468ff00000000000000001916905551600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a138808280f35b8551631afcd79f60e31b8152fd5b68ffffffffffffffffff19166801000000000000000117855538610e19565b50855163f92ee8a960e01b8152fd5b90501538610dfd565b303b159150610df5565b869150610deb565b8380fd5b50903461056d578060031936011261056d5767ffffffffffffffff91833583811161056d57610f1190369086016119b4565b9060243584811161056d57610f2990369087016119b4565b610f31611f07565b8251600381109081156112c3575b506112b357815b8351811015611056576001600160f81b0319606160f81b81610f688488611c7b565b511610158061103c575b61100e575b600360fc1b81610f878488611c7b565b511610908115610ff3575b81610fb5575b50610fa557600101610f46565b845163010466f160e21b81528790fd5b9050604160f81b81610fc78488611c7b565b511610908115610fd9575b5038610f98565b602d60f91b9150610fea8387611c7b565b51161138610fd2565b9050603960f81b816110058488611c7b565b51161190610f92565b806110198387611c7b565b5161102760f891821c611c8c565b901b16841a6110368387611c7b565b53610f77565b50603d60f91b8161104d8488611c7b565b51161115610f72565b50949293825195602096878501209182845260058852868420546112a35761107e8654611c2a565b80875587519061108d82611976565b808252898201968752888201938452855260038952878520905181556001958682019051805190848211611290576110cf826110c98554611a42565b85611cb6565b8b908c601f8411600114611227575091806111059260029695948b926111aa575b50508160011b916000199060031b1c19161790565b90555b019151805191821161121457611122826110c98554611a42565b8890601f83116001146111b55761115092918691836111aa5750508160011b916000199060031b1c19161790565b90555b83549082526005865280858320558152600385528381209160065491600160401b8310156111975750816109249161118f949301600655611cfd565b549051908152f35b634e487b7160e01b815260418552602490fd5b0151905038806110f0565b8386528986208793929091601f198416885b8d8282106111fe57505084116111e5575b505050811b019055611153565b015160001960f88460031b161c191690553880806111d8565b8385015186558b979095019493840193016111c7565b634e487b7160e01b855260418752602485fd5b8a92601f9695949296198316858c52828c20928c905b82821061127757505096836002981061125e575b505050811b019055611108565b015160001960f88460031b161c19169055388080611251565b838a015185558e9690940193928301929081019061123d565b634e487b7160e01b885260418a52602488fd5b865163f0c5992760e01b81528690fd5b83516306a7103560e01b81528690fd5b600691501138610f3f565b50903461056d578060031936011261056d576112e86118e6565b90336001600160a01b0383160361130557506101f3919235612301565b5163334bd91960e11b81528390fd5b509190346101a6576020928360031936011261017657823593848252600393600382528383205415611564575092916113639482526003845260019261136a8483852001835197888092611a7c565b0387611992565b611372611bbf565b5082958390855492878201925b84811061151157506113a86113938a611c4f565b996113a087519b8c611992565b808b52611c4f565b601f1901865b8181106115025750508591865b8581106114225750505050505080519380850191818652865180935281818701918460051b880101970193905b8382106113f55786880387f35b90919293948380611411839a603f198b8203018652895161191f565b9997019594939190910191016113e8565b978881611433819d9b9c999c611b12565b50015489528388528a8880611449838d20611bdf565b018b815183815191012087518b201461146d575b50505050019997999895986113bb565b916114dd918161149486889c97966114876114f89a611b12565b505481528c845220611bdf565b01519051935193816114af86935180928680870191016118fc565b8201602f60f81b848201526114cf602194835193849187850191016118fc565b010386810184520182611992565b6114e7828d611c67565b526114f2818c611c67565b50611c2a565b938a88388b61145d565b60608b82018b015289016113ae565b968781611522819c9a9b989b611b12565b5001548852828752866115368b8a20611bdf565b01518781519101208451862014611554575b0198969897949761137f565b9761155e90611c2a565b97611548565b835163ad917ae760e01b8152908101869052602490fd5b509190346101a65760203660031901126101a6578135611599611b62565b508084528360205260018060a01b03828520541692600260205260ff83862054161561034557906024606092845195869384926331d98b3f60e01b84528301525afa91821561033b57610306939261030a5750519182918291909160408060608301948051845260ff60208201511660208501520151910152565b509190346101a657806003193601126101a6576101f3913561163960016101cf6118e6565b61227a565b5091346101a65760203660031901126101a6578160209360019235815260008051602061238583398151915285522001549051908152f35b50903461056d57611686366118b7565b61169293919293611f07565b83855260209060038252828620541561184c57838652600382528286205415611835576001600160a01b0316938415611825578086526003825260019061170361027f61026d6102868a6116f8878a8181852001938d81522001918a5194858092611a7c565b885193848092611a7c565b80885287845284882080546001600160a01b03191688179055600284528488205460ff161561178f575b5091611789917f82c83109e5f14eb4b46ffbed56ed4c551e94cbaaf954198815cde6e308a6c23b95949388526003825280848920019488528388200161177c8451958587968752860190611a7c565b9184830390850152611a7c565b0390a280f35b8188526003845284882054868952858920548651916117ad83611944565b82528582019081528454600160401b8110156118125780866117d192018755611b12565b929092611800575182555190840155875260028352838720805460ff191683179055959650869561178961172d565b634e487b7160e01b8b528a8c5260248bfd5b634e487b7160e01b8b5260418c5260248bfd5b8251637ea067a160e01b81528790fd5b825163ad917ae760e01b8152808801859052602490fd5b825163ad917ae760e01b8152808801869052602490fd5b905083346101a65760203660031901126101a6573563ffffffff60e01b81168091036101a65760209250637965db0b60e01b81149081156118a6575b5015158152f35b6301ffc9a760e01b1490508361189f565b60609060031901126118e15760043590602435906044356001600160a01b03811681036118e15790565b600080fd5b602435906001600160a01b03821682036118e157565b60005b83811061190f5750506000910152565b81810151838201526020016118ff565b90602091611938815180928185528580860191016118fc565b601f01601f1916010190565b6040810190811067ffffffffffffffff82111761196057604052565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761196057604052565b90601f8019910116810190811067ffffffffffffffff82111761196057604052565b81601f820112156118e15780359067ffffffffffffffff821161196057604051926119e9601f8401601f191660200185611992565b828452602083830101116118e157816000926020809301838601378301015290565b611a3f91815181526040611a2e602084015160606020850152606084019061191f565b92015190604081840391015261191f565b90565b90600182811c92168015611a72575b6020831014611a5c57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611a51565b805460009392611a8b82611a42565b91828252602093600191600181169081600014611af35750600114611ab2575b5050505050565b90939495506000929192528360002092846000945b838610611adf57505050500101903880808080611aab565b805485870183015294019385908201611ac7565b60ff19168685015250505090151560051b010191503880808080611aab565b600154811015611b4c57600160005260011b7fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b634e487b7160e01b600052603260045260246000fd5b60405190611b6f82611976565b60006040838281528260208201520152565b908160609103126118e15760405190611b9982611976565b8051825260208101519060ff821682036118e15760409160208401520151604082015290565b60405190611bcc82611976565b6060604083600081528260208201520152565b90600260408051611bef81611976565b611c268195805483528351611c1281611c0b8160018601611a7c565b0382611992565b602084015261026d84518096819301611a7c565b0152565b6000198114611c395760010190565b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff81116119605760051b60200190565b8051821015611b4c5760209160051b010190565b908151811015611b4c570160200190565b60ff601f199116019060ff8211611c3957565b818110611caa575050565b60008155600101611c9f565b9190601f8111611cc557505050565b611cf1926000526020600020906020601f840160051c83019310611cf3575b601f0160051c0190611c9f565b565b9091508190611ce4565b600654811015611b4c576003906006600052027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0190600090565b90808214611e1257611d4a8154611a42565b9067ffffffffffffffff821161196057611d68826110c98554611a42565b600090601f8311600114611da757611d98929160009183611d9c5750508160011b916000199060031b1c19161790565b9055565b0154905038806110f0565b815260208082208483528183209291601f1985169083905b828210611df9575050908460019594939210611de0575b505050811b019055565b015460001960f88460031b161c19169055388080611dd6565b8495819295850154815560018091019601940190611dbf565b5050565b90611e4957818103611e26575050565b60028083611cf194548455611e416001820160018601611d38565b019101611d38565b634e487b7160e01b600052600060045260246000fd5b611e698154611a42565b9081611e73575050565b81601f60009311600114611e85575055565b908083918252611ea4601f60208420940160051c840160018501611c9f565b5555565b9190611e4957808203611eb9575050565b60018181925484550154910155565b6001548015611ef15760001901611ede81611b12565b611e495760018160008093550155600155565b634e487b7160e01b600052603160045260246000fd5b3360009081527fb16e88c42fd4e48df2dd6a2eabd6bc9aec654ec170056b470819f8892cc6431c60205260409020547fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217759060ff1615611f635750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b8060005260008051602061238583398151915260205260406000203360005260205260ff6040600020541615611f635750565b60005b815181101561203b576001906001600160f81b0319606160f81b81611fdc8487611c7b565b5116101580612021575b611ff2575b5001611fb7565b611ffc8285611c7b565b5161200a60f891821c611c8c565b901b1660001a61201a8285611c7b565b5338611feb565b50603d60f91b816120328487611c7b565b51161115611fe6565b509060005b81518110156120c4576001906001600160f81b0319606160f81b816120658487611c7b565b51161015806120aa575b61207b575b5001612040565b6120858285611c7b565b5161209360f891821c611c8c565b901b1660001a6120a38285611c7b565b5338612074565b50603d60f91b816120bb8487611c7b565b5116111561206f565b506121126021604051809360206120e481840197888151938492016118fc565b8201602f60f81b602082015261210382518093602087850191016118fc565b01036001810184520182611992565b51902090565b6001600160a01b031660008181527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d60205260408120549091906000805160206123858339815191529060ff166121b3578280526020526040822081835260205260408220600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b505090565b6001600160a01b031660008181527fb16e88c42fd4e48df2dd6a2eabd6bc9aec654ec170056b470819f8892cc6431c60205260408120549091907fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775906000805160206123858339815191529060ff16612274578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b50505090565b9060009180835260008051602061238583398151915280602052604084209260018060a01b03169283855260205260ff60408520541615600014612274578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b9060009180835260008051602061238583398151915280602052604084209260018060a01b03169283855260205260ff60408520541660001461227457818452602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a460019056fe02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800a2646970667358221220e5f17d752fc1480ba9771ecd51d83d700e7b129699ed753e0ab161b7a552453964736f6c63430008180033",
  "devdoc": {
    "author": "Gildi Company",
    "custom:security-contact": "security@gildi.io",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AssetNotFound(uint256)": [
        {
          "details": "Thrown when an asset is not found",
          "params": {
            "assetId": "The ID of the asset that was not found"
          }
        }
      ],
      "IndexOutOfBounds()": [
        {
          "details": "Thrown when an index is out of bounds"
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "InvalidPairId()": [
        {
          "details": "Thrown when an invalid pair ID is provided"
        }
      ],
      "InvalidSymbol()": [
        {
          "details": "Thrown when a symbol contains invalid characters"
        }
      ],
      "InvalidSymbolLength()": [
        {
          "details": "Thrown when a symbol length is invalid"
        }
      ],
      "NotAdmin()": [
        {
          "details": "Thrown when a non-admin attempts to perform an admin-only action"
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "PairNotFound()": [
        {
          "details": "Thrown when a pair is not found"
        }
      ],
      "ResolverAddressZero()": [
        {
          "details": "Thrown when a resolver address is zero"
        }
      ],
      "SymbolTaken()": [
        {
          "details": "Thrown when a symbol is already taken"
        }
      ]
    },
    "events": {
      "AssetDeleted(uint256,string,string)": {
        "params": {
          "assetId": "The asset ID",
          "name": "The asset name",
          "symbol": "The asset symbol"
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "PairDeleted(bytes32,uint256,uint256)": {
        "params": {
          "baseAssetId": "The base asset id",
          "pairId": "The pair ID",
          "quoteAssetId": "The quote asset id"
        }
      },
      "ResolverAdded(string,string,address)": {
        "params": {
          "baseAsset": "The base asset address",
          "quoteAsset": "The quote asset address",
          "resolver": "The address of the resolver contract"
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addAsset(string,string)": {
        "params": {
          "_name": "The name of the asset",
          "_symbol": "The symbol of the asset"
        },
        "returns": {
          "_0": "The ID of the newly added asset"
        }
      },
      "addPair(uint256,uint256,address)": {
        "params": {
          "_baseAssetId": "The ID of the base asset",
          "_quoteAssetId": "The ID of the quote asset",
          "_resolver": "The resolver contract for the pair"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "deleteAsset(uint256)": {
        "params": {
          "_assetId": "The ID of the asset to delete"
        }
      },
      "deletePair(bytes32)": {
        "params": {
          "_pairId": "The ID of the pair to delete"
        }
      },
      "getAssetById(uint256)": {
        "params": {
          "_assetId": "The ID of the asset to retrieve"
        },
        "returns": {
          "_0": "The asset with the specified ID"
        }
      },
      "getAssets()": {
        "returns": {
          "_0": "An array of all assets in the registry"
        }
      },
      "getPairs()": {
        "returns": {
          "_0": "An array of PairInfo structs containing all registered pairs"
        }
      },
      "getPairsByQuoteAsset(uint256)": {
        "params": {
          "_quoteAssetId": "The ID of the quote asset to filter by"
        },
        "returns": {
          "_0": "An array of pair strings in the format \"BASE/QUOTE\""
        }
      },
      "getPrice(bytes32)": {
        "params": {
          "pairId": "The identifier of the asset pair"
        },
        "returns": {
          "_0": "The price data for the asset pair"
        }
      },
      "getPriceById(uint256,uint256)": {
        "params": {
          "_baseAssetId": "The ID of the base asset",
          "_quoteAssetId": "The ID of the quote asset"
        },
        "returns": {
          "_0": "Price data for the specified asset pair"
        }
      },
      "getPriceNoOlderThan(bytes32,uint256)": {
        "params": {
          "age": "The maximum age of the price data in seconds",
          "pairId": "The identifier of the asset pair"
        }
      },
      "getResolver(bytes32)": {
        "params": {
          "_pairId": "The identifier of the asset pair"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address)": {
        "params": {
          "_contractAdmin": "The address of the contract admin",
          "_defaultAdmin": "The address of the default admin"
        }
      },
      "pairExistsById(bytes32)": {
        "params": {
          "_pairId": "The identifier of the asset pair"
        },
        "returns": {
          "_0": "True if the pair exists"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "updateResolver(uint256,uint256,address)": {
        "params": {
          "_baseAssetId": "The ID of the base asset",
          "_quoteAssetId": "The ID of the quote asset",
          "_resolver": "The new resolver contract for the pair"
        }
      }
    },
    "stateVariables": {
      "allAssets": {
        "details": "Store assets in an array for getAssets()"
      },
      "assetRegistry": {
        "details": "Map asset ID -> Asset"
      },
      "nextAssetId": {
        "details": "Next asset ID to be assigned"
      },
      "pairExists": {
        "details": "Mapping to track if a pair exists"
      },
      "pairResolvers": {
        "details": "Mapping from pair hash to IGildiPriceResolver implementation"
      },
      "pairs": {
        "details": "Array of all pairs"
      },
      "symbolToId": {
        "details": "Maps uppercase symbol -> assetId"
      }
    },
    "title": "Gildi Price Oracle",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AssetDeleted(uint256,string,string)": {
        "notice": "Emitted when an asset is deleted"
      },
      "PairDeleted(bytes32,uint256,uint256)": {
        "notice": "Emitted when a pair is deleted"
      },
      "ResolverAdded(string,string,address)": {
        "notice": "Emitted when a resolver is added for a pair"
      }
    },
    "kind": "user",
    "methods": {
      "addAsset(string,string)": {
        "notice": "Adds a new asset to the registry"
      },
      "addPair(uint256,uint256,address)": {
        "notice": "Add a new pair using numeric asset IDs"
      },
      "deleteAsset(uint256)": {
        "notice": "Deletes an asset and all pairs that reference it"
      },
      "deletePair(bytes32)": {
        "notice": "Deletes a pair from the oracle"
      },
      "getAssetById(uint256)": {
        "notice": "Return asset by ID"
      },
      "getAssets()": {
        "notice": "Return all registered assets"
      },
      "getPairs()": {
        "notice": "Return all pairs in the form \"BASE/QUOTE\" for direct usage"
      },
      "getPairsByQuoteAsset(uint256)": {
        "notice": "Return pairs that use a specific quote asset ID"
      },
      "getPrice(bytes32)": {
        "notice": "Retrieves the price data for a given pair ID"
      },
      "getPriceById(uint256,uint256)": {
        "notice": "Overload to get price by numeric IDs"
      },
      "getPriceNoOlderThan(bytes32,uint256)": {
        "notice": "Retrieves the price data for a given pair ID, with a maximum age"
      },
      "getResolver(bytes32)": {
        "notice": "Retrieves the resolver for a specific asset pair"
      },
      "initialize(address,address)": {
        "notice": "Initializes the contract and sets up roles"
      },
      "pairExistsById(bytes32)": {
        "notice": "Checks if a pair with the given ID exists"
      },
      "updateResolver(uint256,uint256,address)": {
        "notice": "Update the resolver for an existing pair"
      }
    },
    "notice": "Manages asset pairs and delegates price resolution to resolvers",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 49956,
        "contract": "contracts/oracles/price/GildiPriceOracle.sol:GildiPriceOracle",
        "label": "pairResolvers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_contract(IGildiPriceResolver)23535)"
      },
      {
        "astId": 50014,
        "contract": "contracts/oracles/price/GildiPriceOracle.sol:GildiPriceOracle",
        "label": "pairs",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Pair)50046_storage)dyn_storage"
      },
      {
        "astId": 50019,
        "contract": "contracts/oracles/price/GildiPriceOracle.sol:GildiPriceOracle",
        "label": "pairExists",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 50025,
        "contract": "contracts/oracles/price/GildiPriceOracle.sol:GildiPriceOracle",
        "label": "assetRegistry",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Asset)23400_storage)"
      },
      {
        "astId": 50028,
        "contract": "contracts/oracles/price/GildiPriceOracle.sol:GildiPriceOracle",
        "label": "nextAssetId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 50033,
        "contract": "contracts/oracles/price/GildiPriceOracle.sol:GildiPriceOracle",
        "label": "symbolToId",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 50038,
        "contract": "contracts/oracles/price/GildiPriceOracle.sol:GildiPriceOracle",
        "label": "allAssets",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(Asset)23400_storage)dyn_storage"
      }
    ],
    "types": {
      "t_array(t_struct(Asset)23400_storage)dyn_storage": {
        "base": "t_struct(Asset)23400_storage",
        "encoding": "dynamic_array",
        "label": "struct IGildiPriceOracle.Asset[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Pair)50046_storage)dyn_storage": {
        "base": "t_struct(Pair)50046_storage",
        "encoding": "dynamic_array",
        "label": "struct GildiPriceOracle.Pair[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IGildiPriceResolver)23535": {
        "encoding": "inplace",
        "label": "contract IGildiPriceResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_contract(IGildiPriceResolver)23535)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => contract IGildiPriceResolver)",
        "numberOfBytes": "32",
        "value": "t_contract(IGildiPriceResolver)23535"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Asset)23400_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IGildiPriceOracle.Asset)",
        "numberOfBytes": "32",
        "value": "t_struct(Asset)23400_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Asset)23400_storage": {
        "encoding": "inplace",
        "label": "struct IGildiPriceOracle.Asset",
        "members": [
          {
            "astId": 23393,
            "contract": "contracts/oracles/price/GildiPriceOracle.sol:GildiPriceOracle",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23396,
            "contract": "contracts/oracles/price/GildiPriceOracle.sol:GildiPriceOracle",
            "label": "symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 23399,
            "contract": "contracts/oracles/price/GildiPriceOracle.sol:GildiPriceOracle",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Pair)50046_storage": {
        "encoding": "inplace",
        "label": "struct GildiPriceOracle.Pair",
        "members": [
          {
            "astId": 50042,
            "contract": "contracts/oracles/price/GildiPriceOracle.sol:GildiPriceOracle",
            "label": "baseAssetId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 50045,
            "contract": "contracts/oracles/price/GildiPriceOracle.sol:GildiPriceOracle",
            "label": "quoteAssetId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}