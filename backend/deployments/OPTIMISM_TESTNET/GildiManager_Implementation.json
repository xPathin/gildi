{
  "address": "0x90164f001753dd44756616f621dda4Fee12f5a8D",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "roles",
          "type": "bytes32[]"
        }
      ],
      "name": "AccessControlUnauthorizedAccountAny",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AddressZeroNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "InsufficientAvailableBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unassignedShares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredAmount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientUnassignedShares",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchSizeMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "batchSizeMax",
          "type": "uint256"
        }
      ],
      "name": "InvalidBatchSize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "expectedState",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "actualState",
          "type": "bool"
        }
      ],
      "name": "InvalidLockState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotFullyAssignedShares",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ReleaseAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ReleaseDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ReleaseIsDeleting",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ReleaseTokenAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SharesMustNotBeEmpty",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxShares",
          "type": "uint256"
        }
      ],
      "name": "TooManyShares",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "expectedState",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "actualState",
          "type": "bool"
        }
      ],
      "name": "WrongInitialSaleState",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "releaseId",
          "type": "uint256"
        }
      ],
      "name": "InitialSaleEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "releaseId",
          "type": "uint256"
        }
      ],
      "name": "InitialSaleStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "releaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deletedShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingOwners",
          "type": "uint256"
        }
      ],
      "name": "ReleaseBatchDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "releaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReleaseCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "releaseId",
          "type": "uint256"
        }
      ],
      "name": "ReleaseDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "releaseId",
          "type": "uint256"
        }
      ],
      "name": "ReleaseMarkedForDeletion",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "releaseId",
          "type": "uint256"
        }
      ],
      "name": "ReleaseUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "releaseId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "ShareAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "releaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "name": "SharesAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenWithdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARKETPLACE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELEASE_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGildiManager.UserShare[]",
          "name": "_sharesBatch",
          "type": "tuple[]"
        }
      ],
      "name": "assignShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGildiManager.TokenBalance",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGildiManager.TokenBalance[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_batchSizeOwners",
          "type": "uint256"
        }
      ],
      "name": "batchDeleteRelease",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        }
      ],
      "name": "cancelInitialSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ownershipTrackingTimePeriod",
          "type": "uint256"
        }
      ],
      "name": "createNewRelease",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        }
      ],
      "name": "endInitialSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cursor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "fetchSharesInPeriod",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalNumberOfShares",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "shares",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IGildiManager.UserShare[]",
              "name": "userShares",
              "type": "tuple[]"
            },
            {
              "internalType": "bool",
              "name": "hasMore",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "nextCursor",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGildiManager.SharesReport",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllReleaseIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAvailableBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        }
      ],
      "name": "getReleaseById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "locked",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "unlockedAt",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "inInitialSale",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "totalShares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unassignedShares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "burnedShares",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "deleting",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "deletedShares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGildiManager.RWARelease",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gildiToken",
      "outputs": [
        {
          "internalType": "contract IGildiToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_initialAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_initialReleaseManager",
          "type": "address"
        },
        {
          "internalType": "contract IGildiToken",
          "name": "_rwaToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        }
      ],
      "name": "isFullyAssigned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        }
      ],
      "name": "isInInitialSale",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        }
      ],
      "name": "isLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountToLock",
          "type": "uint256"
        }
      ],
      "name": "lockTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownersOfToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        }
      ],
      "name": "releaseExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "releaseOwnershipStorages",
      "outputs": [
        {
          "internalType": "contract GildiManagerOwnershipStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rwaReleaseIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rwaReleases",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "locked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "unlockedAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "inInitialSale",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unassignedShares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "burnedShares",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "deleting",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "deletedShares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        }
      ],
      "name": "startInitialSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferOwnershipInitialSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_releaseId",
          "type": "uint256"
        }
      ],
      "name": "unlockRelease",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountToUnlock",
          "type": "uint256"
        }
      ],
      "name": "unlockTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa870cb237fd1e813e0d8285fc6bd79e04c38dd9cc669ed162598b3b81e3f8c4a",
  "receipt": {
    "to": null,
    "from": "0xdda45D610A204EB5CB204e9d49920F788296C676",
    "contractAddress": "0x90164f001753dd44756616f621dda4Fee12f5a8D",
    "transactionIndex": 2,
    "gasUsed": "4760873",
    "logsBloom": "0x
    "blockHash": "0xb4173a127c9c4c7707e365da7da6f0025cb0b2c4feddd7f4afd76fced6210689",
    "transactionHash": "0xa870cb237fd1e813e0d8285fc6bd79e04c38dd9cc669ed162598b3b81e3f8c4a",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 33459879,
        "transactionHash": "0xa870cb237fd1e813e0d8285fc6bd79e04c38dd9cc669ed162598b3b81e3f8c4a",
        "address": "0x90164f001753dd44756616f621dda4Fee12f5a8D",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0xb4173a127c9c4c7707e365da7da6f0025cb0b2c4feddd7f4afd76fced6210689"
      }
    ],
    "blockNumber": 33459879,
    "cumulativeGasUsed": "4945821",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5fcb370cb2b9ee0340656465635a79fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"}],\"name\":\"AccessControlUnauthorizedAccountAny\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressZeroNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"InsufficientAvailableBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unassignedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredAmount\",\"type\":\"uint256\"}],\"name\":\"InsufficientUnassignedShares\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchSizeMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchSizeMax\",\"type\":\"uint256\"}],\"name\":\"InvalidBatchSize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"expectedState\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"actualState\",\"type\":\"bool\"}],\"name\":\"InvalidLockState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFullyAssignedShares\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ReleaseAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ReleaseDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ReleaseIsDeleting\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ReleaseTokenAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SharesMustNotBeEmpty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"}],\"name\":\"TooManyShares\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"expectedState\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"actualState\",\"type\":\"bool\"}],\"name\":\"WrongInitialSaleState\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"releaseId\",\"type\":\"uint256\"}],\"name\":\"InitialSaleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"releaseId\",\"type\":\"uint256\"}],\"name\":\"InitialSaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"releaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deletedShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingOwners\",\"type\":\"uint256\"}],\"name\":\"ReleaseBatchDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"releaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReleaseCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"releaseId\",\"type\":\"uint256\"}],\"name\":\"ReleaseDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"releaseId\",\"type\":\"uint256\"}],\"name\":\"ReleaseMarkedForDeletion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"releaseId\",\"type\":\"uint256\"}],\"name\":\"ReleaseUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"releaseId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"ShareAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"releaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"SharesAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKETPLACE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELEASE_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"internalType\":\"struct IGildiManager.UserShare[]\",\"name\":\"_sharesBatch\",\"type\":\"tuple[]\"}],\"name\":\"assignShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IGildiManager.TokenBalance\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IGildiManager.TokenBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_batchSizeOwners\",\"type\":\"uint256\"}],\"name\":\"batchDeleteRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"}],\"name\":\"cancelInitialSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ownershipTrackingTimePeriod\",\"type\":\"uint256\"}],\"name\":\"createNewRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"}],\"name\":\"endInitialSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"fetchSharesInPeriod\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalNumberOfShares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"internalType\":\"struct IGildiManager.UserShare[]\",\"name\":\"userShares\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"hasMore\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nextCursor\",\"type\":\"uint256\"}],\"internalType\":\"struct IGildiManager.SharesReport\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllReleaseIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAvailableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"}],\"name\":\"getReleaseById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inInitialSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unassignedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnedShares\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deleting\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deletedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"internalType\":\"struct IGildiManager.RWARelease\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gildiToken\",\"outputs\":[{\"internalType\":\"contract IGildiToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialReleaseManager\",\"type\":\"address\"},{\"internalType\":\"contract IGildiToken\",\"name\":\"_rwaToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"}],\"name\":\"isFullyAssigned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"}],\"name\":\"isInInitialSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"}],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToLock\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownersOfToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"}],\"name\":\"releaseExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"releaseOwnershipStorages\",\"outputs\":[{\"internalType\":\"contract GildiManagerOwnershipStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rwaReleaseIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rwaReleases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inInitialSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unassignedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnedShares\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deleting\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deletedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"}],\"name\":\"startInitialSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferOwnershipInitialSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseId\",\"type\":\"uint256\"}],\"name\":\"unlockRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToUnlock\",\"type\":\"uint256\"}],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Patrick Fischer (Pathin) > https://pathin.me\",\"custom:security-contact\":\"security@gildi.io\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"assignShares(uint256,(address,uint256)[])\":{\"details\":\"The shares are assigned in a batch to prevent gas limit issues.\",\"params\":{\"_releaseId\":\"The ID of the Royalty Rights Token / release.\",\"_sharesBatch\":\"The shares to assign.\"}},\"balanceOf(address)\":{\"params\":{\"_account\":\"The account to fetch the balance for.\"}},\"balanceOf(uint256,address)\":{\"params\":{\"_account\":\"The account to fetch the balance for.\",\"_tokenId\":\"The token ID.\"}},\"batchDeleteRelease(uint256,uint256)\":{\"details\":\"Batch deletion is used to prevent gas limit issues.\",\"params\":{\"_batchSizeOwners\":\"The number of owners to delete in a batch.\",\"_releaseId\":\"The ID of the Royalty Rights Token / release.\"}},\"cancelInitialSale(uint256)\":{\"params\":{\"_releaseId\":\"The ID of the Royalty Rights Token / release.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createNewRelease(uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount of the token.\",\"_ownershipTrackingTimePeriod\":\"The time period in which we aggregate the shares owned by a user.\",\"_releaseId\":\"The ID of the Royalty Rights Token / release.\"}},\"deposit(uint256,address,uint256)\":{\"params\":{\"_account\":\"The account to deposit the tokens to.\",\"_amount\":\"The amount of tokens to deposit.\",\"_tokenId\":\"The ID of the Royalty Rights Token / release.\"}},\"endInitialSale(uint256)\":{\"params\":{\"_releaseId\":\"The ID of the Royalty Rights Token / release.\"}},\"fetchSharesInPeriod(uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_cursor\":\"The cursor for pagination.\",\"_end\":\"The end timestamp (exclusive).\",\"_limit\":\"The limit for pagination.\",\"_releaseId\":\"The release ID.\",\"_start\":\"The start timestamp.\"}},\"getAllReleaseIds()\":{\"returns\":{\"_0\":\"An array of all the release IDs.\"}},\"getAvailableBalance(uint256,address)\":{\"params\":{\"_account\":\"The account to fetch the balance for.\",\"_tokenId\":\"The token ID.\"},\"returns\":{\"_0\":\"The available balance of the user for the token.\"}},\"getReleaseById(uint256)\":{\"params\":{\"_releaseId\":\"The release ID.\"},\"returns\":{\"_0\":\"The release.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address,address)\":{\"params\":{\"_defaultAdmin\":\"The default admin.\",\"_initialAdmin\":\"The initial admin.\",\"_initialReleaseManager\":\"The initial release manager.\",\"_rwaToken\":\"The RWA token contract.\"}},\"isInInitialSale(uint256)\":{\"params\":{\"_releaseId\":\"The release ID.\"},\"returns\":{\"_0\":\"True if the release is in the initial sale, false otherwise.\"}},\"isLocked(uint256)\":{\"params\":{\"_releaseId\":\"The release ID.\"},\"returns\":{\"_0\":\"True if the release is locked, false otherwise.\"}},\"lockTokens(address,uint256,uint256)\":{\"params\":{\"_account\":\"The account to lock the tokens for.\",\"_amountToLock\":\"The amount of tokens to lock.\",\"_tokenId\":\"The ID of the Royalty Rights Token / release.\"}},\"ownersOfToken(uint256)\":{\"returns\":{\"_0\":\"The token owners.\"}},\"releaseExists(uint256)\":{\"params\":{\"_releaseId\":\"The ID of the Royalty Rights Token / release.\"},\"returns\":{\"_0\":\"True if the release exists, false otherwise.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"startInitialSale(uint256)\":{\"params\":{\"_releaseId\":\"The ID of the Royalty Rights Token / release.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferOwnership(uint256,address,address,uint256)\":{\"params\":{\"_amount\":\"The amount of shares to transfer.\",\"_from\":\"The address of the current owner.\",\"_to\":\"The address of the new owner.\",\"_tokenId\":\"The ID of the Royalty Rights Token / release.\"}},\"transferOwnershipInitialSale(uint256,address,address,uint256)\":{\"params\":{\"_amount\":\"The amount of shares to transfer.\",\"_from\":\"The address of the current owner.\",\"_to\":\"The address of the new owner.\",\"_tokenId\":\"The ID of the Royalty Rights Token / release.\"}},\"unlockRelease(uint256)\":{\"params\":{\"_releaseId\":\"The ID of the Royalty Rights Token / release.\"}},\"unlockTokens(address,uint256,uint256)\":{\"params\":{\"_account\":\"The account to unlock the tokens for.\",\"_amountToUnlock\":\"The amount of tokens to unlock.\",\"_tokenId\":\"The ID of the Royalty Rights Token / release.\"}},\"withdraw(uint256,address,uint256)\":{\"params\":{\"_account\":\"The account to withdraw the tokens from.\",\"_amount\":\"The amount of tokens to withdraw.\",\"_tokenId\":\"The ID of the Royalty Rights Token / release.\"}}},\"title\":\"GildiManager\",\"version\":1},\"userdoc\":{\"errors\":{\"AccessControlUnauthorizedAccountAny(address,bytes32[])\":[{\"notice\":\"Throws if the caller does not have any of the required roles.\"}]},\"kind\":\"user\",\"methods\":{\"ADMIN_ROLE()\":{\"notice\":\"A role for the admin.\"},\"MARKETPLACE_ROLE()\":{\"notice\":\"A role for marketplace contracts.\"},\"RELEASE_MANAGER_ROLE()\":{\"notice\":\"A role that allows the contract to manage releases.\"},\"assignShares(uint256,(address,uint256)[])\":{\"notice\":\"Assigns the user shares to a royalty rights release in a batch operation.\"},\"balanceOf(address)\":{\"notice\":\"Fetches the balance of a user for all tokens.\"},\"balanceOf(uint256,address)\":{\"notice\":\"Fetches the balance of a user for a specific token.\"},\"batchDeleteRelease(uint256,uint256)\":{\"notice\":\"Deletes a release in batches.\"},\"cancelInitialSale(uint256)\":{\"notice\":\"Cancels the initial sale of a release.\"},\"createNewRelease(uint256,uint256,uint256)\":{\"notice\":\"Create a new release.\"},\"deposit(uint256,address,uint256)\":{\"notice\":\"Deposits royalty rights tokens into the manager.\"},\"endInitialSale(uint256)\":{\"notice\":\"Ends the initial sale of a release.\"},\"fetchSharesInPeriod(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Fetch the shares of a release owned by a user in a specific time period paginated.\"},\"getAllReleaseIds()\":{\"notice\":\"Fetches all the release IDs.\"},\"getAvailableBalance(uint256,address)\":{\"notice\":\"Fetches the available balance of a user for a specific token.\"},\"getReleaseById(uint256)\":{\"notice\":\"Gets a release by its ID.\"},\"gildiToken()\":{\"notice\":\"The Gildi token contract.\"},\"initialize(address,address,address,address)\":{\"notice\":\"Initialize the contract.\"},\"isFullyAssigned(uint256)\":{\"notice\":\"Checks if the release is fully assigned.\"},\"isInInitialSale(uint256)\":{\"notice\":\"Returns if the release is in the initial sale.\"},\"isLocked(uint256)\":{\"notice\":\"Checks if the release is locked.\"},\"lockTokens(address,uint256,uint256)\":{\"notice\":\"Locks tokens for a user.\"},\"ownersOfToken(uint256)\":{\"notice\":\"Get the owners of a token.\"},\"releaseExists(uint256)\":{\"notice\":\"Check if a release exists.\"},\"releaseOwnershipStorages(uint256)\":{\"notice\":\"Mapping of ownership storages.\"},\"rwaReleaseIds(uint256)\":{\"notice\":\"An array of releases.\"},\"rwaReleases(uint256)\":{\"notice\":\"The RWA releases.\"},\"startInitialSale(uint256)\":{\"notice\":\"Starts the initial sale of a release.\"},\"transferOwnership(uint256,address,address,uint256)\":{\"notice\":\"Transfers ownership of a release's shares to another user.\"},\"transferOwnershipInitialSale(uint256,address,address,uint256)\":{\"notice\":\"Transfers ownership of a release's shares to another user during the initial sale.\"},\"unlockRelease(uint256)\":{\"notice\":\"Unlocks a release.\"},\"unlockTokens(address,uint256,uint256)\":{\"notice\":\"Unlocks tokens for a user.\"},\"withdraw(uint256,address,uint256)\":{\"notice\":\"Withdraws royalty rights tokens from the manager.\"}},\"notice\":\"A contract which tracks ownership of ERC1155 RWAs and allows for the transfer of ownership.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/manager/GildiManager.sol\":\"GildiManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x85a70e2b1b65e9ba456add364d22b97eb9944083df1c39c0b4bd6a4b5aa386a4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\\n        return INITIALIZABLE_STORAGE;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        bytes32 slot = _initializableStorageSlot();\\n        assembly {\\n            $.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC-1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155HolderUpgradeable is Initializable, ERC165Upgradeable, IERC1155Receiver {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xe13d55937d833c21fd0efb8cb42cff5404b613f25dbeebd8c41f16f673b7eaa7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x6694b63ddb2c59bbe341c846171798350e8f72fa02189fcdeaca864e28b54e1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\\n\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xbff9f59c84e5337689161ce7641c0ef8e872d6a7536fbc1f5133f128887aba3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[ERC].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {IERC1155Receiver-onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {IERC1155Receiver-onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf189f9b417fe1931e1ab706838aff1128528694a9fcdb5ff7665197f2ca57d09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC-1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC-1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x6ec6d7fce29668ede560c7d2e10f9d10de3473f5298e431e70a5767db42fa620\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Arrays.sol)\\n// This file was procedurally generated from scripts/generate/templates/Arrays.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Comparators} from \\\"./Comparators.sol\\\";\\nimport {SlotDerivation} from \\\"./SlotDerivation.sol\\\";\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using SlotDerivation for bytes32;\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Sort an array of uint256 (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        uint256[] memory array,\\n        function(uint256, uint256) pure returns (bool) comp\\n    ) internal pure returns (uint256[] memory) {\\n        _quickSort(_begin(array), _end(array), comp);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of uint256 in increasing order.\\n     */\\n    function sort(uint256[] memory array) internal pure returns (uint256[] memory) {\\n        sort(array, Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Sort an array of address (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        address[] memory array,\\n        function(address, address) pure returns (bool) comp\\n    ) internal pure returns (address[] memory) {\\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of address in increasing order.\\n     */\\n    function sort(address[] memory array) internal pure returns (address[] memory) {\\n        sort(_castToUint256Array(array), Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Sort an array of bytes32 (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        bytes32[] memory array,\\n        function(bytes32, bytes32) pure returns (bool) comp\\n    ) internal pure returns (bytes32[] memory) {\\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of bytes32 in increasing order.\\n     */\\n    function sort(bytes32[] memory array) internal pure returns (bytes32[] memory) {\\n        sort(_castToUint256Array(array), Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Performs a quick sort of a segment of memory. The segment sorted starts at `begin` (inclusive), and stops\\n     * at end (exclusive). Sorting follows the `comp` comparator.\\n     *\\n     * Invariant: `begin <= end`. This is the case when initially called by {sort} and is preserved in subcalls.\\n     *\\n     * IMPORTANT: Memory locations between `begin` and `end` are not validated/zeroed. This function should\\n     * be used only if the limits are within a memory array.\\n     */\\n    function _quickSort(uint256 begin, uint256 end, function(uint256, uint256) pure returns (bool) comp) private pure {\\n        unchecked {\\n            if (end - begin < 0x40) return;\\n\\n            // Use first element as pivot\\n            uint256 pivot = _mload(begin);\\n            // Position where the pivot should be at the end of the loop\\n            uint256 pos = begin;\\n\\n            for (uint256 it = begin + 0x20; it < end; it += 0x20) {\\n                if (comp(_mload(it), pivot)) {\\n                    // If the value stored at the iterator's position comes before the pivot, we increment the\\n                    // position of the pivot and move the value there.\\n                    pos += 0x20;\\n                    _swap(pos, it);\\n                }\\n            }\\n\\n            _swap(begin, pos); // Swap pivot into place\\n            _quickSort(begin, pos, comp); // Sort the left side of the pivot\\n            _quickSort(pos + 0x20, end, comp); // Sort the right side of the pivot\\n        }\\n    }\\n\\n    /**\\n     * @dev Pointer to the memory location of the first element of `array`.\\n     */\\n    function _begin(uint256[] memory array) private pure returns (uint256 ptr) {\\n        assembly (\\\"memory-safe\\\") {\\n            ptr := add(array, 0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Pointer to the memory location of the first memory word (32bytes) after `array`. This is the memory word\\n     * that comes just after the last element of the array.\\n     */\\n    function _end(uint256[] memory array) private pure returns (uint256 ptr) {\\n        unchecked {\\n            return _begin(array) + array.length * 0x20;\\n        }\\n    }\\n\\n    /**\\n     * @dev Load memory word (as a uint256) at location `ptr`.\\n     */\\n    function _mload(uint256 ptr) private pure returns (uint256 value) {\\n        assembly {\\n            value := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @dev Swaps the elements memory location `ptr1` and `ptr2`.\\n     */\\n    function _swap(uint256 ptr1, uint256 ptr2) private pure {\\n        assembly {\\n            let value1 := mload(ptr1)\\n            let value2 := mload(ptr2)\\n            mstore(ptr1, value2)\\n            mstore(ptr2, value1)\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast address memory array to uint256 memory array\\n    function _castToUint256Array(address[] memory input) private pure returns (uint256[] memory output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast bytes32 memory array to uint256 memory array\\n    function _castToUint256Array(bytes32[] memory input) private pure returns (uint256[] memory output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast address comp function to uint256 comp function\\n    function _castToUint256Comp(\\n        function(address, address) pure returns (bool) input\\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast bytes32 comp function to uint256 comp function\\n    function _castToUint256Comp(\\n        function(bytes32, bytes32) pure returns (bool) input\\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * NOTE: The `array` is expected to be sorted in ascending order, and to\\n     * contain no repeated elements.\\n     *\\n     * IMPORTANT: Deprecated. This implementation behaves as {lowerBound} but lacks\\n     * support for repeated elements in the array. The {lowerBound} function should\\n     * be used instead.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Searches an `array` sorted in ascending order and returns the first\\n     * index that contains a value greater or equal than `element`. If no such index\\n     * exists (i.e. all values in the array are strictly less than `element`), the array\\n     * length is returned. Time complexity O(log n).\\n     *\\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/lower_bound[lower_bound].\\n     */\\n    function lowerBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value < element) {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Searches an `array` sorted in ascending order and returns the first\\n     * index that contains a value strictly greater than `element`. If no such index\\n     * exists (i.e. all values in the array are strictly less than `element`), the array\\n     * length is returned. Time complexity O(log n).\\n     *\\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/upper_bound[upper_bound].\\n     */\\n    function upperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Same as {lowerBound}, but with an array in memory.\\n     */\\n    function lowerBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeMemoryAccess(array, mid) < element) {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Same as {upperBound}, but with an array in memory.\\n     */\\n    function upperBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeMemoryAccess(array, mid) > element) {\\n                high = mid;\\n            } else {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes[] storage arr, uint256 pos) internal pure returns (StorageSlot.BytesSlot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getBytesSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(string[] storage arr, uint256 pos) internal pure returns (StorageSlot.StringSlot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getStringSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(bytes32[] memory arr, uint256 pos) internal pure returns (bytes32 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(bytes[] memory arr, uint256 pos) internal pure returns (bytes memory res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(string[] memory arr, uint256 pos) internal pure returns (string memory res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(address[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(bytes32[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(uint256[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(bytes[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(string[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa4b9958797e0e9cde82a090525e90f80d5745ba1c67ee72b488bd3087498a17e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Comparators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Comparators.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to compare values.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Comparators {\\n    function lt(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a < b;\\n    }\\n\\n    function gt(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a > b;\\n    }\\n}\\n\",\"keccak256\":\"0x302eecd8cf323b4690e3494a7d960b3cbce077032ab8ef655b323cdd136cec58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SlotDerivation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/SlotDerivation.sol)\\n// This file was procedurally generated from scripts/generate/templates/SlotDerivation.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for computing storage (and transient storage) locations from namespaces and deriving slots\\n * corresponding to standard patterns. The derivation method for array and mapping matches the storage layout used by\\n * the solidity language / compiler.\\n *\\n * See https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays[Solidity docs for mappings and dynamic arrays.].\\n *\\n * Example usage:\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using StorageSlot for bytes32;\\n *     using SlotDerivation for bytes32;\\n *\\n *     // Declare a namespace\\n *     string private constant _NAMESPACE = \\\"<namespace>\\\"; // eg. OpenZeppelin.Slot\\n *\\n *     function setValueInNamespace(uint256 key, address newValue) internal {\\n *         _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value = newValue;\\n *     }\\n *\\n *     function getValueInNamespace(uint256 key) internal view returns (address) {\\n *         return _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {StorageSlot}.\\n *\\n * NOTE: This library provides a way to manipulate storage locations in a non-standard way. Tooling for checking\\n * upgrade safety will ignore the slots accessed through this library.\\n *\\n * _Available since v5.1._\\n */\\nlibrary SlotDerivation {\\n    /**\\n     * @dev Derive an ERC-7201 slot from a string (namespace).\\n     */\\n    function erc7201Slot(string memory namespace) internal pure returns (bytes32 slot) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, sub(keccak256(add(namespace, 0x20), mload(namespace)), 1))\\n            slot := and(keccak256(0x00, 0x20), not(0xff))\\n        }\\n    }\\n\\n    /**\\n     * @dev Add an offset to a slot to get the n-th element of a structure or an array.\\n     */\\n    function offset(bytes32 slot, uint256 pos) internal pure returns (bytes32 result) {\\n        unchecked {\\n            return bytes32(uint256(slot) + pos);\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of the first element in an array from the slot where the length is stored.\\n     */\\n    function deriveArray(bytes32 slot) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, slot)\\n            result := keccak256(0x00, 0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, address key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, and(key, shr(96, not(0))))\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bool key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, iszero(iszero(key)))\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bytes32 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, uint256 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, int256 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, string memory key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            let length := mload(key)\\n            let begin := add(key, 0x20)\\n            let end := add(begin, length)\\n            let cache := mload(end)\\n            mstore(end, slot)\\n            result := keccak256(begin, add(length, 0x20))\\n            mstore(end, cache)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bytes memory key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            let length := mload(key)\\n            let begin := add(key, 0x20)\\n            let end := add(begin, length)\\n            let cache := mload(end)\\n            mstore(end, slot)\\n            result := keccak256(begin, add(length, 0x20))\\n            mstore(end, cache)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67672e4ca1dafdcc661d4eba8475cfac631fa0933309258e3af7644b92e1fb26\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {EnumerableSet} from \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n * - Map can be cleared (all entries removed) in O(n).\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n * - `uint256 -> bytes32` (`UintToBytes32Map`) since v5.1.0\\n * - `address -> address` (`AddressToAddressMap`) since v5.1.0\\n * - `address -> bytes32` (`AddressToBytes32Map`) since v5.1.0\\n * - `bytes32 -> address` (`Bytes32ToAddressMap`) since v5.1.0\\n * - `bytes -> bytes` (`BytesToBytesMap`) since v5.4.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for *;\\n\\n    // To implement this library for multiple types with as little code repetition as possible, we write it in\\n    // terms of a generic Map type with bytes32 keys and values. The Map implementation uses private functions,\\n    // and user-facing implementations such as `UintToAddressMap` are just wrappers around the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit in bytes32.\\n\\n    /**\\n     * @dev Query for a nonexistent map key.\\n     */\\n    error EnumerableMapNonexistentKey(bytes32 key);\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 key => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Removes all the entries from a map. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the map grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function clear(Bytes32ToBytes32Map storage map) internal {\\n        uint256 len = length(map);\\n        for (uint256 i = 0; i < len; ++i) {\\n            delete map._values[map._keys.at(i)];\\n        }\\n        map._keys.clear();\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32 key, bytes32 value) {\\n        bytes32 atKey = map._keys.at(index);\\n        return (atKey, map._values[atKey]);\\n    }\\n\\n    /**\\n     * @dev Tries to return the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool exists, bytes32 value) {\\n        bytes32 val = map._values[key];\\n        if (val == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, val);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == 0 && !contains(map, key)) {\\n            revert EnumerableMapNonexistentKey(key);\\n        }\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Returns an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    /**\\n     * @dev Returns an array containing a slice of the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(\\n        Bytes32ToBytes32Map storage map,\\n        uint256 start,\\n        uint256 end\\n    ) internal view returns (bytes32[] memory) {\\n        return map._keys.values(start, end);\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Removes all the entries from a map. O(n).\\n     *\\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\\n     * gas to fit in a block.\\n     */\\n    function clear(UintToUintMap storage map) internal {\\n        clear(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256 key, uint256 value) {\\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\\n        return (uint256(atKey), uint256(val));\\n    }\\n\\n    /**\\n     * @dev Tries to return the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool exists, uint256 value) {\\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(val));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Returns an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns an array containing a slice of the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToUintMap storage map, uint256 start, uint256 end) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner, start, end);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Removes all the entries from a map. O(n).\\n     *\\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\\n     * gas to fit in a block.\\n     */\\n    function clear(UintToAddressMap storage map) internal {\\n        clear(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256 key, address value) {\\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\\n        return (uint256(atKey), address(uint160(uint256(val))));\\n    }\\n\\n    /**\\n     * @dev Tries to return the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool exists, address value) {\\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(val))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Returns an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns an array containing a slice of the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToAddressMap storage map, uint256 start, uint256 end) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner, start, end);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToBytes32Map\\n\\n    struct UintToBytes32Map {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToBytes32Map storage map, uint256 key, bytes32 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToBytes32Map storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Removes all the entries from a map. O(n).\\n     *\\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\\n     * gas to fit in a block.\\n     */\\n    function clear(UintToBytes32Map storage map) internal {\\n        clear(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToBytes32Map storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToBytes32Map storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToBytes32Map storage map, uint256 index) internal view returns (uint256 key, bytes32 value) {\\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\\n        return (uint256(atKey), val);\\n    }\\n\\n    /**\\n     * @dev Tries to return the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToBytes32Map storage map, uint256 key) internal view returns (bool exists, bytes32 value) {\\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(key));\\n        return (success, val);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToBytes32Map storage map, uint256 key) internal view returns (bytes32) {\\n        return get(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToBytes32Map storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns an array containing a slice of the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToBytes32Map storage map, uint256 start, uint256 end) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner, start, end);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Removes all the entries from a map. O(n).\\n     *\\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\\n     * gas to fit in a block.\\n     */\\n    function clear(AddressToUintMap storage map) internal {\\n        clear(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address key, uint256 value) {\\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\\n        return (address(uint160(uint256(atKey))), uint256(val));\\n    }\\n\\n    /**\\n     * @dev Tries to return the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool exists, uint256 value) {\\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(val));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Returns an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns an array containing a slice of the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToUintMap storage map, uint256 start, uint256 end) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner, start, end);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToAddressMap\\n\\n    struct AddressToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToAddressMap storage map, address key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToAddressMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Removes all the entries from a map. O(n).\\n     *\\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\\n     * gas to fit in a block.\\n     */\\n    function clear(AddressToAddressMap storage map) internal {\\n        clear(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToAddressMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToAddressMap storage map, uint256 index) internal view returns (address key, address value) {\\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\\n        return (address(uint160(uint256(atKey))), address(uint160(uint256(val))));\\n    }\\n\\n    /**\\n     * @dev Tries to return the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToAddressMap storage map, address key) internal view returns (bool exists, address value) {\\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, address(uint160(uint256(val))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToAddressMap storage map, address key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(uint256(uint160(key)))))));\\n    }\\n\\n    /**\\n     * @dev Returns an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToAddressMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns an array containing a slice of the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(\\n        AddressToAddressMap storage map,\\n        uint256 start,\\n        uint256 end\\n    ) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner, start, end);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToBytes32Map\\n\\n    struct AddressToBytes32Map {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToBytes32Map storage map, address key, bytes32 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToBytes32Map storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Removes all the entries from a map. O(n).\\n     *\\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\\n     * gas to fit in a block.\\n     */\\n    function clear(AddressToBytes32Map storage map) internal {\\n        clear(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToBytes32Map storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToBytes32Map storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToBytes32Map storage map, uint256 index) internal view returns (address key, bytes32 value) {\\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\\n        return (address(uint160(uint256(atKey))), val);\\n    }\\n\\n    /**\\n     * @dev Tries to return the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToBytes32Map storage map, address key) internal view returns (bool exists, bytes32 value) {\\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, val);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToBytes32Map storage map, address key) internal view returns (bytes32) {\\n        return get(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToBytes32Map storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns an array containing a slice of the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(\\n        AddressToBytes32Map storage map,\\n        uint256 start,\\n        uint256 end\\n    ) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner, start, end);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Removes all the entries from a map. O(n).\\n     *\\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\\n     * gas to fit in a block.\\n     */\\n    function clear(Bytes32ToUintMap storage map) internal {\\n        clear(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32 key, uint256 value) {\\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\\n        return (atKey, uint256(val));\\n    }\\n\\n    /**\\n     * @dev Tries to return the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool exists, uint256 value) {\\n        (bool success, bytes32 val) = tryGet(map._inner, key);\\n        return (success, uint256(val));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Returns an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns an array containing a slice of the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToUintMap storage map, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner, start, end);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToAddressMap\\n\\n    struct Bytes32ToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToAddressMap storage map, bytes32 key, address value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Removes all the entries from a map. O(n).\\n     *\\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\\n     * gas to fit in a block.\\n     */\\n    function clear(Bytes32ToAddressMap storage map) internal {\\n        clear(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32 key, address value) {\\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\\n        return (atKey, address(uint160(uint256(val))));\\n    }\\n\\n    /**\\n     * @dev Tries to return the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool exists, address value) {\\n        (bool success, bytes32 val) = tryGet(map._inner, key);\\n        return (success, address(uint160(uint256(val))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, key))));\\n    }\\n\\n    /**\\n     * @dev Returns an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToAddressMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns an array containing a slice of the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(\\n        Bytes32ToAddressMap storage map,\\n        uint256 start,\\n        uint256 end\\n    ) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner, start, end);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Query for a nonexistent map key.\\n     */\\n    error EnumerableMapNonexistentBytesKey(bytes key);\\n\\n    struct BytesToBytesMap {\\n        // Storage of keys\\n        EnumerableSet.BytesSet _keys;\\n        mapping(bytes key => bytes) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(BytesToBytesMap storage map, bytes memory key, bytes memory value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(BytesToBytesMap storage map, bytes memory key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Removes all the entries from a map. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the map grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function clear(BytesToBytesMap storage map) internal {\\n        uint256 len = length(map);\\n        for (uint256 i = 0; i < len; ++i) {\\n            delete map._values[map._keys.at(i)];\\n        }\\n        map._keys.clear();\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(BytesToBytesMap storage map, bytes memory key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(BytesToBytesMap storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(\\n        BytesToBytesMap storage map,\\n        uint256 index\\n    ) internal view returns (bytes memory key, bytes memory value) {\\n        key = map._keys.at(index);\\n        value = map._values[key];\\n    }\\n\\n    /**\\n     * @dev Tries to return the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(\\n        BytesToBytesMap storage map,\\n        bytes memory key\\n    ) internal view returns (bool exists, bytes memory value) {\\n        value = map._values[key];\\n        exists = bytes(value).length != 0 || contains(map, key);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(BytesToBytesMap storage map, bytes memory key) internal view returns (bytes memory value) {\\n        bool exists;\\n        (exists, value) = tryGet(map, key);\\n        if (!exists) {\\n            revert EnumerableMapNonexistentBytesKey(key);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(BytesToBytesMap storage map) internal view returns (bytes[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    /**\\n     * @dev Returns an array containing a slice of the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(BytesToBytesMap storage map, uint256 start, uint256 end) internal view returns (bytes[] memory) {\\n        return map._keys.values(start, end);\\n    }\\n}\\n\",\"keccak256\":\"0x5360739db087f427430f8566608e9267df704d96928337a3a3b3e5382925c57f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Arrays} from \\\"../Arrays.sol\\\";\\nimport {Math} from \\\"../math/Math.sol\\\";\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n * - Set can be cleared (all elements removed) in O(n).\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * The following types are supported:\\n *\\n * - `bytes32` (`Bytes32Set`) since v3.3.0\\n * - `address` (`AddressSet`) since v3.3.0\\n * - `uint256` (`UintSet`) since v3.3.0\\n * - `string` (`StringSet`) since v5.4.0\\n * - `bytes` (`BytesSet`) since v5.4.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: This function has an unbounded cost that scales with set size. Developers should keep in mind that\\n     * using it may render the function uncallable if the set grows to the point where clearing it consumes too much\\n     * gas to fit in a block.\\n     */\\n    function _clear(Set storage set) private {\\n        uint256 len = _length(set);\\n        for (uint256 i = 0; i < len; ++i) {\\n            delete set._positions[set._values[i]];\\n        }\\n        Arrays.unsafeSetLength(set._values, 0);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    /**\\n     * @dev Return a slice of the set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set, uint256 start, uint256 end) private view returns (bytes32[] memory) {\\n        unchecked {\\n            end = Math.min(end, _length(set));\\n            start = Math.min(start, end);\\n\\n            uint256 len = end - start;\\n            bytes32[] memory result = new bytes32[](len);\\n            for (uint256 i = 0; i < len; ++i) {\\n                result[i] = Arrays.unsafeAccess(set._values, start + i).value;\\n            }\\n            return result;\\n        }\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function clear(Bytes32Set storage set) internal {\\n        _clear(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return a slice of the set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner, start, end);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function clear(AddressSet storage set) internal {\\n        _clear(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return a slice of the set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner, start, end);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function clear(UintSet storage set) internal {\\n        _clear(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return a slice of the set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner, start, end);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    struct StringSet {\\n        // Storage of set values\\n        string[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(string value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(StringSet storage set, string memory value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(StringSet storage set, string memory value) internal returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                string memory lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function clear(StringSet storage set) internal {\\n        uint256 len = length(set);\\n        for (uint256 i = 0; i < len; ++i) {\\n            delete set._positions[set._values[i]];\\n        }\\n        Arrays.unsafeSetLength(set._values, 0);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(StringSet storage set, string memory value) internal view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(StringSet storage set) internal view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(StringSet storage set, uint256 index) internal view returns (string memory) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(StringSet storage set) internal view returns (string[] memory) {\\n        return set._values;\\n    }\\n\\n    /**\\n     * @dev Return a slice of the set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(StringSet storage set, uint256 start, uint256 end) internal view returns (string[] memory) {\\n        unchecked {\\n            end = Math.min(end, length(set));\\n            start = Math.min(start, end);\\n\\n            uint256 len = end - start;\\n            string[] memory result = new string[](len);\\n            for (uint256 i = 0; i < len; ++i) {\\n                result[i] = Arrays.unsafeAccess(set._values, start + i).value;\\n            }\\n            return result;\\n        }\\n    }\\n\\n    struct BytesSet {\\n        // Storage of set values\\n        bytes[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(BytesSet storage set, bytes memory value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(BytesSet storage set, bytes memory value) internal returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes memory lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function clear(BytesSet storage set) internal {\\n        uint256 len = length(set);\\n        for (uint256 i = 0; i < len; ++i) {\\n            delete set._positions[set._values[i]];\\n        }\\n        Arrays.unsafeSetLength(set._values, 0);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(BytesSet storage set, bytes memory value) internal view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(BytesSet storage set) internal view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(BytesSet storage set, uint256 index) internal view returns (bytes memory) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(BytesSet storage set) internal view returns (bytes[] memory) {\\n        return set._values;\\n    }\\n\\n    /**\\n     * @dev Return a slice of the set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(BytesSet storage set, uint256 start, uint256 end) internal view returns (bytes[] memory) {\\n        unchecked {\\n            end = Math.min(end, length(set));\\n            start = Math.min(start, end);\\n\\n            uint256 len = end - start;\\n            bytes[] memory result = new bytes[](len);\\n            for (uint256 i = 0; i < len; ++i) {\\n                result[i] = Arrays.unsafeAccess(set._values, start + i).value;\\n            }\\n            return result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1fc283df727585919c3db301b948a3e827aee16917457ad7f916db9da2228e77\",\"license\":\"MIT\"},\"contracts/interfaces/manager/IGildiManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\n\\n/// @title IGildiManager\\n/// @notice Interface for the Gildi Manager.\\n/// @custom:security-contact security@gildi.io\\n/// @author Patrick Fischer (Pathin) > https://pathin.me\\ninterface IGildiManager is IERC165 {\\n    /// @notice A user share.\\n    struct UserShare {\\n        /// @notice The user address.\\n        address user;\\n        /// @notice The number shares owned by the user.\\n        uint256 shares;\\n    }\\n\\n    /// @notice A report of the shares owned by a user in a specific time period.\\n    struct SharesReport {\\n        /// @notice The token ID.\\n        uint256 tokenId;\\n        /// @notice The start timestamp of the report.\\n        uint256 start;\\n        /// @notice The end timestamp of the report.\\n        uint256 end;\\n        /// @notice The total number of shares owned by all users.\\n        uint256 totalNumberOfShares;\\n        /// @notice The shares owned by each user.\\n        UserShare[] userShares;\\n        /// @notice Info for Pagination, if there are more results.\\n        bool hasMore;\\n        /// @notice Next cursor for Pagination.\\n        uint256 nextCursor;\\n    }\\n\\n    struct TokenBalance {\\n        uint256 tokenId;\\n        uint256 amount;\\n        uint256 lockedAmount;\\n    }\\n\\n    /// @notice A GILDI RWA release.\\n    struct RWARelease {\\n        /// @notice The token ID of the release (equal to release id).\\n        uint256 tokenId;\\n        /// @notice If the release is locked.\\n        bool locked;\\n        /// @notice When the release was unlocked.\\n        uint256 unlockedAt;\\n        /// @notice If the release is in the initial sale.\\n        bool inInitialSale;\\n        /// @notice The total number of shares.\\n        uint256 totalShares;\\n        /// @notice The number of unassigned shares.\\n        uint256 unassignedShares;\\n        /// @notice The number of burned shares.\\n        uint256 burnedShares;\\n        /// @notice The release is deleting.\\n        bool deleting;\\n        /// @notice The number of shares deleted.\\n        uint256 deletedShares;\\n        /// @notice The timestamp of the creation.\\n        uint256 createdAt;\\n    }\\n\\n    /// @notice Fetches all the release IDs.\\n    /// @return An array of all the release IDs.\\n    function getAllReleaseIds() external view returns (uint256[] memory);\\n\\n    /// @notice Create a new release.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    /// @param _amount The amount of the token.\\n    /// @param _ownershipTrackingTimePeriod The time period in which we aggregate the shares owned by a user.\\n    function createNewRelease(uint256 _releaseId, uint256 _amount, uint256 _ownershipTrackingTimePeriod) external;\\n\\n    /// @notice Assigns the user shares to a royalty rights release in a batch operation.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    /// @param _sharesBatch The shares to assign.\\n    /// @dev The shares are assigned in a batch to prevent gas limit issues.\\n    function assignShares(uint256 _releaseId, UserShare[] calldata _sharesBatch) external;\\n\\n    /// @notice Starts the initial sale of a release.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    function startInitialSale(uint256 _releaseId) external;\\n\\n    /// @notice Cancels the initial sale of a release.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    function cancelInitialSale(uint256 _releaseId) external;\\n\\n    /// @notice Ends the initial sale of a release.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    function endInitialSale(uint256 _releaseId) external;\\n\\n    /// @notice Check if a release exists.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    /// @return True if the release exists, false otherwise.\\n    function releaseExists(uint256 _releaseId) external view returns (bool);\\n\\n    /// @notice Deletes a release in batches.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    /// @param _batchSizeOwners The number of owners to delete in a batch.\\n    /// @dev Batch deletion is used to prevent gas limit issues.\\n    function batchDeleteRelease(uint256 _releaseId, uint256 _batchSizeOwners) external;\\n\\n    /// @notice Unlocks a release.\\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\\n    function unlockRelease(uint256 _releaseId) external;\\n\\n    /// @notice Deposits royalty rights tokens into the manager.\\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\\n    /// @param _account The account to deposit the tokens to.\\n    /// @param _amount The amount of tokens to deposit.\\n    function deposit(uint256 _tokenId, address _account, uint256 _amount) external;\\n\\n    /// @notice Withdraws royalty rights tokens from the manager.\\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\\n    /// @param _account The account to withdraw the tokens from.\\n    /// @param _amount The amount of tokens to withdraw.\\n    function withdraw(uint256 _tokenId, address _account, uint256 _amount) external;\\n\\n    /// @notice Locks tokens for a user.\\n    /// @param _account The account to lock the tokens for.\\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\\n    /// @param _amountToLock The amount of tokens to lock.\\n    function lockTokens(address _account, uint256 _tokenId, uint256 _amountToLock) external;\\n\\n    /// @notice Unlocks tokens for a user.\\n    /// @param _account The account to unlock the tokens for.\\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\\n    /// @param _amountToUnlock The amount of tokens to unlock.\\n    function unlockTokens(address _account, uint256 _tokenId, uint256 _amountToUnlock) external;\\n\\n    /// @notice Transfers ownership of a release's shares to another user.\\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\\n    /// @param _from The address of the current owner.\\n    /// @param _to The address of the new owner.\\n    /// @param _amount The amount of shares to transfer.\\n    function transferOwnership(uint256 _tokenId, address _from, address _to, uint256 _amount) external;\\n\\n    /// @notice Transfers ownership of a release's shares to another user during the initial sale.\\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\\n    /// @param _from The address of the current owner.\\n    /// @param _to The address of the new owner.\\n    /// @param _amount The amount of shares to transfer.\\n    function transferOwnershipInitialSale(uint256 _tokenId, address _from, address _to, uint256 _amount) external;\\n\\n    /// @notice Gets a release by its ID.\\n    /// @param _releaseId The release ID.\\n    /// @return The release.\\n    function getReleaseById(uint256 _releaseId) external view returns (RWARelease memory);\\n\\n    /// @notice Checks if the release is locked.\\n    /// @param _releaseId The release ID.\\n    /// @return True if the release is locked, false otherwise.\\n    function isLocked(uint256 _releaseId) external view returns (bool);\\n\\n    /// @notice Returns if the release is in the initial sale.\\n    /// @param _releaseId The release ID.\\n    /// @return True if the release is in the initial sale, false otherwise.\\n    function isInInitialSale(uint256 _releaseId) external view returns (bool);\\n\\n    /// @notice Fetches the available balance of a user for a specific token.\\n    /// @param _tokenId The token ID.\\n    /// @param _account The account to fetch the balance for.\\n    /// @return The available balance of the user for the token.\\n    function getAvailableBalance(uint256 _tokenId, address _account) external view returns (uint256);\\n\\n    /// @notice Fetch the shares of a release owned by a user in a specific time period paginated.\\n    /// @param _releaseId The release ID.\\n    /// @param _start The start timestamp.\\n    /// @param _end The end timestamp (exclusive).\\n    /// @param _cursor The cursor for pagination.\\n    /// @param _limit The limit for pagination.\\n    function fetchSharesInPeriod(\\n        uint256 _releaseId,\\n        uint256 _start,\\n        uint256 _end,\\n        uint256 _cursor,\\n        uint256 _limit\\n    ) external view returns (SharesReport memory);\\n\\n    /// @notice Fetches the balance of a user for all tokens.\\n    /// @param _account The account to fetch the balance for.\\n    function balanceOf(address _account) external view returns (TokenBalance[] memory);\\n\\n    /// @notice Fetches the balance of a user for a specific token.\\n    /// @param _tokenId The token ID.\\n    /// @param _account The account to fetch the balance for.\\n    function balanceOf(uint256 _tokenId, address _account) external view returns (TokenBalance memory);\\n\\n    /// @notice Checks if the release is fully assigned.\\n    function isFullyAssigned(uint256 _releaseId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8d005682185f1eb885e73880eb7259a70aaba04c43c7c447ba872b8171101f51\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/token/IGildiToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\n\\n/// @title IGildiToken\\n/// @notice Interface for tokens of the Gildi platform.\\n/// @custom:security-contact security@gildi.io\\n/// @author Patrick Fischer (Pathin) > https://pathin.me\\ninterface IGildiToken is IERC1155 {\\n    /// @notice The balance of a specific token for an address.\\n    struct TokenBalance {\\n        /// @notice The token ID.\\n        uint256 tokenId;\\n        /// @notice The balance of the token.\\n        uint256 balance;\\n    }\\n\\n    struct MintBatch {\\n        address to;\\n        uint256[] ids;\\n        uint256[] amounts;\\n        bytes data;\\n    }\\n\\n    /// @notice Pause the contract.\\n    function pause() external;\\n\\n    /// @notice Unpause the contract.\\n    function unpause() external;\\n\\n    /// @notice The name of the token.\\n    function name() external view returns (string memory);\\n\\n    /// @notice The symbol of the token.\\n    function symbol() external view returns (string memory);\\n\\n    /// @notice Fetch the total supply of a specific token.\\n    /// @param _id The ID of the token.\\n    /// @return The total supply of the token.\\n    function totalSupply(uint256 _id) external view returns (uint256);\\n\\n    /// @notice Fetch the total supply of all tokens.\\n    /// @return The total supply of all tokens.\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Check if a token exists.\\n    /// @param _id The ID of the token.\\n    /// @return True if the token exists, false otherwise.\\n    function exists(uint256 _id) external view returns (bool);\\n\\n    /// @notice Mint a specific amount of a token.\\n    /// @param _account The address to mint the token to.\\n    /// @param _id The ID of the token.\\n    /// @param _amount The amount of the token to mint.\\n    /// @param _data The data to pass to the receiver.\\n    function mint(address _account, uint256 _id, uint256 _amount, bytes calldata _data) external;\\n\\n    /// @notice Batch mint a specific amount of tokens.\\n    /// @param _to The address to mint the tokens to.\\n    /// @param _ids The IDs of the tokens.\\n    /// @param _amounts The amounts of the tokens to mint.\\n    /// @param _data The data to pass to the receiver.\\n    function mintBatch(\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /// @notice Batch mint to many addresses.\\n    /// @param _mintBatches The mint batches.\\n    function mintBatchMany(MintBatch[] calldata _mintBatches) external;\\n\\n    /// @notice Burn a specific amount of a token.\\n    /// @param _account The address to burn the token from.\\n    /// @param _id The ID of the token.\\n    /// @param _value The amount of the token to burn.\\n    function burn(address _account, uint256 _id, uint256 _value) external;\\n\\n    /// @notice Burn a specific amount of a token in a batch.\\n    /// @param _account The address to burn the token from.\\n    /// @param _ids The IDs of the tokens.\\n    /// @param _values The amounts of the tokens to burn.\\n    function burnBatch(address _account, uint256[] calldata _ids, uint256[] calldata _values) external;\\n\\n    /// @notice Burn all tokens of a specific ID.\\n    /// @param _id The ID of the token.\\n    function burnAllById(uint256 _id) external;\\n\\n    /// @notice Fetch all tokens and their balances of an owner.\\n    /// @param _account The address of the owner.\\n    function tokensOfOwner(address _account) external view returns (TokenBalance[] memory ownedTokens);\\n}\\n\",\"keccak256\":\"0xba146bef2b6abcb90ab566e64692d4ebb0960e4377e3029beec7007631a21d90\",\"license\":\"UNLICENSED\"},\"contracts/manager/GildiManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableMap.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC165.sol';\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\n\\nimport '../interfaces/manager/IGildiManager.sol';\\nimport '../interfaces/token/IGildiToken.sol';\\nimport './GildiManagerOwnershipStorage.sol';\\n\\n/// @title GildiManager\\n/// @notice A contract which tracks ownership of ERC1155 RWAs and allows for the transfer of ownership.\\n/// @custom:security-contact security@gildi.io\\n/// @author Patrick Fischer (Pathin) > https://pathin.me\\ncontract GildiManager is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    ERC1155HolderUpgradeable,\\n    IGildiManager,\\n    ReentrancyGuardUpgradeable\\n{\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\n\\n    /// @notice A role that allows the contract to manage releases.\\n    bytes32 public constant RELEASE_MANAGER_ROLE = keccak256('RELEASE_MANAGER_ROLE');\\n    /// @notice A role for marketplace contracts.\\n    bytes32 public constant MARKETPLACE_ROLE = keccak256('MARKETPLACE_ROLE');\\n    /// @notice A role for the admin.\\n    bytes32 public constant ADMIN_ROLE = keccak256('ADMIN_ROLE');\\n\\n    enum Roles {\\n        RELEASE_MANAGER,\\n        MARKETPLACE,\\n        ADMIN\\n    }\\n\\n    /// @notice The Gildi token contract.\\n    IGildiToken public gildiToken;\\n    /// @notice An array of releases.\\n    uint256[] public rwaReleaseIds;\\n\\n    /// @notice Whether a release exists.\\n    mapping(uint256 => bool) private existingReleases;\\n\\n    /// @notice The RWA releases.\\n    mapping(uint256 => IGildiManager.RWARelease) public rwaReleases;\\n\\n    /// @notice The owners of a token.\\n    mapping(uint256 => address[]) private tokenOwners;\\n\\n    /// @notice If a user is the owner of a token.\\n    mapping(address => mapping(uint256 => bool)) private isTokenOwner;\\n\\n    /// @notice How many of a token is owned by a user.\\n    mapping(uint256 => mapping(address => TokenBalance)) private userTokenBalance;\\n\\n    /// @notice Mapping of ownership storages.\\n    mapping(uint256 => GildiManagerOwnershipStorage) public releaseOwnershipStorages;\\n\\n    /// @notice Throws if the caller does not have any of the required roles.\\n    error AccessControlUnauthorizedAccountAny(address account, bytes32[] roles);\\n    error ReleaseAlreadyExists(uint256 tokenId);\\n    error AmountMustBeGreaterThanZero();\\n    error ReleaseDoesNotExist(uint256 tokenId);\\n    error SharesMustNotBeEmpty();\\n    error TooManyShares(uint256 maxShares);\\n    error ReleaseIsDeleting(uint256 tokenId);\\n    error InsufficientUnassignedShares(uint256 unassignedShares, uint256 requiredAmount);\\n    error WrongInitialSaleState(bool expectedState, bool actualState);\\n    error InvalidBatchSize(uint256 batchSizeMin, uint256 batchSizeMax);\\n    error NotFullyAssignedShares();\\n    error InsufficientAvailableBalance(uint256 tokenId, address account);\\n    error ReleaseTokenAlreadyExists(uint256 tokenId);\\n    error InvalidLockState(bool expectedState, bool actualState);\\n    error AddressZeroNotAllowed();\\n\\n    event ReleaseUnlocked(uint256 indexed releaseId);\\n    event ReleaseCreated(uint256 indexed releaseId, uint256 amount);\\n    event ShareAssigned(uint256 indexed releaseId, address indexed user, uint256 shares);\\n    event SharesAssigned(uint256 indexed releaseId, uint256 totalShares);\\n    event InitialSaleStarted(uint256 indexed releaseId);\\n    event InitialSaleEnded(uint256 indexed releaseId);\\n    event ReleaseMarkedForDeletion(uint256 indexed releaseId);\\n    event ReleaseBatchDeleted(uint256 indexed releaseId, uint256 deletedShares, uint256 remainingOwners);\\n    event ReleaseDeleted(uint256 indexed releaseId);\\n    event TokenDeposited(uint256 indexed tokenId, address indexed account, uint256 amount);\\n    event TokenWithdrawn(uint256 indexed tokenId, address indexed account, uint256 amount);\\n    event TokenTransferred(uint256 indexed tokenId, address indexed from, address indexed to, uint256 amount);\\n    event TokenUnlocked(uint256 indexed tokenId, address indexed account, uint256 amount);\\n    event TokenLocked(uint256 indexed tokenId, address indexed account, uint256 amount);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initialize the contract.\\n    /// @param _defaultAdmin The default admin.\\n    /// @param _initialAdmin The initial admin.\\n    /// @param _initialReleaseManager The initial release manager.\\n    /// @param _rwaToken The RWA token contract.\\n    function initialize(\\n        address _defaultAdmin,\\n        address _initialAdmin,\\n        address _initialReleaseManager,\\n        IGildiToken _rwaToken\\n    ) public initializer {\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\\n        if (_initialAdmin != address(0)) {\\n            _grantRole(ADMIN_ROLE, _initialAdmin);\\n        }\\n        if (_initialReleaseManager != address(0)) {\\n            _grantRole(RELEASE_MANAGER_ROLE, _initialReleaseManager);\\n        }\\n\\n        gildiToken = _rwaToken;\\n    }\\n\\n    /// @inheritdoc IGildiManager\\n    function unlockRelease(\\n        uint256 _releaseId\\n    ) public override whenLocked(_releaseId) onlyRoleAny(_rolesReleaseManagerMarketplace()) {\\n        RWARelease storage release = rwaReleases[_releaseId];\\n\\n        if (release.unassignedShares != 0) {\\n            revert NotFullyAssignedShares();\\n        }\\n        if (release.deleting) {\\n            revert ReleaseIsDeleting(_releaseId);\\n        }\\n        if (release.inInitialSale) {\\n            revert WrongInitialSaleState(!release.inInitialSale, release.inInitialSale);\\n        }\\n\\n        release.locked = false;\\n        release.unlockedAt = block.timestamp;\\n\\n        emit ReleaseUnlocked(_releaseId);\\n    }\\n\\n    /// @inheritdoc IGildiManager\\n    function getAllReleaseIds() external view returns (uint256[] memory) {\\n        return rwaReleaseIds;\\n    }\\n\\n    /// @inheritdoc IGildiManager\\n    function releaseExists(uint256 _releaseId) public view override returns (bool) {\\n        return existingReleases[_releaseId];\\n    }\\n\\n    /// @inheritdoc IGildiManager\\n    function getAvailableBalance(uint256 _tokenId, address _account) public view override returns (uint256) {\\n        TokenBalance memory balance = userTokenBalance[_tokenId][_account];\\n        return balance.amount - balance.lockedAmount;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 _interfaceId\\n    ) public view override(AccessControlUpgradeable, ERC1155HolderUpgradeable, IERC165) returns (bool) {\\n        return super.supportsInterface(_interfaceId) || _interfaceId == type(IGildiManager).interfaceId;\\n    }\\n\\n    /// @inheritdoc IGildiManager\\n    function createNewRelease(\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        uint256 _ownershipTrackingTimePeriod\\n    ) external override onlyRole(RELEASE_MANAGER_ROLE) {\\n        if (_ownershipTrackingTimePeriod == 0) {\\n            _ownershipTrackingTimePeriod = 30 minutes;\\n        }\\n\\n        if (releaseExists(_tokenId) || gildiToken.exists(_tokenId)) {\\n            revert ReleaseAlreadyExists(_tokenId);\\n        }\\n\\n        if (_amount == 0) {\\n            revert AmountMustBeGreaterThanZero();\\n        }\\n\\n        gildiToken.mint(address(this), _tokenId, _amount, '');\\n\\n        rwaReleases[_tokenId] = RWARelease(_tokenId, true, 0, false, _amount, _amount, 0, false, 0, block.timestamp);\\n        rwaReleaseIds.push(_tokenId);\\n        existingReleases[_tokenId] = true;\\n\\n        releaseOwnershipStorages[_tokenId] = new GildiManagerOwnershipStorage(_tokenId, _ownershipTrackingTimePeriod);\\n\\n        emit ReleaseCreated(_tokenId, _amount);\\n    }\\n\\n    /// @inheritdoc IGildiManager\\n    function assignShares(\\n        uint256 _releaseId,\\n        UserShare[] calldata _sharesBatch\\n    ) external override whenLocked(_releaseId) onlyRole(RELEASE_MANAGER_ROLE) {\\n        if (_sharesBatch.length == 0) {\\n            revert SharesMustNotBeEmpty();\\n        }\\n        if (_sharesBatch.length > 100) {\\n            revert TooManyShares(100);\\n        }\\n\\n        RWARelease storage release = rwaReleases[_releaseId];\\n        if (release.deleting) {\\n            revert ReleaseIsDeleting(_releaseId);\\n        }\\n\\n        uint256 totalShares = 0;\\n        for (uint i = 0; i < _sharesBatch.length; i++) {\\n            totalShares += _sharesBatch[i].shares;\\n\\n            _creditToken(_releaseId, _sharesBatch[i].user, _sharesBatch[i].shares);\\n\\n            emit ShareAssigned(_releaseId, _sharesBatch[i].user, _sharesBatch[i].shares);\\n        }\\n\\n        if (totalShares > release.unassignedShares) {\\n            revert InsufficientUnassignedShares(release.unassignedShares, totalShares);\\n        }\\n\\n        release.unassignedShares -= totalShares;\\n\\n        emit SharesAssigned(_releaseId, totalShares);\\n    }\\n\\n    /// @inheritdoc IGildiManager\\n    function startInitialSale(uint256 _releaseId) external override whenLocked(_releaseId) onlyRole(MARKETPLACE_ROLE) {\\n        RWARelease storage release = rwaReleases[_releaseId];\\n\\n        if (release.inInitialSale) {\\n            revert WrongInitialSaleState(!release.inInitialSale, release.inInitialSale);\\n        }\\n        if (release.deleting) {\\n            revert ReleaseIsDeleting(_releaseId);\\n        }\\n        if (release.unassignedShares != 0) {\\n            revert NotFullyAssignedShares();\\n        }\\n\\n        release.inInitialSale = true;\\n\\n        emit InitialSaleStarted(_releaseId);\\n    }\\n\\n    /// @inheritdoc IGildiManager\\n    function endInitialSale(uint256 _releaseId) external override whenLocked(_releaseId) onlyRole(MARKETPLACE_ROLE) {\\n        RWARelease storage release = rwaReleases[_releaseId];\\n\\n        if (!release.inInitialSale) {\\n            revert WrongInitialSaleState(release.inInitialSale, !release.inInitialSale);\\n        }\\n\\n        release.inInitialSale = false;\\n        unlockRelease(_releaseId);\\n\\n        emit InitialSaleEnded(_releaseId);\\n    }\\n\\n    /// @inheritdoc IGildiManager\\n    function cancelInitialSale(uint256 _releaseId) external override whenLocked(_releaseId) onlyRole(MARKETPLACE_ROLE) {\\n        RWARelease storage release = rwaReleases[_releaseId];\\n\\n        if (!release.inInitialSale) {\\n            revert WrongInitialSaleState(release.inInitialSale, !release.inInitialSale);\\n        }\\n\\n        release.inInitialSale = false;\\n\\n        emit InitialSaleEnded(_releaseId);\\n    }\\n\\n    /// @inheritdoc IGildiManager\\n    function batchDeleteRelease(\\n        uint256 _releaseId,\\n        uint256 _batchSizeOwners\\n    ) external override whenLocked(_releaseId) onlyRole(RELEASE_MANAGER_ROLE) {\\n        RWARelease storage release = rwaReleases[_releaseId];\\n        if (_batchSizeOwners == 0 || _batchSizeOwners > 100) {\\n            revert InvalidBatchSize(1, 100);\\n        }\\n        if (release.inInitialSale) {\\n            revert WrongInitialSaleState(!release.inInitialSale, release.inInitialSale);\\n        }\\n\\n        release.deleting = true;\\n        emit ReleaseMarkedForDeletion(_releaseId);\\n\\n        // Delete the shares in batches. + Cleanup the ownership mapping.\\n        for (uint i = 0; i < _batchSizeOwners; i++) {\\n            if (tokenOwners[_releaseId].length == 0) {\\n                break;\\n            }\\n\\n            address user = tokenOwners[_releaseId][0];\\n            uint256 amount = userTokenBalance[_releaseId][user].amount;\\n\\n            // Cleanup the ownership mapping.\\n            releaseOwnershipStorages[_releaseId].deleteOwnerships(user);\\n            delete userTokenBalance[_releaseId][user];\\n            delete isTokenOwner[user][_releaseId];\\n\\n            // Remove the user from the tokenOwners array.\\n            tokenOwners[_releaseId][0] = tokenOwners[_releaseId][tokenOwners[_releaseId].length - 1];\\n            tokenOwners[_releaseId].pop();\\n\\n            release.deletedShares += amount;\\n        }\\n\\n        // If we have deleted all shares, burn the token and delete the release.\\n        if (tokenOwners[_releaseId].length == 0) {\\n            gildiToken.burnAllById(_releaseId);\\n            delete rwaReleases[_releaseId];\\n            delete existingReleases[_releaseId];\\n            for (uint i = 0; i < rwaReleaseIds.length; i++) {\\n                if (rwaReleaseIds[i] == _releaseId) {\\n                    rwaReleaseIds[i] = rwaReleaseIds[rwaReleaseIds.length - 1];\\n                    rwaReleaseIds.pop();\\n                    break;\\n                }\\n            }\\n            delete releaseOwnershipStorages[_releaseId];\\n            emit ReleaseDeleted(_releaseId);\\n        }\\n\\n        emit ReleaseBatchDeleted(_releaseId, release.deletedShares, tokenOwners[_releaseId].length);\\n    }\\n\\n    /// @inheritdoc IGildiManager\\n    function deposit(\\n        uint256 _tokenId,\\n        address _account,\\n        uint256 _amount\\n    ) external override nonReentrant whenNotLocked(_tokenId) {\\n        if (!releaseExists(_tokenId)) {\\n            revert ReleaseDoesNotExist(_tokenId);\\n        }\\n        if (gildiToken.balanceOf(_account, _tokenId) < _amount) {\\n            revert InsufficientAvailableBalance(_tokenId, _account);\\n        }\\n        if (_amount == 0) {\\n            revert AmountMustBeGreaterThanZero();\\n        }\\n        if (_msgSender() != _account && !hasRole(ADMIN_ROLE, _msgSender())) {\\n            revert AccessControlUnauthorizedAccount(_msgSender(), ADMIN_ROLE);\\n        }\\n\\n        gildiToken.safeTransferFrom(_account, address(this), _tokenId, _amount, '');\\n\\n        _creditToken(_tokenId, _account, _amount);\\n\\n        emit TokenDeposited(_tokenId, _account, _amount);\\n    }\\n\\n    /// @inheritdoc IGildiManager\\n    function withdraw(\\n        uint256 _tokenId,\\n        address _account,\\n        uint256 _amount\\n    ) external override nonReentrant whenNotLocked(_tokenId) {\\n        if (!releaseExists(_tokenId)) {\\n            revert ReleaseDoesNotExist(_tokenId);\\n        }\\n        if (_msgSender() != _account && !hasRole(ADMIN_ROLE, _msgSender())) {\\n            revert AccessControlUnauthorizedAccount(_msgSender(), ADMIN_ROLE);\\n        }\\n        if (getAvailableBalance(_tokenId, _account) < _amount) {\\n            revert InsufficientAvailableBalance(_tokenId, _account);\\n        }\\n        if (_amount == 0) {\\n            revert AmountMustBeGreaterThanZero();\\n        }\\n\\n        gildiToken.safeTransferFrom(address(this), _account, _tokenId, _amount, '');\\n\\n        _debitToken(_tokenId, _account, _amount);\\n\\n        emit TokenWithdrawn(_tokenId, _account, _amount);\\n    }\\n\\n    /// @inheritdoc IGildiManager\\n    function transferOwnership(\\n        uint256 _tokenId,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external override nonReentrant whenNotLocked(_tokenId) {\\n        if (_msgSender() != _from && !hasRole(ADMIN_ROLE, _msgSender()) && !hasRole(MARKETPLACE_ROLE, _msgSender())) {\\n            bytes32[] memory roles = new bytes32[](2);\\n            roles[0] = ADMIN_ROLE;\\n            roles[1] = MARKETPLACE_ROLE;\\n            revert AccessControlUnauthorizedAccountAny(_msgSender(), roles);\\n        }\\n\\n        _transferOwnership(_tokenId, _from, _to, _amount);\\n\\n        emit TokenTransferred(_tokenId, _from, _to, _amount);\\n    }\\n\\n    /// @inheritdoc IGildiManager\\n    function transferOwnershipInitialSale(\\n        uint256 _tokenId,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external override nonReentrant onlyRole(MARKETPLACE_ROLE) {\\n        RWARelease storage release = rwaReleases[_tokenId];\\n        if (!release.inInitialSale) {\\n            revert WrongInitialSaleState(release.inInitialSale, !release.inInitialSale);\\n        }\\n\\n        _transferOwnership(_tokenId, _from, _to, _amount);\\n\\n        emit TokenTransferred(_tokenId, _from, _to, _amount);\\n    }\\n\\n    /// @inheritdoc IGildiManager\\n    function unlockTokens(\\n        address _account,\\n        uint256 _tokenId,\\n        uint256 _amountToUnlock\\n    ) external onlyRole(MARKETPLACE_ROLE) {\\n        uint256 lockedAmount = userTokenBalance[_tokenId][_account].lockedAmount;\\n        if (lockedAmount < _amountToUnlock) {\\n            revert InsufficientAvailableBalance(_tokenId, _account);\\n        }\\n\\n        userTokenBalance[_tokenId][_account].lockedAmount -= _amountToUnlock;\\n\\n        emit TokenUnlocked(_tokenId, _account, _amountToUnlock);\\n    }\\n\\n    /// @inheritdoc IGildiManager\\n    function lockTokens(address _account, uint256 _tokenId, uint256 _amountToLock) external onlyRole(MARKETPLACE_ROLE) {\\n        uint256 availableBalance = getAvailableBalance(_tokenId, _account);\\n        if (availableBalance < _amountToLock) {\\n            revert InsufficientAvailableBalance(_tokenId, _account);\\n        }\\n\\n        userTokenBalance[_tokenId][_account].lockedAmount += _amountToLock;\\n\\n        emit TokenLocked(_tokenId, _account, _amountToLock);\\n    }\\n\\n    /// @notice Get the owners of a token.\\n    /// @return The token owners.\\n    function ownersOfToken(uint256 _tokenId) public view returns (address[] memory) {\\n        return tokenOwners[_tokenId];\\n    }\\n\\n    /// @inheritdoc IGildiManager\\n    function getReleaseById(uint256 _releaseId) external view returns (RWARelease memory) {\\n        return rwaReleases[_releaseId];\\n    }\\n\\n    /// @inheritdoc IGildiManager\\n    function isLocked(uint256 _releaseId) external view returns (bool) {\\n        return rwaReleases[_releaseId].locked;\\n    }\\n\\n    /// @inheritdoc IGildiManager\\n    function isInInitialSale(uint256 _releaseId) external view returns (bool) {\\n        return rwaReleases[_releaseId].inInitialSale;\\n    }\\n\\n    /// @inheritdoc IGildiManager\\n    function balanceOf(address _account) external view override returns (TokenBalance[] memory) {\\n        TokenBalance[] memory balances = new TokenBalance[](rwaReleaseIds.length);\\n\\n        for (uint i = 0; i < rwaReleaseIds.length; i++) {\\n            uint256 tokenId = rwaReleaseIds[i];\\n            TokenBalance memory balance = userTokenBalance[tokenId][_account];\\n            if (balance.tokenId != tokenId) {\\n                balances[i] = TokenBalance(tokenId, 0, 0);\\n            } else {\\n                balances[i] = balance;\\n            }\\n        }\\n\\n        return balances;\\n    }\\n\\n    /// @inheritdoc IGildiManager\\n    function balanceOf(uint256 _tokenId, address _account) external view override returns (TokenBalance memory) {\\n        TokenBalance memory balance = userTokenBalance[_tokenId][_account];\\n        if (balance.tokenId != _tokenId) {\\n            return TokenBalance(_tokenId, 0, 0);\\n        }\\n        return balance;\\n    }\\n\\n    /// @inheritdoc IGildiManager\\n    function isFullyAssigned(uint256 _releaseId) external view override returns (bool) {\\n        RWARelease storage release = rwaReleases[_releaseId];\\n        return releaseExists(_releaseId) && release.unassignedShares == 0;\\n    }\\n\\n    /// @inheritdoc IGildiManager\\n    function fetchSharesInPeriod(\\n        uint256 _tokenId,\\n        uint256 _start,\\n        uint256 _end,\\n        uint256 _cursor,\\n        uint256 _limit\\n    ) external view override returns (SharesReport memory) {\\n        if (!releaseExists(_tokenId)) {\\n            revert ReleaseDoesNotExist(_tokenId);\\n        }\\n\\n        GildiManagerOwnershipStorage gildiOwnershipTracker = releaseOwnershipStorages[_tokenId];\\n        uint256 TIME_PERIOD = gildiOwnershipTracker.TIME_PERIOD();\\n\\n        RWARelease storage release = rwaReleases[_tokenId];\\n        uint256 releaseUnlockedAtNormalized = (release.unlockedAt / TIME_PERIOD) * TIME_PERIOD;\\n\\n        _start = (_start / TIME_PERIOD) * TIME_PERIOD;\\n        _end = (_end / TIME_PERIOD) * TIME_PERIOD;\\n\\n        if (_start < releaseUnlockedAtNormalized) {\\n            _start = releaseUnlockedAtNormalized;\\n        }\\n\\n        if (_end <= _start) {\\n            _end = _start + TIME_PERIOD; // Fetch at least one period.\\n        }\\n\\n        uint256 totalShares = 0;\\n\\n        // Dynamic array for user shares\\n        UserShare[] memory tempUserShares = new UserShare[](_limit);\\n        bool hasMore = false;\\n        uint256 nextCursor = _cursor;\\n        uint256 count = 0;\\n\\n        address[] memory ownersByTokenId = gildiOwnershipTracker.fetchUsers();\\n\\n        // Iterate through each ownership and calculate the total number of shares.\\n        for (uint256 i = _cursor; i < ownersByTokenId.length; i++) {\\n            if (count >= _limit) {\\n                hasMore = true;\\n                break;\\n            }\\n\\n            address user = ownersByTokenId[i];\\n            GildiManagerOwnershipStorage.Ownership[] memory ownerships = gildiOwnershipTracker.fetchOwnerships(user);\\n\\n            // Iterate through each ownership and calculate the total number of shares, fill gaps with the last value.\\n            uint256 shares = 0;\\n            uint256 lastShares = ownerships.length > 0 ? ownerships[ownerships.length - 1].amount : 0;\\n            uint256 lastTimestamp = (_start < releaseUnlockedAtNormalized ? releaseUnlockedAtNormalized : _start) -\\n                TIME_PERIOD;\\n\\n            for (uint256 j = 0; j < ownerships.length; j++) {\\n                GildiManagerOwnershipStorage.Ownership memory ownership = ownerships[j];\\n\\n                uint256 timestamp = ownership.timestamp;\\n                if (timestamp == 0 && release.unlockedAt != 0) {\\n                    timestamp = (release.unlockedAt / TIME_PERIOD) * TIME_PERIOD;\\n                }\\n                if (timestamp >= _start && timestamp < _end) {\\n                    uint256 gapsToFill = ((timestamp - lastTimestamp) / TIME_PERIOD) - 1;\\n                    if (gapsToFill > 0) {\\n                        uint256 sharesToAdd = gapsToFill * lastShares;\\n                        shares += sharesToAdd;\\n                    }\\n\\n                    shares += ownership.amount;\\n\\n                    lastShares = ownership.amount;\\n                    lastTimestamp = timestamp;\\n                }\\n            }\\n\\n            uint256 gapsToEnd = ((_end - lastTimestamp) / TIME_PERIOD) - 1;\\n            if (gapsToEnd > 0) {\\n                uint256 sharesToAdd = gapsToEnd * lastShares;\\n                shares += sharesToAdd;\\n            }\\n\\n            if (shares > 0) {\\n                tempUserShares[count] = UserShare(user, shares);\\n                totalShares += shares;\\n                count++;\\n            }\\n\\n            nextCursor++;\\n        }\\n\\n        // Resize the array to the actual count\\n        UserShare[] memory userShares = new UserShare[](count);\\n        for (uint256 k = 0; k < count; k++) {\\n            userShares[k] = tempUserShares[k];\\n        }\\n\\n        return SharesReport(_tokenId, _start, _end, totalShares, userShares, hasMore, nextCursor);\\n    }\\n\\n    function _transferOwnership(uint256 _tokenId, address _from, address _to, uint256 _amount) internal {\\n        if (!releaseExists(_tokenId)) {\\n            revert ReleaseDoesNotExist(_tokenId);\\n        }\\n\\n        if (_to == address(0)) {\\n            revert AddressZeroNotAllowed();\\n        }\\n\\n        if (_amount == 0) {\\n            revert AmountMustBeGreaterThanZero();\\n        }\\n\\n        if (_from == _to) {\\n            return;\\n        }\\n\\n        if (getAvailableBalance(_tokenId, _from) < _amount) {\\n            revert InsufficientAvailableBalance(_tokenId, _from);\\n        }\\n\\n        _debitToken(_tokenId, _from, _amount);\\n        _creditToken(_tokenId, _to, _amount);\\n    }\\n\\n    function _creditToken(uint256 _tokenId, address _account, uint256 _amount) private {\\n        GildiManagerOwnershipStorage gildiOwnershipTracker = releaseOwnershipStorages[_tokenId];\\n        uint256 TIME_PERIOD = gildiOwnershipTracker.TIME_PERIOD();\\n        GildiManagerOwnershipStorage.Ownership[] memory ownerships = gildiOwnershipTracker.fetchOwnerships(_account);\\n\\n        RWARelease storage release = rwaReleases[_tokenId];\\n        uint256 timestamp = !release.locked ? (block.timestamp / TIME_PERIOD) * TIME_PERIOD : 0;\\n\\n        /// First balance processing, then ownership processing.\\n        if (!isTokenOwner[_account][_tokenId]) {\\n            tokenOwners[_tokenId].push(_account);\\n            isTokenOwner[_account][_tokenId] = true;\\n            userTokenBalance[_tokenId][_account] = TokenBalance(_tokenId, _amount, 0);\\n        } else {\\n            userTokenBalance[_tokenId][_account].amount += _amount;\\n        }\\n\\n        // Now we process the ownerships.\\n        if (ownerships.length == 0) {\\n            gildiOwnershipTracker.pushOwnership(_account, GildiManagerOwnershipStorage.Ownership(_amount, timestamp));\\n        } else {\\n            GildiManagerOwnershipStorage.Ownership memory lastOwnership = ownerships[ownerships.length - 1];\\n            bool lastOwnershipChanged = false;\\n            if (lastOwnership.timestamp == 0 && !release.locked) {\\n                lastOwnership.timestamp = (release.unlockedAt / TIME_PERIOD) * TIME_PERIOD;\\n                lastOwnershipChanged = true;\\n            }\\n\\n            uint256 newAmount = lastOwnership.amount + _amount;\\n            if (lastOwnership.timestamp == timestamp) {\\n                lastOwnership.amount = newAmount;\\n                lastOwnershipChanged = true;\\n            } else {\\n                gildiOwnershipTracker.pushOwnership(\\n                    _account,\\n                    GildiManagerOwnershipStorage.Ownership(newAmount, timestamp)\\n                );\\n            }\\n\\n            if (lastOwnershipChanged) {\\n                gildiOwnershipTracker.updateOwnershipEntry(_account, ownerships.length - 1, lastOwnership);\\n            }\\n        }\\n    }\\n\\n    function _debitToken(uint256 _tokenId, address _account, uint256 _amount) private {\\n        GildiManagerOwnershipStorage ownershipTracker = releaseOwnershipStorages[_tokenId];\\n        uint256 TIME_PERIOD = ownershipTracker.TIME_PERIOD();\\n        GildiManagerOwnershipStorage.Ownership[] memory ownerships = ownershipTracker.fetchOwnerships(_account);\\n\\n        RWARelease storage release = rwaReleases[_tokenId];\\n        uint256 newAmount = userTokenBalance[_tokenId][_account].amount - _amount;\\n        uint256 timestamp = !release.locked ? (block.timestamp / TIME_PERIOD) * TIME_PERIOD : 0;\\n\\n        // First balance processing\\n        if (newAmount != 0) {\\n            userTokenBalance[_tokenId][_account].amount = newAmount;\\n        } else {\\n            delete userTokenBalance[_tokenId][_account];\\n            delete isTokenOwner[_account][_tokenId];\\n            for (uint i = 0; i < tokenOwners[_tokenId].length; i++) {\\n                if (tokenOwners[_tokenId][i] == _account) {\\n                    tokenOwners[_tokenId][i] = tokenOwners[_tokenId][tokenOwners[_tokenId].length - 1];\\n                    tokenOwners[_tokenId].pop();\\n                    break;\\n                }\\n            }\\n        }\\n\\n        // Now ownership processing\\n        bool lastOwnershipChanged = false;\\n        GildiManagerOwnershipStorage.Ownership memory lastOwnership = ownerships[ownerships.length - 1];\\n\\n        if (lastOwnership.timestamp == 0 && !release.locked) {\\n            lastOwnership.timestamp = (release.unlockedAt / TIME_PERIOD) * TIME_PERIOD;\\n            lastOwnershipChanged = true;\\n        }\\n\\n        if (lastOwnership.timestamp == timestamp) {\\n            lastOwnership.amount -= _amount;\\n            lastOwnershipChanged = true;\\n        } else {\\n            ownershipTracker.pushOwnership(_account, GildiManagerOwnershipStorage.Ownership(newAmount, timestamp));\\n        }\\n\\n        if (lastOwnershipChanged) {\\n            ownershipTracker.updateOwnershipEntry(_account, ownerships.length - 1, lastOwnership);\\n        }\\n    }\\n\\n    function _releaseIsDeleting(uint256 _tokenId) private view returns (bool) {\\n        return rwaReleases[_tokenId].deleting;\\n    }\\n\\n    function _rolesReleaseManagerMarketplace() internal pure returns (bytes32[] memory) {\\n        bytes32[] memory roles = new bytes32[](2);\\n        roles[0] = RELEASE_MANAGER_ROLE;\\n        roles[1] = MARKETPLACE_ROLE;\\n        return roles;\\n    }\\n\\n    modifier whenNotLocked(uint256 _tokenId) {\\n        if (rwaReleases[_tokenId].locked) {\\n            revert InvalidLockState(false, true);\\n        }\\n        _;\\n    }\\n\\n    modifier whenLocked(uint256 _tokenId) {\\n        if (!rwaReleases[_tokenId].locked) {\\n            revert InvalidLockState(true, false);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyRoles(bytes32[] memory _roles) {\\n        for (uint i = 0; i < _roles.length; i++) {\\n            if (!hasRole(_roles[i], _msgSender())) {\\n                revert AccessControlUnauthorizedAccount(_msgSender(), _roles[i]);\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier onlyRoleAny(bytes32[] memory _roles) {\\n        bool anyRole = false;\\n        for (uint i = 0; i < _roles.length; i++) {\\n            if (hasRole(_roles[i], _msgSender())) {\\n                anyRole = true;\\n                break;\\n            }\\n        }\\n        if (!anyRole) {\\n            revert AccessControlUnauthorizedAccountAny(_msgSender(), _roles);\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xb4288a598085c34c2e2f84d04d1e1a8bcd586e4ed817a7af308e1c4d9b4d9378\",\"license\":\"UNLICENSED\"},\"contracts/manager/GildiManagerOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\nimport '../storage/AddressKeyValueStore.sol';\\n\\n/// @title GildiManagerOwnershipStorage\\n/// @notice A seperate contract to store the ownership inside the Gildi Manager.\\n/// @dev Deployed by the Gildi Manager. Might be switched to an off-chain solution in the future.\\n/// @custom:security-contact security@gildi.io\\n/// @author Patrick Fischer (Pathin) > https://pathin.me\\ncontract GildiManagerOwnershipStorage is AddressKeyValueStore {\\n    constructor(uint256 releaseId, uint256 timePeriod) AddressKeyValueStore(_msgSender()) {\\n        TIME_PERIOD = timePeriod < 10 minutes ? 10 minutes : timePeriod;\\n        RELEASE_ID = releaseId;\\n    }\\n\\n    /// @notice The time period in which we calculate the shares owned by a user.\\n    uint256 public immutable TIME_PERIOD;\\n    /// @notice The ID of the Royalty Rights Token / release.\\n    uint256 immutable RELEASE_ID;\\n\\n    /// @notice The ownership of a user for a specific RWA.\\n    struct Ownership {\\n        /// @notice The amount owned by the user.\\n        uint256 amount;\\n        /// @notice The timestamp of the last update.\\n        uint256 timestamp;\\n    }\\n\\n    event OwnershipUpdated(uint256 indexed releaseId, address indexed user, uint256 amount, uint256 timestamp);\\n    event OwnershipDeleted(uint256 indexed releaseId, address indexed user);\\n    event OwnershipPushed(uint256 indexed releaseId, address indexed user, uint256 amount, uint256 timestamp);\\n\\n    /// @notice Delete the ownerships of a user.\\n    /// @param _user The user address.\\n    function deleteOwnerships(address _user) external {\\n        del(_user);\\n        emit OwnershipDeleted(RELEASE_ID, _user);\\n    }\\n\\n    /// @notice Push a new ownership entry for a user.\\n    /// @param _user The user address.\\n    /// @param _ownership The new ownership entry.\\n    function pushOwnership(address _user, Ownership calldata _ownership) external {\\n        // Check if the user already has ownerships\\n        Ownership[] memory oldOwnerships = new Ownership[](0);\\n        if (containsKey(_user)) {\\n            oldOwnerships = bytesToOwnerships(get(_user));\\n        }\\n\\n        Ownership[] memory newOwnerships = new Ownership[](oldOwnerships.length + 1);\\n        for (uint256 i = 0; i < oldOwnerships.length; i++) {\\n            newOwnerships[i] = oldOwnerships[i];\\n        }\\n        newOwnerships[oldOwnerships.length] = _ownership;\\n        set(_user, ownershipsToBytes(newOwnerships));\\n\\n        emit OwnershipPushed(RELEASE_ID, _user, _ownership.amount, _ownership.timestamp);\\n    }\\n\\n    /// @notice Update an ownership entry for a user at a specific index.\\n    /// @param _user The user address.\\n    /// @param _index The index of the ownership entry.\\n    /// @param _ownership The updated ownership entry.\\n    function updateOwnershipEntry(address _user, uint256 _index, Ownership calldata _ownership) external {\\n        Ownership[] memory ownerships = new Ownership[](0);\\n\\n        if (containsKey(_user)) {\\n            ownerships = bytesToOwnerships(get(_user));\\n        }\\n        if (_index >= ownerships.length) {\\n            revert IndexOutOfBounds(_index);\\n        }\\n        ownerships[_index] = _ownership;\\n        set(_user, ownershipsToBytes(ownerships));\\n\\n        emit OwnershipUpdated(RELEASE_ID, _user, _ownership.amount, _ownership.timestamp);\\n    }\\n\\n    /// @notice Fetch the ownership of a user.\\n    /// @param _user The user address.\\n    function fetchOwnerships(address _user) external view returns (Ownership[] memory) {\\n        if (!containsKey(_user)) {\\n            return new Ownership[](0);\\n        }\\n        bytes memory allData = get(_user);\\n        return bytesToOwnerships(allData);\\n    }\\n\\n    /// @notice Fetch the users.\\n    function fetchUsers() external view returns (address[] memory) {\\n        return getAllKeys();\\n    }\\n\\n    function ownershipsToBytes(Ownership[] memory _ownership) private pure returns (bytes memory) {\\n        return abi.encode(_ownership);\\n    }\\n\\n    function bytesToOwnerships(bytes memory _data) private pure returns (Ownership[] memory) {\\n        Ownership[] memory res = abi.decode(_data, (Ownership[]));\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0x4fe22a2fa200899f96aba82dbd4267e0154384249294c85a965a0cd07178796b\",\"license\":\"UNLICENSED\"},\"contracts/storage/AddressKeyValueStore.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\nimport './base/KeyValueStore.sol';\\n\\n/// @title Address key value store contract.\\n/// @notice This contract allows an owner to store, retrieve, and delete arbitrary data by an address key.\\n/// @custom:security-contact security@gildi.io\\n/// @author Patrick Fischer (Pathin) > https://pathin.me\\ncontract AddressKeyValueStore is KeyValueStore {\\n    constructor(address _owner) KeyValueStore(_owner) {}\\n\\n    /// @notice Gets the data stored against the given key.\\n    /// @param _key The key to get the data for.\\n    /// @return The data stored against the given key.\\n    function get(address _key) internal view returns (bytes memory) {\\n        return _get(addressToBytes32(_key));\\n    }\\n\\n    /// notice Gets the key at the given index.\\n    /// @param _index The index of the key to get.\\n    /// @return The key at the given index.\\n    function getKeyAtIndex(uint256 _index) internal view returns (address) {\\n        return bytes32ToAddress(_getKeyAtIndex(_index));\\n    }\\n\\n    /// @notice Gets all the data stored in the store.\\n    /// @return All the data stored in the store.\\n    function getAll() internal view returns (bytes[] memory) {\\n        return _getAll();\\n    }\\n\\n    /// @notice Gets all the keys used in the store.\\n    /// @return All the keys used in the store.\\n    function getAllKeys() internal view returns (address[] memory) {\\n        bytes32[] memory keys = _getAllKeys();\\n        address[] memory addressKeys = new address[](keys.length);\\n        for (uint256 i = 0; i < keys.length; i++) {\\n            addressKeys[i] = bytes32ToAddress(keys[i]);\\n        }\\n        return addressKeys;\\n    }\\n\\n    /// @notice Gets the number of keys used in the store.\\n    /// @return The number of keys used in the store.\\n    function getNumberOfKeys() internal view returns (uint256) {\\n        return _getNumberOfKeys();\\n    }\\n\\n    /// @notice Checks if the given key exists in the store.\\n    /// @param _key The key to check for existence.\\n    function containsKey(address _key) internal view returns (bool) {\\n        return _containsKey(addressToBytes32(_key));\\n    }\\n\\n    /// @notice Sets the given value against the given key.\\n    function set(address _key, bytes memory _value) internal {\\n        _set(addressToBytes32(_key), _value);\\n    }\\n\\n    /// @notice Deletes the data stored against the given key.\\n    function del(address _key) internal {\\n        _del(addressToBytes32(_key));\\n    }\\n\\n    /// @inheritdoc KeyValueStore\\n    function _initialize() internal virtual override initializeOnlyOnce {}\\n\\n    function bytes32ToAddress(bytes32 byteData) private pure returns (address) {\\n        return address(uint160(uint256(byteData)));\\n    }\\n\\n    function addressToBytes32(address addr) private pure returns (bytes32) {\\n        return bytes32(uint256(uint160(addr)));\\n    }\\n}\\n\",\"keccak256\":\"0xa440b359241c5b3aa7e41736f92ed5ffabfcf4b731766c61cb9785914aef76a9\",\"license\":\"UNLICENSED\"},\"contracts/storage/base/KeyValueStore.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\npragma solidity 0.8.24;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\n/// @title Store base contract.\\n/// @notice This contract allows an owner to store, retrieve, and delete arbitrary data by an arbitrary key.\\n/// @custom:security-contact security@gildi.io\\n/// @author Patrick Fischer (Pathin) > https://pathin.me\\nabstract contract KeyValueStore is Ownable {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    /// @notice Mapping that holds the stored data against their keys.\\n    mapping(bytes32 => bytes) internal data;\\n\\n    /// @notice Set that keeps track of all keys used.\\n    EnumerableSet.Bytes32Set internal keys;\\n\\n    /// @notice Whether the store has been initialized or not.\\n    bool private _initialized;\\n\\n    /// @notice Emitted when data is added to the store.\\n    event DataAdded(bytes32 key);\\n\\n    /// @notice Emitted when data is updated in the store.\\n    event DataUpdated(bytes32 key);\\n\\n    /// @notice Emitted when data is deleted from the store.\\n    event DataDeleted(bytes32 key);\\n\\n    /// @notice Emitted when the store is already initialized.\\n    error AlreadyInitialized();\\n\\n    /// @notice Emitted when the key does not exist in the store.\\n    error KeyNotExists(bytes32 key);\\n\\n    /// @notice Emitted when the index is out of bounds.\\n    error IndexOutOfBounds(uint256 index);\\n\\n    /// @dev Initializes a new instance of the Store contract with the given owner.\\n    /// @param _owner The address of the owner of the Store contract.\\n    constructor(address _owner) Ownable(_owner) {\\n        _initialize();\\n    }\\n\\n    /// @notice Gets the data stored against the given key.\\n    /// @param _key The key to get the data for.\\n    /// @return The data stored against the given key.\\n    function _get(bytes32 _key) internal view returns (bytes memory) {\\n        if (!keys.contains(_key)) {\\n            revert KeyNotExists(_key);\\n        }\\n        return data[_key];\\n    }\\n\\n    /// notice Gets the key at the given index.\\n    /// @param _index The index of the key to get.\\n    /// @return The key at the given index.\\n    function _getKeyAtIndex(uint256 _index) internal view returns (bytes32) {\\n        if (_index >= keys.length()) {\\n            revert IndexOutOfBounds(_index);\\n        }\\n        return keys.at(_index);\\n    }\\n\\n    /// @notice Gets all the data stored in the store.\\n    /// @return All the data stored in the store.\\n    function _getAll() internal view returns (bytes[] memory) {\\n        uint256 length = keys.length();\\n        bytes[] memory result = new bytes[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            result[i] = data[keys.at(i)];\\n        }\\n        return result;\\n    }\\n\\n    /// @notice Gets all the keys used in the store.\\n    /// @return All the keys used in the store.\\n    function _getAllKeys() internal view returns (bytes32[] memory) {\\n        return keys.values();\\n    }\\n\\n    /// @notice Gets the number of keys used in the store.\\n    /// @return The number of keys used in the store.\\n    function _getNumberOfKeys() internal view returns (uint256) {\\n        return keys.length();\\n    }\\n\\n    /// @notice Checks if the given key exists in the store.\\n    /// @param _key The key to check for existence.\\n    function _containsKey(bytes32 _key) internal view returns (bool) {\\n        return keys.contains(_key);\\n    }\\n\\n    /// @notice Sets the given value against the given key.\\n    function _set(bytes32 _key, bytes memory _value) internal onlyOwner {\\n        bool isNewKey = !keys.contains(_key);\\n        if (isNewKey) {\\n            keys.add(_key);\\n            emit DataAdded(_key);\\n        } else {\\n            emit DataUpdated(_key);\\n        }\\n        data[_key] = _value;\\n    }\\n\\n    /// @notice Deletes the data stored against the given key.\\n    function _del(bytes32 _key) internal onlyOwner {\\n        if (!keys.contains(_key)) {\\n            revert KeyNotExists(_key);\\n        }\\n        keys.remove(_key);\\n        delete data[_key];\\n        emit DataDeleted(_key);\\n    }\\n\\n    /// @notice Initializes the store.\\n    /// @dev This function is called only once during the contract deployment.\\n    function _initialize() internal virtual initializeOnlyOnce {}\\n\\n    // Modifier to make it impossible to call initialize twice\\n    modifier initializeOnlyOnce() {\\n        if (_initialized) {\\n            revert AlreadyInitialized();\\n        }\\n        _;\\n        _initialized = true;\\n    }\\n}\\n\",\"keccak256\":\"0x11289bf1e1cfd83809c6d71957aabc314ddc7ff7497cf7c17c59010b86f4b40e\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60808060405234620000bd577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081549060ff8260401c16620000ae57506001600160401b036002600160401b03198282160162000068575b6040516154e19081620000c38239f35b6001600160401b031990911681179091556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a138808062000058565b63f92ee8a960e01b8152600490fd5b600080fdfe6101e08060405260043610156200001557600080fd5b600061010052610100513560e01c90816301ffc9a71462002fca575080631137660a1462002f935780631815d88e1462002f645780632014f8921462002f2a578063248a9ca31462002ee7578063293b9e0b1462002e8e5780632f2ff15d1462002e3557806333ddb2ac1462002d8857806336568abe1462002d3a5780633656eec21462002cea5780634d57bab41462002cb057806352ff4c3c1462002b0c57806358e9ac0814620023d45780636896b20514620023155780636ae21bb014620022e757806370a08231146200211857806375b238fc14620020ea57806378021e7c146200201e5780637de1d4501462001e635780638d073d1b1462001dc957806391d148541462001d62578063a217fddf1462001d40578063a25983e51462001c88578063a5ab6a101462001b1f578063ba0c5c5914620018d2578063bad545bb146200182d578063bc157ac11462001603578063bc197c81146200156c578063c3439f3f146200153e578063cd3877df1462001464578063d3d23d1c14620010de578063d547741f146200107d578063e63697c81462000e27578063eb7720671462000df3578063ecee5b021462000b5f578063ed304d951462000b23578063f2384f8c14620005d0578063f23a6e611462000572578063f6aacfb11462000538578063f8c8765e14620003435763fd77c6f4146200021557600080fd5b346200033c5760203660031901126200033c57600435806101005152600360205260ff600160406101005120015416156200031a5762000254620036a1565b806101005152600360205260406101005120600381019081549060ff821680620002f5575060ff600782015416620002d95760050154620002c75760ff19166001179055610100517fbdc9a0579dc2f365c35b6a183ee5f7307d7f5b04c58c19198acba9fe16efcb039080a26101005180f35b604051630ade1a7760e01b8152600490fd5b6040516001620455d760e11b0319815260048101859052602490fd5b604051631e9d1cd160e21b8152901560048201819052156024820152604490fd5b0390fd5b60405163377da9cf60e01b815260016004820152610100516024820152604490fd5b6101005180fd5b346200033c5760803660031901126200033c57620003606200306d565b6200036a62003056565b6001600160a01b0391906044358381168082036200053357606435928584168094036200033c577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0095865460ff8160401c1615966001600160401b038216801590816200052a575b60011490816200051f575b15908162000515575b50620005035767ffffffffffffffff1982166001178955620004419188620004e3575b506200041462004479565b6200041e62004479565b6200042862004479565b60016000805160206200546c833981519152556200378c565b508116620004d0575b50620004bd575b506bffffffffffffffffffffffff60a01b6101005154161761010051556200047b575b6101005180f35b68ff00000000000000001981541690557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a18062000474565b620004c890620038bf565b508362000451565b620004db906200381d565b50856200044a565b68ffffffffffffffffff1916680100000000000000011789558962000409565b60405163f92ee8a960e01b8152600490fd5b9050158a620003e6565b303b159150620003dd565b899150620003d2565b600080fd5b346200033c5760203660031901126200033c5760043561010051526003602052602060ff6001604061010051200154166040519015158152f35b346200033c5760a03660031901126200033c576200058f6200306d565b506200059a62003056565b506084356001600160401b0381116200033c57620005bd90369060040162003255565b5060405163f23a6e6160e01b8152602090f35b346200033c5760403660031901126200033c576004356101005152600360205260ff600160406101005120015416156200031a576200060e6200370b565b600435610100515260036020526040610100512060243515801562000b16575b62000af65760ff60038201541680620002f5575060078101600160ff198254161790556004357fe59f8649642eb71b4a02565ae510c844441ad7c9d86c09dbe48bfb9d7a1482766101005161010051a2610100515b602435811062000912575b5060043561010051526004602052604061010051205415620006f6575b600801546004602052604061010051205460405191825260208201527f679dfa960cc44d02ecbd6c08ee6f63d79fa5ab9caa75e6fb8b49537fe245fe99604060043592a26101005180f35b61010051546001600160a01b0316803b156200033c576040519063a7f908ff60e01b8252600435600483015281602481610100519361010051905af180156200090457620008e9575b50600435610100515260036020526000600960406101005120828155610100516001820155826002820155610100516003820155826004820155826005820155826006820155610100516007820155826008820155015560026020526040610100512060ff19815416905561010051905b60015480831015620008de57620007c783620032b0565b60043591549060031b1c14620007e357509060010190620007b0565b60001992818401918211620008c45762000813620008056200082c93620032b0565b90549060031b1c91620032b0565b90919082549060031b91821b91600019901b1916179055565b600154918215620008aa578060089301906200084882620032b0565b909182549160031b1b191690556001555b610100805160043590819052600760205290516040812080546001600160a01b03191690557f4e822af0b988e6543be0497735a5645d614dd814a0de69a1282c98dd4816fce69080a29050620006ab565b634e487b7160e01b61010051526031600452602461010051fd5b634e487b7160e01b61010051526011600452602461010051fd5b506008915062000859565b620008f4906200319f565b610100516200033c57816200073f565b6040513d61010051823e3d90fd5b600435610100515260046020526040610100512080541562000aef576200093990620032fe565b60018060a01b0391549060031b1c1690600435610100515260066020526040610100512082600052602052600160406000200154916004356101005152600760205260018060a01b03604061010051205416803b156200033c5760405190639fc812df60e01b825282600483015281602481610100519361010051905af18015620009045762000ad4575b5060043561010051526006602052604061010051208160005260205260006002604082208281558260018201550155610100515260056020526040610100512060043561010051526020526040610100512060ff19815416905560046020526040610100512080549283600019810111620008c45762000a5062000ac892600195600019019062003314565b858060a01b0391549060031b1c166004356101005152600460205262000a9d62000a8060406101005120620032fe565b819391549060031b9160018060a01b03809116831b921b19161790565b90556004356101005152600460205262000abd604061010051206200365b565b60088501546200349b565b60088401550162000683565b62000adf906200319f565b610100516200033c5784620009c4565b506200068e565b6040516325128c9560e01b81526001600482015260646024820152604490fd5b506064602435116200062e565b346200033c5760203660031901126200033c576004356001548110156200033c5762000b51602091620032b0565b90546040519160031b1c8152f35b346200033c576020806003193601126200033c576004359081610100515260039081815260ff6001908082604061010051200154161562000dd15762000ba4620036a1565b846101005152838352836040610100512001928354938285168015908162000daf57505060ff1980951690558561010051528481528183604061010051200154161562000d8d5760405162000bf98162003166565b60028152604036838301376000805160206200542c83398151915262000c1f82620033cd565b526000805160206200540c83398151915262000c3b82620033db565b52610100518481815b62000d2b575b50501562000d0b575084908661010051525260406101005120936005850154620002c7578160078601541662000cef578401541680620002f557508201908154169055600242910155807faca655362176dac0f19f6abad5e71484df95770771d5b7f789e714e0c826e2b46101005161010051a27f64c64ca7ab916fab6a741368067628b70d8975e69483389acadd1ba7bd54c2226101005161010051a26101005180f35b6040516001620455d760e11b0319815260048101879052602490fd5b6040516362caf48760e11b81529081906200031690336004840162003401565b835181101562000d875762000d418185620033ec565b5161010051526000805160206200544c833981519152855260406101005120336000528552856040600020541662000d7c5781018162000c44565b509050848962000c4a565b62000c4a565b60405163377da9cf60e01b815260048101849052610100516024820152604490fd5b604051631e9d1cd160e21b815290151560048201529015156024820152604490fd5b60405163377da9cf60e01b815260048101839052610100516024820152604490fd5b346200033c5760403660031901126200033c57602062000e1f62000e1662003056565b60043562003606565b604051908152f35b346200033c5762000e3836620030ec565b62000e45929192620039d3565b816101005152600360205260ff6001604061010051200154166200105b57816101005152600260205260ff6040610100512054161562001042576001600160a01b038381169390338514158062000ffb575b62000fce578262000ea9838662003606565b1062000fa357821562000f9157610100515416803b156200033c57604051637921219560e11b815261010080513060048401526001600160a01b0385166024840152604483018790526064830186905260a06084840152600060a4840152905191929091839160c49183915af18015620009045762000f76575b508162000f557f2d121a16681009646109f76ebe11dc6f1f7e08294e84d8eea3dfaff6c63a6247936020938662004019565b604051908152a360016000805160206200546c833981519152556101005180f35b62000f81906200319f565b610100516200033c578462000f23565b604051635e85ae7360e01b8152600490fd5b50604051634f4bdaaf60e11b8152600481018490526001600160a01b03919091166024820152604490fd5b60405163e2517d3f60e01b81523360048201526000805160206200548c8339815191526024820152604490fd5b506000805160206200548c83398151915261010051526000805160206200544c833981519152602052604061010051203360005260205260ff604060002054161562000e97565b60405163254b7ba960e21b815260048101839052602490fd5b60405163377da9cf60e01b815261010051600482015260016024820152604490fd5b346200033c5760403660031901126200033c57620010d6600435620010a162003056565b908061010051526000805160206200544c833981519152602052620010d0600160406101005120015462003757565b62003acb565b506101005180f35b346200033c5760603660031901126200033c5760043560246044358135620011056200370b565b811562001459575b8361010051526020916002835260ff6040610100512054168015620013d4575b620013bc57811562000f915761010051546001600160a01b0394908516803b156200033c576040519063731133e960e01b82523060048301528783830152846044830152608060648301526101005160848301528160a481610100519361010051905af180156200090457620013a1575b50604051620011ad8162003182565b868152848101600988876200128e600180968187528a604082016101005181526200126460608401610100518152608085019284845260a086019485526200124660c087019661010051885260e0810198610100518a52600361010083019c8d61010051905261012084019e8f429052610100515252604061010051209e8f9251835551151591019060ff801983541691151516179055565b5160028c015551151560038b019060ff801983541691151516179055565b516004890155516005880155516006870155511515600786019060ff801983541691151516179055565b516008840155519101558054600160401b811015620013885787620008138284620012bc94018555620032b0565b86610100515260028552604061010051209060ff1982541617905560405191610f30808401928484106001600160401b03851117620013715750918391604093620044bc84398882528682015203019061010051f0801562000904577ff59fe5d1f23ae058a845dac57f5074b3168f32985784b0ad8509f3d02964916b93856101005152600784526040610100512091166bffffffffffffffffffffffff60a01b825416179055604051908152a26101005180f35b6101008051634e487b7160e01b9052604160045251fd5b82634e487b7160e01b6101005152604160045261010051fd5b620013ac906200319f565b610100516200033c57866200119e565b6040516302d8753760e21b8152600481018690528490fd5b506101005154604051634f558e7960e01b8152600481018790529084908290879082906001600160a01b03165afa908115620009045761010051916200141c575b506200112d565b90508381813d831162001451575b620014368183620031b3565b810103126200033c575180151581036200033c578662001415565b503d6200142a565b61070891506200110d565b346200033c576200147536620030c0565b6200147f620036a1565b8161010051526006602052604061010051209260018060a01b0381169384600052602052816002604060002001541062001514575060207fee2a18ee2bc0fe152d62f395feacb9dacb1e9f3fdb444b21ec9d6aadd81c6de7918361010051526006825260406101005120856000528252600260406000200162001504828254620035c2565b9055604051908152a36101005180f35b604051634f4bdaaf60e11b8152600481018490526001600160a01b03919091166024820152604490fd5b346200033c57610100513660031901126200033c5760206040516000805160206200540c8339815191528152f35b346200033c5760a03660031901126200033c57620015896200306d565b506200159462003056565b506001600160401b036044358181116200033c57620015b8903690600401620031ed565b506064358181116200033c57620015d4903690600401620031ed565b506084359081116200033c57620015f090369060040162003255565b5060405163bc197c8160e01b8152602090f35b346200033c576200161436620030ec565b919062001620620039d3565b81610100515260206003815260ff6001604061010051200154166200105b578261010051526002815260ff6040610100512054161562001814576101005154604051627eeac760e11b81526001600160a01b038481166004830181905260248301879052969216908381604481855afa8015620009045783916101005191620017dd575b5010620017b557811562000f915785331415806200176c575b62000fce57803b156200033c57604051637921219560e11b815261010080516001600160a01b0387166004840152306024840152604483018890526064830185905260a06084840152600060a4840152905191929091839160c49183915af1801562000904577f756280617abfd1bdc475830a3a4d03cea884ac63c5b517fcc23209de9ea01de39462000f559284926200175a575b508662003b50565b62001765906200319f565b8862001752565b506000805160206200548c83398151915261010051526000805160206200544c833981519152835260406101005120336101005152835260ff60406101005120541615620016bd565b604051634f4bdaaf60e11b8152600481018690526001600160a01b0385166024820152604490fd5b809250858092503d83116200180c575b620017f98183620031b3565b810103126200033c5782905188620016a4565b503d620017ed565b60405163254b7ba960e21b815260048101849052602490fd5b346200033c5760203660031901126200033c57600435610100515260036020526101406040610100512080549060ff60018201541690600281015460ff600383015416600483015460058401549060068501549260ff600787015416946009600888015497015497604051998a52151560208a0152604089015215156060880152608087015260a086015260c0850152151560e0840152610100830152610120820152f35b346200033c5760403660031901126200033c5760246004356001600160401b0382358181116200033c57366023820112156200033c5780600401359182116200033c57838101908436918460061b0101116200033c5782610100515260209160038352600160ff6001604061010051200154161562001afe57620019556200370b565b811562001aec576064821162001ad45784610100515260038452604061010051209160ff60078401541662001ab9576101005193849291905b81841062001a045750505050600501805494858311620019e75750620019d7827f6611a7e8ce2aaaec887d27a9eabf8b92aba069b12d1ab3cf9f453ab5395388399596620035c2565b9055604051908152a26101005180f35b85836044926040519263bcc85ac960e01b84526004840152820152fd5b909162001a2484968862001a1b84978787620035e0565b0135906200349b565b9562001a5862001a4062001a3a838787620035e0565b620035f1565b8962001a4e848888620035e0565b0135908b62003b50565b62001a6962001a3a828686620035e0565b897f0a2f0de55e4fa42edc9ec9715812d29cc41255fadad75cd10437161c882850748a8062001a9a868a8a620035e0565b60405191013581526001600160a01b0390941693a3019291906200198e565b6040516001620455d760e11b03198152600481018790528790fd5b604051630f7d410960e01b8152606460048201528690fd5b60405163d0e90af160e01b8152600490fd5b60405163377da9cf60e01b8152600160048201526101005181880152604490fd5b346200033c5760203660031901126200033c5761014060405162001b438162003182565b6101005181526101005160208201526101005160408201526101005160608201526101005160808201526101005160a08201526101005160c08201526101005160e08201526101009061010051828201526101209081610100519101526004356101005152600360205260406101005120916040519062001bc48262003182565b83549384835260ff60018201541660208401901515815260028201546040850190815260ff60038401541660608601901515815260048401546080870190815260058501549160a0880192835260068601549360c0890194855260ff6007880154169560e08a0196151587528a600960088a0154998b8d019a8b5201549a01998a526040519b8c5251151560208c01525160408b015251151560608a01525160808901525160a08801525160c087015251151560e086015251908401525190820152f35b346200033c5762001c9936620030c0565b62001ca3620036a1565b8062001cb0848462003606565b1062001d145760207f8e4a0a3e5f4e0b0868f3ce7f7975ec5e9ab4961d3aebffca6de5f43ae95e7c6b9183610100515260068252604061010051209460018060a01b031694856101005152825260026040610100512001620015048282546200349b565b50604051634f4bdaaf60e11b815260048101919091526001600160a01b03919091166024820152604490fd5b346200033c57610100513660031901126200033c576020604051610100518152f35b346200033c5760403660031901126200033c5762001d7f62003056565b60043561010051526000805160206200544c833981519152602052604061010051209060018060a01b03166101005152602052602060ff6040610100512054166040519015158152f35b346200033c5760203660031901126200033c57600435806101005152600360205260ff600160406101005120015416156200031a5762001e08620036a1565b806101005152600360205260036040610100512001805460ff81168015908162000daf57505060ff19169055610100517f64c64ca7ab916fab6a741368067628b70d8975e69483389acadd1ba7bd54c2229080a26101005180f35b346200033c5762001e743662003084565b929062001e80620039d3565b8161010051526020906003825260ff6001604061010051200154166200105b576001600160a01b0384811694909190338614158062001fd5575b8062001f8c575b62001f1b579062001ef887827fdc5e8cc6b36001921ea942b2d0334e09fcc347e33b47a83d9a6c5c2a521d329c9695948862003a05565b6040519687521694a460016000805160206200546c833981519152556101005180f35b6200031684604080519162001f308362003166565b6002835236908301376000805160206200548c83398151915262001f5482620033cd565b526000805160206200540c83398151915262001f7082620033db565b526040516362caf48760e11b8152918291336004840162003401565b506000805160206200540c83398151915261010051526000805160206200544c833981519152845260406101005120336101005152845260ff6040610100512054161562001ec1565b506000805160206200548c83398151915261010051526000805160206200544c833981519152845260406101005120336101005152845260ff6040610100512054161562001eba565b346200033c576020806003193601126200033c576004356101005152600481526040610100512060405190818382549182815201908192610100515284610100512090610100515b86828210620020cc5786866200207f82880383620031b3565b6040519283928184019082855251809152604084019291610100515b828110620020ab57505050500390f35b83516001600160a01b0316855286955093810193928101926001016200209b565b83546001600160a01b03168552909301926001928301920162002066565b346200033c57610100513660031901126200033c5760206040516000805160206200548c8339815191528152f35b346200033c576020806003193601126200033c57620021366200306d565b90600180546200214681620031d5565b93620021566040519586620031b3565b8185526200216482620031d5565b601f1901610100515b818110620022c2575050610100516001600160a01b03909116905b828110620021f4575050506040519180830181845284518091528160408501950191610100515b828110620021bd5785870386f35b9091929382606088620021e6849a89516040809180518452602081015160208501520151910152565b0197950193929101620021af565b928362002203829795620032b0565b90549060031b1c806101005152600687526040610100512084610100515287526040610100512081604051916200223a8362003166565b8054808452868201548b850152600290910154604084015214620022a0575060405190620022688262003166565b81526101005187820152610100516040820152620022878287620033ec565b52620022948186620033ec565b505b0194929462002188565b9050620022ae8287620033ec565b52620022bb8186620033ec565b5062002296565b8590620022d49795979493946200332d565b828288010152019593959291926200216d565b346200033c57610100513660031901126200033c5760206040516000805160206200542c8339815191528152f35b346200033c57610100513660031901126200033c5760405180600180549283815260208091018094600161010051527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690610100515b818110620023c0575050508362002384910384620031b3565b604051928184019082855251809152604084019491610100515b828110620023ac5785870386f35b83518752958101959281019284016200239e565b82548452928401929185019185016200236b565b346200033c5760a03660031901126200033c576024356101a052604051620023fc8162003118565b610100518152610100516020820152610100516040820152610100516060820152606060808201526101005160a082015260c0610100519101526004356101005152600260205260ff6040610100512054161562002af3576004356101005152600760205260018060a01b0360406101005120541660405163b957e51560e01b8152602081600481855afa801562000904576101005160e05262002aba575b5060043561010051526003602052600260406101005120015461016052620024d660e051620024d060e0516101605162003450565b62003471565b620024ed60e051620024d060e05160243562003450565b6101a0526200250860e051620024d060e05160443562003450565b90806101a0511062002aaf575b6101a05182111562002a95575b610100516101805262002537608435620034a9565b61010051606435610100519060405163bfcad43360e01b815261010051816004818b5afa90811562000904576101005191620029c7575b5060649793959735935b8151851015620029ba576084358410156200288d576001600160a01b03620025a18684620033ec565b5116986040516101c0526378591ad560e01b6101c051528960046101c0510152610100516101c05160246101c051855afa9788156200090457610100519862002857575b6101005161012052885180156200284c5780600019810111620008c4576200261290600019018a620033ec565b51515b610140526101a0518211156200283e5762002635825b60e05190620035c2565b60c052610100515b89518110156200275d5762002653818b620033ec565b516080526020608051015160a05260a051158062002750575b6200272f575b6101a05160a05110158062002723575b62002691575b6001016200263d565b620026ae60e051620026a860c05160a051620035c2565b62003450565b9081600019810111620008c4576001916000198101620026f6575b50620026dc60805151610120516200349b565b61012052608051516101405260a05160c052905062002688565b6200270e620027189161014051906000190162003471565b610120516200349b565b610120528d620026c9565b508a60a0511062002682565b6200274760e051620024d060e0516101605162003450565b60a05262002672565b506101605115156200266c565b50959391999097506200277a60e051620026a860c0518c620035c2565b80600019810111620008c45760001981016200281b575b5061012051620027b5575b50620027aa600191620035d0565b920193959762002578565b6200281260019295620027aa9260405190620027d1826200314a565b8152610120516020820152620027e8828b620033ec565b52620027f5818a620033ec565b506200280861012051610180516200349b565b61018052620035d0565b9491506200279c565b6200270e620028339161014051906000190162003471565b610120528a62002791565b620026356101a0516200262b565b506101005162002615565b9750620028863d80610100516101c0513e62002877816101c051620031b3565b6101c051016101c05162003516565b97620025e5565b50509295509250506001915b620028a481620034a9565b94610100515b828110620029895750505060405193620028c48562003118565b600435855260208501936101a05185526040860190815260608601906101805182526080870192835260a08701941515855260c087019384526040519560208752610100870197516020880152516040870152516060860152516080850152519160e060a0850152825180955260206101208501930161010051955b8087106200295f57505083945051151560c08401525160e08301520390f35b909360206040600192828851858060a01b0381511683520151838201520195019601959062002940565b806200299860019284620033ec565b51620029a5828a620033ec565b52620029b28189620033ec565b5001620028aa565b5050929550905062002899565b90503d8061010051833e620029dd8183620031b3565b60208282810103126200033c5781516001600160401b0381116200033c57818301601f8285010112156200033c57808301519062002a1b82620031d5565b9362002a2b6040519586620031b3565b8285526020850193810160208460051b8484010101116200033c5780820160200193915b60208460051b8284010101851062002a6d575050505050886200256e565b8451926001600160a01b03841684036200033c57602081819582935201950194925062002a4f565b905062002aa860e0516101a0516200349b565b9062002522565b806101a05262002515565b6020813d60201162002aea575b8162002ad660209383620031b3565b810103126200033c575160e052816200249b565b3d915062002ac7565b602460405163254b7ba960e21b81526004356004820152fd5b346200033c576020806003193601126200033c57600435908161010051526003815260ff9060019160ff83604061010051200154161562000d8d576040519062002b568262003166565b60028252604036848401376000805160206200542c83398151915262002b7c83620033cd565b526000805160206200540c83398151915262002b9883620033db565b526101005190849082825b62002c48575b5050501562000d0b57506003908361010051525260406101005120906005820154620002c75760ff60078301541662002c2c5760ff60038301541680620002f55750810160ff1981541690556002429101557faca655362176dac0f19f6abad5e71484df95770771d5b7f789e714e0c826e2b46101005161010051a26101005180f35b6040516001620455d760e11b0319815260048101849052602490fd5b845181101562002caa5762002c5e8186620033ec565b5161010051526000805160206200544c83398151915286526040610100512033610100515286528160406101005120541662002c9d5782018262002ba3565b5050905083868062002ba9565b62002ba9565b346200033c5760203660031901126200033c5760043561010051526003602052602060ff6003604061010051200154166040519015158152f35b346200033c5760403660031901126200033c57606062002d1662002d0d62003056565b6004356200334e565b62002d3860405180926040809180518452602081015160208501520151910152565bf35b346200033c5760403660031901126200033c5762002d5762003056565b336001600160a01b0382160362002d7657620010d69060043562003acb565b60405163334bd91960e11b8152600490fd5b346200033c5762002d993662003084565b91929062002da6620039d3565b62002db0620036a1565b816101005152600360205260ff6003604061010051200154168015908162000daf57505060208162002e06857fdc5e8cc6b36001921ea942b2d0334e09fcc347e33b47a83d9a6c5c2a521d329c94888762003a05565b6040519485526001600160a01b03908116951693a460016000805160206200546c833981519152556101005180f35b346200033c5760403660031901126200033c57620010d660043562002e5962003056565b908061010051526000805160206200544c83398151915260205262002e88600160406101005120015462003757565b6200395b565b346200033c5760203660031901126200033c57600435610100515260036020526020604061010051206002825260ff604061010051205416908162002ed9575b506040519015158152f35b600591500154158262002ece565b346200033c5760203660031901126200033c5760043561010051526000805160206200544c83398151915260205260206001604061010051200154604051908152f35b346200033c5760203660031901126200033c5760043561010051526007602052602060018060a01b03604061010051205416604051908152f35b346200033c57610100513660031901126200033c5761010051546040516001600160a01b039091168152602090f35b346200033c5760203660031901126200033c5760043561010051526002602052602060ff6040610100512054166040519015158152f35b346200033c5760203660031901126200033c576004359063ffffffff60e01b82168092036200033c57602091630271189760e51b81149081156200302a575b811562003018575b5015158152f35b634aae842d60e11b1490508362003011565b9050637965db0b60e01b8114801562003045575b9062003009565b506301ffc9a760e01b81146200303e565b602435906001600160a01b03821682036200053357565b600435906001600160a01b03821682036200053357565b60809060031901126200053357600435906001600160a01b03906024358281168103620005335791604435908116810362000533579060643590565b606090600319011262000533576004356001600160a01b03811681036200053357906024359060443590565b60609060031901126200053357600435906024356001600160a01b038116810362000533579060443590565b60e081019081106001600160401b038211176200313457604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b038211176200313457604052565b606081019081106001600160401b038211176200313457604052565b61014081019081106001600160401b038211176200313457604052565b6001600160401b0381116200313457604052565b90601f801991011681019081106001600160401b038211176200313457604052565b6001600160401b038111620031345760051b60200190565b9080601f83011215620005335760209082356200320a81620031d5565b936200321a6040519586620031b3565b81855260208086019260051b8201019283116200053357602001905b82821062003245575050505090565b8135815290830190830162003236565b81601f8201121562000533578035906001600160401b0382116200313457604051926200328d601f8401601f191660200185620031b3565b828452602083830101116200053357816000926020809301838601378301015290565b600154811015620032e85760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b634e487b7160e01b600052603260045260246000fd5b805415620032e857600052602060002090600090565b8054821015620032e85760005260206000200190600090565b604051906200333c8262003166565b60006040838281528260208201520152565b620033586200332d565b50600081815260066020526040928382209060018060a01b0316825260205282812092828151946200338a8662003166565b60028154918288526001810154602089015201548387015203620033ae5750505090565b805193509091620033bf8462003166565b835281602084015282015290565b805115620032e85760200190565b805160011015620032e85760400190565b8051821015620032e85760209160051b010190565b6001600160a01b03909116815260406020808301829052835191830182905260609092019282019160005b8281106200343b575050505090565b8351855293810193928101926001016200342c565b81156200345b570490565b634e487b7160e01b600052601260045260246000fd5b818102929181159184041417156200348557565b634e487b7160e01b600052601160045260246000fd5b919082018092116200348557565b90620034b582620031d5565b604090620034c76040519182620031b3565b8381528093620034da601f1991620031d5565b019160009060005b848110620034f1575050505050565b602090825162003501816200314a565b848152828581830152828701015201620034e2565b90602091828183031262000533578051906001600160401b03821162000533570181601f8201121562000533578051926200355184620031d5565b93604093620035646040519687620031b3565b818652828087019260061b8501019381851162000533578301915b848310620035905750505050505090565b858383031262000533578386918251620035aa816200314a565b8551815282860151838201528152019201916200357f565b919082039182116200348557565b6000198114620034855760010190565b9190811015620032e85760061b0190565b356001600160a01b0381168103620005335790565b600052600660205260406000209060018060a01b0316600052602052620036586040806000208151620036398162003166565b81548152600260018301549283602084015201549283910152620035c2565b90565b805480156200368b57600019019062003675828262003314565b81549060018060a01b039060031b1b1916905555565b634e487b7160e01b600052603160045260246000fd5b3360009081527f91d8fe36e587b1c02b80f930a15e1c8e402441ade3f4f16e2bd2fa9b5677ce1b60205260409020546000805160206200540c8339815191529060ff1615620036ed5750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b3360009081527f01ad0a5c2995d6fc2f61c01367d1aec57c110fc8134bff838fea8fc24ba4ca0d60205260409020546000805160206200542c8339815191529060ff1615620036ed5750565b806000526000805160206200544c83398151915260205260406000203360005260205260ff6040600020541615620036ed5750565b6001600160a01b031660008181527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d60205260408120549091906000805160206200544c8339815191529060ff1662003818578280526020526040822081835260205260408220600160ff198254161790553391600080516020620053ec8339815191528180a4600190565b505090565b6001600160a01b031660008181527fb16e88c42fd4e48df2dd6a2eabd6bc9aec654ec170056b470819f8892cc6431c60205260408120549091906000805160206200548c833981519152906000805160206200544c8339815191529060ff16620038b9578184526020526040832082845260205260408320600160ff19825416179055600080516020620053ec833981519152339380a4600190565b50505090565b6001600160a01b031660008181527f01ad0a5c2995d6fc2f61c01367d1aec57c110fc8134bff838fea8fc24ba4ca0d60205260408120549091906000805160206200542c833981519152906000805160206200544c8339815191529060ff16620038b9578184526020526040832082845260205260408320600160ff19825416179055600080516020620053ec833981519152339380a4600190565b906000918083526000805160206200544c83398151915280602052604084209260018060a01b03169283855260205260ff60408520541615600014620038b9578184526020526040832082845260205260408320600160ff19825416179055600080516020620053ec833981519152339380a4600190565b6000805160206200546c8339815191526002815414620039f35760029055565b604051633ee5aeb560e01b8152600490fd5b939291909380600052600260205260ff604060002054161562003ab3576001600160a01b0382811690811562003aa157841562000f915786161462003a9a578262003a51868362003606565b1062003a715762003a698362003a6f95968362004019565b62003b50565b565b604051634f4bdaaf60e11b815260048101919091526001600160a01b0385166024820152604490fd5b5050509050565b6040516302154e0360e21b8152600490fd5b6024906040519063254b7ba960e21b82526004820152fd5b906000918083526000805160206200544c83398151915280602052604084209260018060a01b03169283855260205260ff604085205416600014620038b957818452602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b600081815260076020908152604080832054905163b957e51560e01b81529295946001600160a01b03918216949093909281600481885afa9081156200400e57879162003fd2575b506040516378591ad560e01b81528483166004820152908782602481895afa91821562003f0557889262003fa9575b508388526003602052604088209260ff6001850154161560001462003fa15762003bf782620024d0814262003450565b945b8187168a52600560205260408a20818b5260205260ff60408b2054161560001462003f7357808a52600460205260408a20805490600160401b82101562003f5f5762003c538262003c759260016002969501815562003314565b858b939293169083549060031b9160018060a01b03809116831b921b19161790565b90558288168b52600560205260408b20818c5260205260408b20600160ff198254161790556040519262003ca98462003166565b81845260208401908b825260408501928d84528d52600660205260408d20908a168d5260205260408c2093518455516001840155519101555b8151928362003d8057505050506040519362003cfe856200314a565b84526020840152813b1562003d7c5760405163233f068360e21b81526001600160a01b0391909116600482015282516024820152602090920151604483015282908290606490829084905af1801562003d715762003d5a575050565b62003d6682916200319f565b62003d6e5750565b80fd5b6040513d84823e3d90fd5b8380fd5b90919294936000199586810190811162003f4b5762003da09085620033ec565b5197899360208a01938451158062003f3b575b62003f14575b505062003dc982918a516200349b565b92510362003e86575086525060015b62003de6575b505050505050565b5191820191821162003e7257823b1562003e6e57604051630c02695760e31b81526001600160a01b03919091166004820152602481019190915282516044820152602090920151606483015282908290608490829084905af1801562003d715762003e56575b8080808062003dde565b62003e6282916200319f565b62003d6e578062003e4c565b8480fd5b634e487b7160e01b85526011600452602485fd5b6040519162003e95836200314a565b82526020820152853b1562003f105760405163233f068360e21b81526001600160a01b03851660048201528151602482015260209091015160448201528781606481838a5af1801562003f055762003eef575b5062003dd8565b62003efd909791976200319f565b953862003ee8565b6040513d8a823e3d90fd5b8780fd5b62003f2b929550816002620024d092015462003450565b825260019262003dc98262003db9565b5060ff6001820154161562003db3565b634e487b7160e01b8a52601160045260248afd5b634e487b7160e01b8c52604160045260248cfd5b5060066020526040892090861689526020526001604089200162003f998882546200349b565b905562003ce2565b889462003bf9565b62003fca9192503d808a833e62003fc18183620031b3565b81019062003516565b903862003bc7565b90506020813d60201162004005575b8162003ff060209383620031b3565b810103126200400157513862003b98565b8680fd5b3d915062003fe1565b6040513d89823e3d90fd5b9091600092828452600760205260018060a01b03604085205416916040519363b957e51560e01b8552602085600481875afa9485156200446e57869562004430575b506040516378591ad560e01b81526001600160a01b0384166004820152918683602481885afa9283156200400e57879362004410575b508187526003602052604087209160066020526040882060018060a01b0386168952602052620040c982600160408b200154620035c2565b9060ff600185015416156000146200440857620040ec88620024d0814262003450565b905b8215620042cb57895260066020526040892060018060a01b0387168a5260205281600160408b2001555b889385516000198101908111620042b757620041359087620033ec565b519860208a019182511580620042a7575b62004283575b5050518103620042025750506200416691508551620035c2565b845260015b62004178575b5050505050565b5160001981019190821162003e7257823b1562003e6e57604051630c02695760e31b81526001600160a01b03919091166004820152602481019190915282516044820152602090920151606483015282908290608490829084905af1801562003d7157620041ea575b80808062004171565b620041f682916200319f565b62003d6e5780620041e1565b60405192509062004213836200314a565b82526020820152843b15620040015760405163233f068360e21b81526001600160a01b0385166004820152815160248201526020909101516044820152868160648183895af180156200400e576200426d575b506200416b565b6200427b909691966200319f565b943862004266565b6200429a929650816002620024d092015462003450565b845260019381386200414c565b5060ff6001820154161562004146565b634e487b7160e01b8b52601160045260248bfd5b98979695949392919089895260066020526040892060018060a01b0387168a526020528860026040822082815582600182015501556005602052604089208a8a526020526040892060ff198154169055885b8a8a52600460205260408a208054821015620043f657816200433f9162003314565b905460039190911b1c6001600160a01b039081169088161462004365576001016200431d565b8a8a9b92939495969798999a52600460205260408b20805480600019810111620043e2578c926040620043a6620043c59462000a8094600019019062003314565b60018060a01b0391549060031b1c169486815260046020522062003314565b905589526004602052620043dc60408a206200365b565b62004118565b634e487b7160e01b8d52601160045260248dfd5b50509091929394959697985062004118565b8890620040ee565b620044289193503d8089833e62003fc18183620031b3565b913862004091565b9094506020813d60201162004465575b816200444f60209383620031b3565b8101031262004461575193386200405b565b8580fd5b3d915062004440565b6040513d88823e3d90fd5b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c1615620044a957565b604051631afcd79f60e31b8152600490fdfe60c03461011357601f610f3038819003918201601f19168301916001600160401b03831184841017610118578084926040948552833981010312610113576020815191015133156100fa5760008054336001600160a01b03198216811783556040519290916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a36004549060ff82166100ec575060ff191660011760045561025890818110156100e557505b60805260a052604051610e01908161012f823960805181610247015260a05181818161030501526104d30152f35b90506100b7565b62dc149f60e41b8152600490fd5b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe604060808152600436101561001357600080fd5b600090813560e01c806360134ab814610610578063715018a6146105b657806378591ad5146105815780638cfc1a0c146103c45780638da5cb5b1461039d5780639fc812df1461026a578063b957e51514610230578063bfcad4331461010a5763f2fde38b1461008257600080fd5b346101065760203660031901126101065761009b6106f0565b6100a3610ac9565b6001600160a01b039081169182156100ef575082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b815260048101849052602490fd5b5080fd5b50903461022d578060031936011261022d5781518092600254808352846020809401600286527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace92865b868282106102175750505061016b92500385610787565b83519161018f61017a846107a9565b9361018784519586610787565b8085526107a9565b8382019190601f1901368337845b86518110156101ce576001906001600160a01b036101bb828a6107e5565b51166101c782886107e5565b520161019d565b509190848483519485948186019282875251809352850193925b8281106101f757505050500390f35b83516001600160a01b0316855286955093810193928101926001016101e8565b855484526001958601958a955093019201610154565b80fd5b5034610106578160031936011261010657602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5034610106576020366003190112610106576001600160a01b0361028c6106f0565b1690610296610ac9565b6102ad826000526003602052604060002054151590565b156103875760207f5236602858fa598e0b1c0f4eab28a46d135d76a3a28731d8dca95bc52c91bc33916102df84610ce1565b5083855260018252848181206102f58154610af5565b8061034b575b50505051838152a17f00000000000000000000000000000000000000000000000000000000000000007f63d376bb675e9271b3adb34cb36d1a798dd118ca053517b25f7acd15ec5ee8cd8380a380f35b82601f8211600114610363575050555b8438806102fb565b9091808252610380601f878420940160051c840160018501610c11565b555561035b565b6024925051906206faff60ea1b82526004820152fd5b5034610106578160031936011261010657905490516001600160a01b039091168152602090f35b5034610106576060366003190112610106576103de6106f0565b8160231936011261057d576103f16107c1565b6001600160a01b03821660008181526003602052604090205490939190610566575b80519060018083018093116105525761042b836107a9565b9261043885519485610787565b808452610447601f19916107a9565b01875b8181106105305750508087905b6104f7575b5050906104c77f4c8c66c8551f3e7ed813eb3ec55ec7b27797d5a48b34e05d06b98fdf40ebab7f939251946104c184519361049685610755565b6104bb60243598898752604435968760208201526104b482856107e5565b52826107e5565b506108f1565b90610915565b815193845260208401527f000000000000000000000000000000000000000000000000000000000000000092a380f35b825181101561052b57818161050d8293866107e5565b5161051882886107e5565b5261052381876107e5565b500190610457565b61045c565b602090865161053e81610755565b8a8152828b8183015282880101520161044a565b634e487b7160e01b87526011600452602487fd5b5061057861057384610b2f565b610844565b610413565b8280fd5b5034610106576020366003190112610106576105b2906105a76105a26106f0565b61080f565b90519182918261070b565b0390f35b823461022d578060031936011261022d576105cf610ac9565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101065760803660031901126101065761062a6106f0565b9060243590806043193601126106ec576106426107c1565b6001600160a01b0384166000818152600360205260409020549094906106d8575b81518410156106c057906104c783926104c17f0953de6dfd7eb23c71ebe51a20db652910a836a763478811242e3e04d501b7599551936106a285610755565b6104bb60443598898752606435968760208201526104b482856107e5565b825163112517f360e21b815260048101859052602490fd5b90506106e661057385610b2f565b90610663565b8380fd5b600435906001600160a01b038216820361070657565b600080fd5b60208082019080835283518092528060408094019401926000905b83821061073557505050505090565b845180518752830151868401529485019493820193600190910190610726565b6040810190811067ffffffffffffffff82111761077157604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761077157604052565b67ffffffffffffffff81116107715760051b60200190565b6040516020810181811067ffffffffffffffff821117610771576040526000815290565b80518210156107f95760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03166000818152600360205260409020541561083b5761057361083891610b2f565b90565b506108386107c1565b80519060209181019082820190838184031261070657838101519067ffffffffffffffff821161070657019281603f85011215610706578084015160409361088b826107a9565b9561089886519788610787565b828752858488019360061b820101948511610706578501915b8483106108c15750505050505090565b858484840301126107065783869182516108da81610755565b8551815282860151838201528152019201916108b1565b610838610907916040519283916020830161070b565b03601f198101835282610787565b6001600160a01b03169190610928610ac9565b61093f836000526003602052604060002054151590565b610a9a5761094c83610c5f565b507f3a6c576d3a0788c605bd39cfac04db1e53b67f30a383f05ef356fe866e7203636020604051858152a15b6000928352600192602060018152604082209280519267ffffffffffffffff8411610a86576109a78554610af5565b601f8111610a4d575b5082601f85116001146109ea57508394959650926109df575b50508160011b916000199060031b1c1916179055565b0151905038806109c9565b858252808220601f198616989094939291905b898310610a365750505083600195969710610a1d575b505050811b019055565b015160001960f88460031b161c19169055388080610a13565b8385015186559485019493810193918101916109fd565b610a7690868352848320601f870160051c810191868810610a7c575b601f0160051c0190610c11565b386109b0565b9091508190610a69565b634e487b7160e01b81526041600452602490fd5b7f3127c1223c3e044893fdbef142783b113140774723e7a54693844985a4f8fc066020604051858152a1610978565b6000546001600160a01b03163303610add57565b60405163118cdaa760e01b8152336004820152602490fd5b90600182811c92168015610b25575b6020831014610b0f57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610b04565b610b46816000526003602052604060002054151590565b15610bfa576000908152600160209060018252604083209260405193849282825492610b7184610af5565b8087529360018116908115610bd65750600114610b99575b5050505061083892500382610787565b815285812095935091905b818310610bbe575050610838935082010138808080610b89565b85548784018501529485019486945091830191610ba4565b935050505061083894925060ff191682840152151560051b82010138808080610b89565b602490604051906206faff60ea1b82526004820152fd5b818110610c1c575050565b60008155600101610c11565b6002548110156107f95760026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b600081815260036020526040812054610cdc5760025468010000000000000000811015610cc8579082610cb4610c9d84600160409601600255610c28565b819391549060031b91821b91600019901b19161790565b905560025492815260036020522055600190565b634e487b7160e01b82526041600452602482fd5b905090565b6000818152600360205260408120549091908015610dc65760001990808201818111610db25760025490838201918211610d9e57818103610d6a575b5050506002548015610d5657810190610d3582610c28565b909182549160031b1b19169055600255815260036020526040812055600190565b634e487b7160e01b84526031600452602484fd5b610d88610d79610c9d93610c28565b90549060031b1c928392610c28565b9055845260036020526040842055388080610d1d565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b85526011600452602485fd5b50509056fea2646970667358221220eefebb496fe05ad927593d4d6297b139568122c4fbce1c7868451f6ca98f5a4564736f6c634300081800332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d0ea61da3a8a09ad801432653699f8c1860b1ae9d2ea4a141fadfd63227717bc8e4224a9d862eb61445087219a10cb28481aeb3456a8198060c513a5159ccd7df02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a264697066735822122059ac1352b621216373f0f1906e99c36397162c22cecc92e3373b6d9a2321a67564736f6c63430008180033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Patrick Fischer (Pathin) > https://pathin.me",
    "custom:security-contact": "security@gildi.io",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "assignShares(uint256,(address,uint256)[])": {
        "details": "The shares are assigned in a batch to prevent gas limit issues.",
        "params": {
          "_releaseId": "The ID of the Royalty Rights Token / release.",
          "_sharesBatch": "The shares to assign."
        }
      },
      "balanceOf(address)": {
        "params": {
          "_account": "The account to fetch the balance for."
        }
      },
      "balanceOf(uint256,address)": {
        "params": {
          "_account": "The account to fetch the balance for.",
          "_tokenId": "The token ID."
        }
      },
      "batchDeleteRelease(uint256,uint256)": {
        "details": "Batch deletion is used to prevent gas limit issues.",
        "params": {
          "_batchSizeOwners": "The number of owners to delete in a batch.",
          "_releaseId": "The ID of the Royalty Rights Token / release."
        }
      },
      "cancelInitialSale(uint256)": {
        "params": {
          "_releaseId": "The ID of the Royalty Rights Token / release."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "createNewRelease(uint256,uint256,uint256)": {
        "params": {
          "_amount": "The amount of the token.",
          "_ownershipTrackingTimePeriod": "The time period in which we aggregate the shares owned by a user.",
          "_releaseId": "The ID of the Royalty Rights Token / release."
        }
      },
      "deposit(uint256,address,uint256)": {
        "params": {
          "_account": "The account to deposit the tokens to.",
          "_amount": "The amount of tokens to deposit.",
          "_tokenId": "The ID of the Royalty Rights Token / release."
        }
      },
      "endInitialSale(uint256)": {
        "params": {
          "_releaseId": "The ID of the Royalty Rights Token / release."
        }
      },
      "fetchSharesInPeriod(uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_cursor": "The cursor for pagination.",
          "_end": "The end timestamp (exclusive).",
          "_limit": "The limit for pagination.",
          "_releaseId": "The release ID.",
          "_start": "The start timestamp."
        }
      },
      "getAllReleaseIds()": {
        "returns": {
          "_0": "An array of all the release IDs."
        }
      },
      "getAvailableBalance(uint256,address)": {
        "params": {
          "_account": "The account to fetch the balance for.",
          "_tokenId": "The token ID."
        },
        "returns": {
          "_0": "The available balance of the user for the token."
        }
      },
      "getReleaseById(uint256)": {
        "params": {
          "_releaseId": "The release ID."
        },
        "returns": {
          "_0": "The release."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,address,address)": {
        "params": {
          "_defaultAdmin": "The default admin.",
          "_initialAdmin": "The initial admin.",
          "_initialReleaseManager": "The initial release manager.",
          "_rwaToken": "The RWA token contract."
        }
      },
      "isInInitialSale(uint256)": {
        "params": {
          "_releaseId": "The release ID."
        },
        "returns": {
          "_0": "True if the release is in the initial sale, false otherwise."
        }
      },
      "isLocked(uint256)": {
        "params": {
          "_releaseId": "The release ID."
        },
        "returns": {
          "_0": "True if the release is locked, false otherwise."
        }
      },
      "lockTokens(address,uint256,uint256)": {
        "params": {
          "_account": "The account to lock the tokens for.",
          "_amountToLock": "The amount of tokens to lock.",
          "_tokenId": "The ID of the Royalty Rights Token / release."
        }
      },
      "ownersOfToken(uint256)": {
        "returns": {
          "_0": "The token owners."
        }
      },
      "releaseExists(uint256)": {
        "params": {
          "_releaseId": "The ID of the Royalty Rights Token / release."
        },
        "returns": {
          "_0": "True if the release exists, false otherwise."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "startInitialSale(uint256)": {
        "params": {
          "_releaseId": "The ID of the Royalty Rights Token / release."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferOwnership(uint256,address,address,uint256)": {
        "params": {
          "_amount": "The amount of shares to transfer.",
          "_from": "The address of the current owner.",
          "_to": "The address of the new owner.",
          "_tokenId": "The ID of the Royalty Rights Token / release."
        }
      },
      "transferOwnershipInitialSale(uint256,address,address,uint256)": {
        "params": {
          "_amount": "The amount of shares to transfer.",
          "_from": "The address of the current owner.",
          "_to": "The address of the new owner.",
          "_tokenId": "The ID of the Royalty Rights Token / release."
        }
      },
      "unlockRelease(uint256)": {
        "params": {
          "_releaseId": "The ID of the Royalty Rights Token / release."
        }
      },
      "unlockTokens(address,uint256,uint256)": {
        "params": {
          "_account": "The account to unlock the tokens for.",
          "_amountToUnlock": "The amount of tokens to unlock.",
          "_tokenId": "The ID of the Royalty Rights Token / release."
        }
      },
      "withdraw(uint256,address,uint256)": {
        "params": {
          "_account": "The account to withdraw the tokens from.",
          "_amount": "The amount of tokens to withdraw.",
          "_tokenId": "The ID of the Royalty Rights Token / release."
        }
      }
    },
    "title": "GildiManager",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AccessControlUnauthorizedAccountAny(address,bytes32[])": [
        {
          "notice": "Throws if the caller does not have any of the required roles."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "ADMIN_ROLE()": {
        "notice": "A role for the admin."
      },
      "MARKETPLACE_ROLE()": {
        "notice": "A role for marketplace contracts."
      },
      "RELEASE_MANAGER_ROLE()": {
        "notice": "A role that allows the contract to manage releases."
      },
      "assignShares(uint256,(address,uint256)[])": {
        "notice": "Assigns the user shares to a royalty rights release in a batch operation."
      },
      "balanceOf(address)": {
        "notice": "Fetches the balance of a user for all tokens."
      },
      "balanceOf(uint256,address)": {
        "notice": "Fetches the balance of a user for a specific token."
      },
      "batchDeleteRelease(uint256,uint256)": {
        "notice": "Deletes a release in batches."
      },
      "cancelInitialSale(uint256)": {
        "notice": "Cancels the initial sale of a release."
      },
      "createNewRelease(uint256,uint256,uint256)": {
        "notice": "Create a new release."
      },
      "deposit(uint256,address,uint256)": {
        "notice": "Deposits royalty rights tokens into the manager."
      },
      "endInitialSale(uint256)": {
        "notice": "Ends the initial sale of a release."
      },
      "fetchSharesInPeriod(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Fetch the shares of a release owned by a user in a specific time period paginated."
      },
      "getAllReleaseIds()": {
        "notice": "Fetches all the release IDs."
      },
      "getAvailableBalance(uint256,address)": {
        "notice": "Fetches the available balance of a user for a specific token."
      },
      "getReleaseById(uint256)": {
        "notice": "Gets a release by its ID."
      },
      "gildiToken()": {
        "notice": "The Gildi token contract."
      },
      "initialize(address,address,address,address)": {
        "notice": "Initialize the contract."
      },
      "isFullyAssigned(uint256)": {
        "notice": "Checks if the release is fully assigned."
      },
      "isInInitialSale(uint256)": {
        "notice": "Returns if the release is in the initial sale."
      },
      "isLocked(uint256)": {
        "notice": "Checks if the release is locked."
      },
      "lockTokens(address,uint256,uint256)": {
        "notice": "Locks tokens for a user."
      },
      "ownersOfToken(uint256)": {
        "notice": "Get the owners of a token."
      },
      "releaseExists(uint256)": {
        "notice": "Check if a release exists."
      },
      "releaseOwnershipStorages(uint256)": {
        "notice": "Mapping of ownership storages."
      },
      "rwaReleaseIds(uint256)": {
        "notice": "An array of releases."
      },
      "rwaReleases(uint256)": {
        "notice": "The RWA releases."
      },
      "startInitialSale(uint256)": {
        "notice": "Starts the initial sale of a release."
      },
      "transferOwnership(uint256,address,address,uint256)": {
        "notice": "Transfers ownership of a release's shares to another user."
      },
      "transferOwnershipInitialSale(uint256,address,address,uint256)": {
        "notice": "Transfers ownership of a release's shares to another user during the initial sale."
      },
      "unlockRelease(uint256)": {
        "notice": "Unlocks a release."
      },
      "unlockTokens(address,uint256,uint256)": {
        "notice": "Unlocks tokens for a user."
      },
      "withdraw(uint256,address,uint256)": {
        "notice": "Withdraws royalty rights tokens from the manager."
      }
    },
    "notice": "A contract which tracks ownership of ERC1155 RWAs and allows for the transfer of ownership.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26776,
        "contract": "contracts/manager/GildiManager.sol:GildiManager",
        "label": "gildiToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IGildiToken)23693"
      },
      {
        "astId": 26780,
        "contract": "contracts/manager/GildiManager.sol:GildiManager",
        "label": "rwaReleaseIds",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 26785,
        "contract": "contracts/manager/GildiManager.sol:GildiManager",
        "label": "existingReleases",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 26791,
        "contract": "contracts/manager/GildiManager.sol:GildiManager",
        "label": "rwaReleases",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(RWARelease)22137_storage)"
      },
      {
        "astId": 26797,
        "contract": "contracts/manager/GildiManager.sol:GildiManager",
        "label": "tokenOwners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 26804,
        "contract": "contracts/manager/GildiManager.sol:GildiManager",
        "label": "isTokenOwner",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 26812,
        "contract": "contracts/manager/GildiManager.sol:GildiManager",
        "label": "userTokenBalance",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenBalance)22105_storage))"
      },
      {
        "astId": 26818,
        "contract": "contracts/manager/GildiManager.sol:GildiManager",
        "label": "releaseOwnershipStorages",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_contract(GildiManagerOwnershipStorage)29808)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(GildiManagerOwnershipStorage)29808": {
        "encoding": "inplace",
        "label": "contract GildiManagerOwnershipStorage",
        "numberOfBytes": "20"
      },
      "t_contract(IGildiToken)23693": {
        "encoding": "inplace",
        "label": "contract IGildiToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_struct(TokenBalance)22105_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IGildiManager.TokenBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenBalance)22105_storage"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_contract(GildiManagerOwnershipStorage)29808)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract GildiManagerOwnershipStorage)",
        "numberOfBytes": "32",
        "value": "t_contract(GildiManagerOwnershipStorage)29808"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(TokenBalance)22105_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct IGildiManager.TokenBalance))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(TokenBalance)22105_storage)"
      },
      "t_mapping(t_uint256,t_struct(RWARelease)22137_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IGildiManager.RWARelease)",
        "numberOfBytes": "32",
        "value": "t_struct(RWARelease)22137_storage"
      },
      "t_struct(RWARelease)22137_storage": {
        "encoding": "inplace",
        "label": "struct IGildiManager.RWARelease",
        "members": [
          {
            "astId": 22109,
            "contract": "contracts/manager/GildiManager.sol:GildiManager",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 22112,
            "contract": "contracts/manager/GildiManager.sol:GildiManager",
            "label": "locked",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 22115,
            "contract": "contracts/manager/GildiManager.sol:GildiManager",
            "label": "unlockedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 22118,
            "contract": "contracts/manager/GildiManager.sol:GildiManager",
            "label": "inInitialSale",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 22121,
            "contract": "contracts/manager/GildiManager.sol:GildiManager",
            "label": "totalShares",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 22124,
            "contract": "contracts/manager/GildiManager.sol:GildiManager",
            "label": "unassignedShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 22127,
            "contract": "contracts/manager/GildiManager.sol:GildiManager",
            "label": "burnedShares",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 22130,
            "contract": "contracts/manager/GildiManager.sol:GildiManager",
            "label": "deleting",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 22133,
            "contract": "contracts/manager/GildiManager.sol:GildiManager",
            "label": "deletedShares",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 22136,
            "contract": "contracts/manager/GildiManager.sol:GildiManager",
            "label": "createdAt",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(TokenBalance)22105_storage": {
        "encoding": "inplace",
        "label": "struct IGildiManager.TokenBalance",
        "members": [
          {
            "astId": 22100,
            "contract": "contracts/manager/GildiManager.sol:GildiManager",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 22102,
            "contract": "contracts/manager/GildiManager.sol:GildiManager",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 22104,
            "contract": "contracts/manager/GildiManager.sol:GildiManager",
            "label": "lockedAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}