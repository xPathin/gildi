{
  "address": "0x33033Bb5e829D3bd5b83ff92a76C0b97f69f7A5e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPairId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPriceFeeder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PairNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceDataNotAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StalePrice",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "pairId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_FEEDER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_pairId",
          "type": "bytes32"
        }
      ],
      "name": "deletePriceDataForPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPairs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "pairId",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                }
              ],
              "internalType": "struct IGildiPriceOracle.Asset",
              "name": "baseAsset",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                }
              ],
              "internalType": "struct IGildiPriceOracle.Asset",
              "name": "quoteAsset",
              "type": "tuple"
            }
          ],
          "internalType": "struct IGildiPriceOracle.PairInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_pairId",
          "type": "bytes32"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGildiPriceResolver.PriceData",
          "name": "priceData",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_pairId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_age",
          "type": "uint256"
        }
      ],
      "name": "getPriceNoOlderThan",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGildiPriceResolver.PriceData",
          "name": "priceData",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_contractAdmin",
          "type": "address"
        },
        {
          "internalType": "contract IGildiPriceOracle",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "pairId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            }
          ],
          "internalType": "struct GildiPriceProvider.PriceUpdate[]",
          "name": "_priceUpdates",
          "type": "tuple[]"
        }
      ],
      "name": "setPriceData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "pairId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            }
          ],
          "internalType": "struct GildiPriceProvider.PriceUpdate",
          "name": "_priceUpdate",
          "type": "tuple"
        }
      ],
      "name": "setPriceData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x40f4985f5a2fd528cbc9d47b1587a80a926c37ad744b16a47b77da71f651061d",
  "receipt": {
    "to": null,
    "from": "0xdda45D610A204EB5CB204e9d49920F788296C676",
    "contractAddress": "0x33033Bb5e829D3bd5b83ff92a76C0b97f69f7A5e",
    "transactionIndex": 3,
    "gasUsed": "1240549",
    "logsBloom": "0x
    "blockHash": "0x8acdfde3ed835f112833663928192d579b97904c8153b388917b90596252134e",
    "transactionHash": "0x40f4985f5a2fd528cbc9d47b1587a80a926c37ad744b16a47b77da71f651061d",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 33459891,
        "transactionHash": "0x40f4985f5a2fd528cbc9d47b1587a80a926c37ad744b16a47b77da71f651061d",
        "address": "0x33033Bb5e829D3bd5b83ff92a76C0b97f69f7A5e",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 5,
        "blockHash": "0x8acdfde3ed835f112833663928192d579b97904c8153b388917b90596252134e"
      }
    ],
    "blockNumber": 33459891,
    "cumulativeGasUsed": "1552113",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5fcb370cb2b9ee0340656465635a79fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPairId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPriceFeeder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PairNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceDataNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StalePrice\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pairId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_FEEDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pairId\",\"type\":\"bytes32\"}],\"name\":\"deletePriceDataForPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPairs\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"pairId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct IGildiPriceOracle.Asset\",\"name\":\"baseAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct IGildiPriceOracle.Asset\",\"name\":\"quoteAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct IGildiPriceOracle.PairInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pairId\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IGildiPriceResolver.PriceData\",\"name\":\"priceData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pairId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"}],\"name\":\"getPriceNoOlderThan\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IGildiPriceResolver.PriceData\",\"name\":\"priceData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contractAdmin\",\"type\":\"address\"},{\"internalType\":\"contract IGildiPriceOracle\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"pairId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct GildiPriceProvider.PriceUpdate[]\",\"name\":\"_priceUpdates\",\"type\":\"tuple[]\"}],\"name\":\"setPriceData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"pairId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct GildiPriceProvider.PriceUpdate\",\"name\":\"_priceUpdate\",\"type\":\"tuple\"}],\"name\":\"setPriceData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Gildi Company\",\"custom:security-contact\":\"security@gildi.io\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"InvalidPairId()\":[{\"details\":\"Thrown when an invalid pair ID is provided\"}],\"InvalidPrice()\":[{\"details\":\"Thrown when an invalid price (zero) is provided\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"NotPriceFeeder()\":[{\"details\":\"Thrown when a non-price feeder attempts to set price data\"}],\"PairNotFound()\":[{\"details\":\"Thrown when a pair is not found\"}],\"PriceDataNotAvailable()\":[{\"details\":\"Thrown when price data is not available for a requested pair\"}],\"StalePrice()\":[{\"details\":\"Thrown when a price is older than the requested maximum age\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"PriceUpdated(bytes32,uint256,uint8,uint256)\":{\"params\":{\"decimals\":\"The number of decimals for the price\",\"pairId\":\"The pair ID\",\"price\":\"The updated price\",\"timestamp\":\"The timestamp when the price was updated\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"deletePriceDataForPair(bytes32)\":{\"params\":{\"_pairId\":\"The pair ID\"}},\"getPairs()\":{\"returns\":{\"_0\":\"pairInfos An array of PairInfo structs\"}},\"getPrice(bytes32)\":{\"params\":{\"pairId\":\"The identifier of the asset pair\"},\"returns\":{\"priceData\":\"The price data for the asset pair\"}},\"getPriceNoOlderThan(bytes32,uint256)\":{\"params\":{\"age\":\"The maximum age of the price data in seconds\",\"pairId\":\"The identifier of the asset pair\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address)\":{\"params\":{\"_contractAdmin\":\"The address of the contract admin\",\"_defaultAdmin\":\"The address of the default admin\",\"_oracle\":\"The address of the Gildi price oracle\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setPriceData((bytes32,uint256,uint8))\":{\"params\":{\"_priceUpdate\":\"The price data to set\"}},\"setPriceData((bytes32,uint256,uint8)[])\":{\"params\":{\"_priceUpdates\":\"Array of price updates\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"stateVariables\":{\"oracle\":{\"details\":\"Reference to the Gildi price oracle contract\"},\"pairIds\":{\"details\":\"Array of all pair IDs with price data\"},\"prices\":{\"details\":\"Mapping from pairId => PriceData\"}},\"title\":\"Gildi Price Provider\",\"version\":1},\"userdoc\":{\"events\":{\"PriceUpdated(bytes32,uint256,uint8,uint256)\":{\"notice\":\"Emitted when a price is updated\"}},\"kind\":\"user\",\"methods\":{\"deletePriceDataForPair(bytes32)\":{\"notice\":\"Deletes the price data for a given pair\"},\"getPairs()\":{\"notice\":\"Retrieves all pairs with price data\"},\"getPrice(bytes32)\":{\"notice\":\"Retrieves the price data for a given pair ID\"},\"getPriceNoOlderThan(bytes32,uint256)\":{\"notice\":\"Retrieves the price data for a given pair ID, with a maximum age\"},\"initialize(address,address,address)\":{\"notice\":\"Initializes the contract and sets up roles\"},\"setPriceData((bytes32,uint256,uint8))\":{\"notice\":\"Sets the price data for a given pair\"},\"setPriceData((bytes32,uint256,uint8)[])\":{\"notice\":\"Sets the price data for multiple pairs in a single transaction\"}},\"notice\":\"Provides price data for asset pairs\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/price/providers/GildiPriceProvider.sol\":\"GildiPriceProvider\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x85a70e2b1b65e9ba456add364d22b97eb9944083df1c39c0b4bd6a4b5aa386a4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\\n        return INITIALIZABLE_STORAGE;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        bytes32 slot = _initializableStorageSlot();\\n        assembly {\\n            $.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x6694b63ddb2c59bbe341c846171798350e8f72fa02189fcdeaca864e28b54e1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\\n\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xbff9f59c84e5337689161ce7641c0ef8e872d6a7536fbc1f5133f128887aba3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"contracts/interfaces/oracles/price/IGildiPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\n\\npragma solidity 0.8.24;\\n\\nimport './IGildiPriceResolver.sol';\\n\\n/// @title Gildi Price Oracle Interface\\n/// @notice Interface for the consumer-facing Gildi Price Oracle\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\ninterface IGildiPriceOracle is IGildiPriceResolver {\\n    /// @notice Represents an asset in the system\\n    struct Asset {\\n        /// @dev Unique identifier for the asset\\n        uint256 id;\\n        /// @dev The asset's symbol (e.g., BTC, ETH)\\n        string symbol;\\n        /// @dev The asset's full name\\n        string name;\\n    }\\n\\n    /// @notice Information about a trading pair\\n    struct PairInfo {\\n        /// @dev Unique identifier for the pair\\n        bytes32 pairId;\\n        /// @dev The base asset in the pair\\n        Asset baseAsset;\\n        /// @dev The quote asset in the pair\\n        Asset quoteAsset;\\n    }\\n\\n    /// @dev Thrown when an invalid pair ID is provided\\n    error InvalidPairId();\\n\\n    /// @notice Adds a pair using asset IDs\\n    /// @param _baseAssetId The ID of the base asset\\n    /// @param _quoteAssetId The ID of the quote asset\\n    /// @param _resolver The resolver contract for the asset pair\\n    function addPair(uint256 _baseAssetId, uint256 _quoteAssetId, IGildiPriceResolver _resolver) external;\\n\\n    /// @notice Retrieves the resolver for a specific asset pair\\n    /// @param _pairId The identifier of the asset pair\\n    function getResolver(bytes32 _pairId) external view returns (IGildiPriceResolver resolver);\\n\\n    /// @notice Fetches a list of all registered pairs in \\\"BASE/QUOTE\\\" string form\\n    /// @return An array of registered pairs\\n    function getPairs() external view returns (PairInfo[] memory);\\n\\n    /// @notice Adds a new asset\\n    /// @param _symbol The symbol of the asset\\n    /// @param _name The name of the asset\\n    /// @return The ID of the newly added asset\\n    function addAsset(string memory _symbol, string memory _name) external returns (uint256);\\n\\n    /// @notice Returns all registered assets\\n    /// @return An array of registered assets\\n    function getAssets() external view returns (Asset[] memory);\\n\\n    /// @notice Returns an asset by ID\\n    /// @param _assetId The ID of the asset\\n    /// @return The asset details\\n    function getAssetById(uint256 _assetId) external view returns (Asset memory);\\n\\n    /// @notice Returns pairs that use the specified asset ID as quote\\n    /// @param _quoteAssetId The ID of the quote asset\\n    /// @return An array of registered pairs\\n    function getPairsByQuoteAsset(uint256 _quoteAssetId) external view returns (string[] memory);\\n\\n    /// @notice Retrieves price data by numeric IDs\\n    /// @param _baseAssetId The ID of the base asset\\n    /// @param _quoteAssetId The ID of the quote asset\\n    /// @return The price data for the asset pair\\n    function getPriceById(uint256 _baseAssetId, uint256 _quoteAssetId) external view returns (PriceData memory);\\n\\n    /// @notice Checks if a pair with the given ID exists\\n    /// @param _pairId The identifier of the asset pair\\n    /// @return True if the pair exists\\n    function pairExistsById(bytes32 _pairId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6c406a4d51283a3acb73db7da552e9d22df34f34b7f8f3f772ba04b844419ddd\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/oracles/price/IGildiPriceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\n\\npragma solidity 0.8.24;\\n\\n/// @title Gildi Price Resolver Interface\\n/// @notice Interface that all price resolvers must implement\\n/// @custom:security-contact security@gildi.io\\n/// @author Patrick Fischer\\ninterface IGildiPriceResolver {\\n    /// @notice Price data struct\\n    struct PriceData {\\n        /// @notice The price of the base asset in terms of the quote asset\\n        uint256 price;\\n        /// @notice The number of decimals for the price\\n        uint8 decimals;\\n        /// @notice The UNIX timestamp when the price was last updated\\n        uint256 timestamp;\\n    }\\n\\n    /// @notice Retrieves the price data for a given pair ID\\n    /// @param pairId The identifier of the asset pair\\n    /// @return price The price data for the asset pair\\n    function getPrice(bytes32 pairId) external view returns (PriceData memory price);\\n\\n    /// @notice Retrieves the price data for a given pair ID, with a maximum age\\n    /// @param pairId The identifier of the asset pair\\n    /// @param age The maximum age of the price data in seconds\\n    function getPriceNoOlderThan(bytes32 pairId, uint256 age) external view returns (PriceData memory priceData);\\n}\\n\",\"keccak256\":\"0x82a4c66f173ce75a38cdc50d75c806f13fe99ed53bc3f1458fb50348dcf77b75\",\"license\":\"UNLICENSED\"},\"contracts/oracles/price/providers/GildiPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Created for Soonami Venturethon prototype only.\\n// No redistribution, modification, or commercial use without prior written consent.\\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\\n\\npragma solidity 0.8.24;\\n\\nimport '../../../interfaces/oracles/price/IGildiPriceResolver.sol';\\nimport '../../../interfaces/oracles/price/IGildiPriceOracle.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\n/// @title Gildi Price Provider\\n/// @notice Provides price data for asset pairs\\n/// @custom:security-contact security@gildi.io\\n/// @author Gildi Company\\ncontract GildiPriceProvider is Initializable, IGildiPriceResolver, AccessControlUpgradeable {\\n    bytes32 public constant PRICE_FEEDER_ROLE = keccak256('PRICE_FEEDER_ROLE');\\n    bytes32 public constant ADMIN_ROLE = keccak256('ADMIN_ROLE');\\n\\n    /// @dev Mapping from pairId => PriceData\\n    mapping(bytes32 => PriceData) private prices;\\n    /// @dev Array of all pair IDs with price data\\n    bytes32[] private pairIds;\\n    /// @dev Reference to the Gildi price oracle contract\\n    IGildiPriceOracle private oracle;\\n\\n    // Structs\\n    struct PriceUpdate {\\n        bytes32 pairId;\\n        uint256 price;\\n        uint8 decimals;\\n    }\\n\\n    // Custom Errors\\n    /// @dev Thrown when a non-price feeder attempts to set price data\\n    error NotPriceFeeder();\\n    /// @dev Thrown when an invalid price (zero) is provided\\n    error InvalidPrice();\\n    /// @dev Thrown when price data is not available for a requested pair\\n    error PriceDataNotAvailable();\\n    /// @dev Thrown when a pair is not found\\n    error PairNotFound();\\n    /// @dev Thrown when a price is older than the requested maximum age\\n    error StalePrice();\\n\\n    // Events\\n    /// @notice Emitted when a price is updated\\n    /// @param pairId The pair ID\\n    /// @param price The updated price\\n    /// @param decimals The number of decimals for the price\\n    /// @param timestamp The timestamp when the price was updated\\n    event PriceUpdated(bytes32 indexed pairId, uint256 price, uint8 decimals, uint256 timestamp);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the contract and sets up roles\\n    /// @param _defaultAdmin The address of the default admin\\n    /// @param _contractAdmin The address of the contract admin\\n    /// @param _oracle The address of the Gildi price oracle\\n    function initialize(address _defaultAdmin, address _contractAdmin, IGildiPriceOracle _oracle) public initializer {\\n        __AccessControl_init();\\n        _grantRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\\n        _grantRole(ADMIN_ROLE, _contractAdmin);\\n        oracle = _oracle;\\n    }\\n\\n    /// @notice Sets the price data for a given pair\\n    /// @param _priceUpdate The price data to set\\n    function setPriceData(PriceUpdate calldata _priceUpdate) external onlyRole(PRICE_FEEDER_ROLE) {\\n        _setPriceData(_priceUpdate);\\n    }\\n\\n    /// @notice Sets the price data for multiple pairs in a single transaction\\n    /// @param _priceUpdates Array of price updates\\n    function setPriceData(PriceUpdate[] calldata _priceUpdates) external onlyRole(PRICE_FEEDER_ROLE) {\\n        for (uint256 i = 0; i < _priceUpdates.length; i++) {\\n            _setPriceData(_priceUpdates[i]);\\n        }\\n    }\\n\\n    /// @notice Deletes the price data for a given pair\\n    /// @param _pairId The pair ID\\n    function deletePriceDataForPair(bytes32 _pairId) external onlyRole(ADMIN_ROLE) {\\n        if (prices[_pairId].timestamp == 0) {\\n            revert PairNotFound();\\n        }\\n\\n        delete prices[_pairId];\\n        for (uint256 i = 0; i < pairIds.length; i++) {\\n            if (pairIds[i] == _pairId) {\\n                pairIds[i] = pairIds[pairIds.length - 1];\\n                pairIds.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IGildiPriceResolver\\n    function getPrice(bytes32 _pairId) external view override returns (PriceData memory priceData) {\\n        if (prices[_pairId].timestamp == 0) {\\n            revert PriceDataNotAvailable();\\n        }\\n        return prices[_pairId];\\n    }\\n\\n    /// @inheritdoc IGildiPriceResolver\\n    function getPriceNoOlderThan(\\n        bytes32 _pairId,\\n        uint256 _age\\n    ) external view override returns (PriceData memory priceData) {\\n        if (prices[_pairId].timestamp == 0) {\\n            revert PriceDataNotAvailable();\\n        }\\n        if (block.timestamp - prices[_pairId].timestamp > _age) {\\n            revert StalePrice();\\n        }\\n        return prices[_pairId];\\n    }\\n\\n    /// @notice Retrieves all pairs with price data\\n    /// @return pairInfos An array of PairInfo structs\\n    function getPairs() external view returns (IGildiPriceOracle.PairInfo[] memory) {\\n        IGildiPriceOracle.PairInfo[] memory pairInfos = new IGildiPriceOracle.PairInfo[](pairIds.length);\\n        IGildiPriceOracle.PairInfo[] memory allOraclePairs = oracle.getPairs();\\n        for (uint256 i = 0; i < pairIds.length; i++) {\\n            for (uint256 j = 0; j < allOraclePairs.length; j++) {\\n                if (allOraclePairs[j].pairId == pairIds[i]) {\\n                    pairInfos[i] = allOraclePairs[j];\\n                    break;\\n                }\\n            }\\n\\n            if (pairInfos[i].pairId == 0) {\\n                pairInfos[i] = IGildiPriceOracle.PairInfo(\\n                    pairIds[i],\\n                    IGildiPriceOracle.Asset(0, 'UNKNOWN', 'UNKNOWN'),\\n                    IGildiPriceOracle.Asset(0, 'UNKNOWN', 'UNKNOWN')\\n                );\\n            }\\n        }\\n\\n        return pairInfos;\\n    }\\n\\n    /// @dev Internal function to set price data for a given pair\\n    /// @param _priceUpdate The price data to set\\n    function _setPriceData(PriceUpdate calldata _priceUpdate) internal {\\n        if (_priceUpdate.price == 0) {\\n            revert InvalidPrice();\\n        }\\n        if (!oracle.pairExistsById(_priceUpdate.pairId)) {\\n            revert IGildiPriceOracle.InvalidPairId();\\n        }\\n\\n        if (prices[_priceUpdate.pairId].timestamp == 0) {\\n            pairIds.push(_priceUpdate.pairId);\\n        }\\n\\n        prices[_priceUpdate.pairId] = PriceData(_priceUpdate.price, _priceUpdate.decimals, block.timestamp);\\n        emit PriceUpdated(_priceUpdate.pairId, _priceUpdate.price, _priceUpdate.decimals, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0xb1a3517a20cdff42ed8109e26fba8ef7b229ad458cc89afb7994fa9ce7bfbbed\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608080604052346100b8577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081549060ff8260401c166100a957506001600160401b036002600160401b031982821601610064575b6040516114fd90816100be8239f35b6001600160401b031990911681179091556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1388080610055565b63f92ee8a960e01b8152600490fd5b600080fdfe608060408181526004908136101561001657600080fd5b600092833560e01c90816301ffc9a714610e9b57508063248a9ca314610e635780632bbd610814610c0b5780632f2ff15d14610be357806331d98b3f14610b9457806336568abe14610b4d5780634a4d8f22146109d057806375b238fc14610995578063767eb5ef146105ee57806383ed8063146105b357806391d148541461055f578063a217fddf14610540578063a4ae35e014610461578063c0c53b8b146102d8578063d38bd218146101225763d547741f146100d457600080fd5b3461011e578060031936011261011e5761011a913561011560016100f6610eef565b938387526000805160206114a8833981519152602052862001546111fa565b611424565b5080f35b8280fd5b503461011e57606036600319011261011e5761013c611180565b60243580156102cb5760018060a01b036002541690833593835180936373e4f57b60e11b8252868383015281602460209687935afa9081156102c1578791610287575b5015610279578486528583526002848720015415610222575b506044359260ff841680940361021e577fd1714320240094fd6695c5f796545fbbaa072f747664921b110424cec115e7179360609382516101d881610f89565b8481526002828201848152858301904282528a8c528b8552868c209351845560ff6001850191511660ff198254161790555191015582519384528301524290820152a280f35b8580fd5b60015490600160401b821015610266575061025e610247826001889401600155610ffc565b819391549060031b91821b91600019901b19161790565b905538610198565b634e487b7160e01b875260419052602486fd5b835163a8c399e560e01b8152fd5b90508381813d83116102ba575b61029e8183610fbb565b810103126102b6575180151581036102b6573861017f565b8680fd5b503d610294565b85513d89823e3d90fd5b505162bfc92160e01b8152fd5b50903461011e57606036600319011261011e578035906001600160a01b03808316830361045d57610307610eef565b60443591821680920361021e577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009384549360ff85881c16159467ffffffffffffffff811680159081610455575b600114908161044b575b159081610442575b506104335767ffffffffffffffff198116600117875585610414575b5060ff8654881c161561040657509061039e6103a49261123b565b506112db565b506bffffffffffffffffffffffff60a01b60025416176002556103c5578280f35b805468ff00000000000000001916905551600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a138808280f35b8651631afcd79f60e31b8152fd5b68ffffffffffffffffff19166801000000000000000117865538610383565b50865163f92ee8a960e01b8152fd5b90501538610367565b303b15915061035f565b879150610355565b8480fd5b50903461011e578160031936011261011e5780359061047e610fdd565b50818452836020526002838520015415610532578184528360205260028385200154420342811161051f5760243510610511575082829161050d945280602052209060028151926104ce84610f89565b8054845260ff6001820154166020850152015481830152519182918291909160408060608301948051845260ff60208201511660208501520151910152565b0390f35b8251630cd5fa0760e11b8152fd5b634e487b7160e01b855260118252602485fd5b825163f23a554960e01b8152fd5b83823461055b578160031936011261055b5751908152602090f35b5080fd5b50903461011e578160031936011261011e578160209360ff92610580610eef565b903582526000805160206114a883398151915286528282206001600160a01b039091168252855220549151911615158152f35b83823461055b578160031936011261055b57602090517f7d867aa9d791a9a4be418f90a2f248aa2c5f1348317792a6f6412f94df9819f78152f35b50903461011e578260031936011261011e576001926001549161061083611049565b9261061d85519485610fbb565b80845261062981611049565b602092601f1991820184865b828110610961575050600254885163767eb5ef60e01b815292879250839182906001600160a01b03165afa9182156109575790889291869261082b575b50509050839694969592955b82811061070c5750505080519380850191818652865180935280860182828560051b890101980194915b8483106106b55787890388f35b90919293949584806106fa839b603f198c82030187528a5190866106ea60608451845286850151908088860152840190610f52565b9201519087818403910152610f52565b9a9801969594919091019201906106a8565b9085809896928187999699905b6107cd575b506107298189611138565b515115610740575b0190915096949695929561067e565b61074981610ffc565b90548a5161075681610f89565b89815261076161114c565b8982015261076d61114c565b8c8201528b519161077d83610f89565b8a835261078861114c565b8a84015261079461114c565b8d8401528c51936107a485610f89565b60031b1c8352888301528a8201526107bc828a611138565b526107c78189611138565b50610731565b8351811015610826576107e08185611138565b51516107eb83610ffc565b90549060031b1c146107ff57820182610719565b6108099084611138565b51610814828a611138565b5261081f8189611138565b503861071e565b61071e565b915091503d8086843e61083e8184610fbb565b8201848382031261021e57825167ffffffffffffffff9384821161095357019181601f840112156102b65782519161087583611049565b946108828b519687610fbb565b838652878087019460051b8601019482861161094f579081898e98979695949301945b8686106108ba57505050505050503880610672565b909192939480969798505183811161094b578201606080878388030112610947578e5191908f6108e984610f89565b8d830151845282015186811161094357878e610907928501016110d3565b8d8401528101519085821161093f57918f610929888f809795819701016110d3565b908201528152019501939291908d9796956108a5565b8d80fd5b8e80fd5b8c80fd5b8b80fd5b8980fd5b8780fd5b87513d87823e3d90fd5b895161096c81610f89565b888152610977611061565b83820152610983611061565b8b82015282828b010152018590610635565b83823461055b578160031936011261055b57602090517fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758152f35b5091903461055b57602036600319011261055b5780357fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758084526000805160206114a883398151915260205284842033855260205260ff858520541615610b2f5750808352826020526002848420015415610b205782938160029452846020528420918483558460019484828780970155015584935b610a6e578480f35b825480851015610b1b578290610a8386610ffc565b929054600393841b1c14610a9d5750508280940193610a66565b92509360001992838101908111610b0857610247610abd610ac992610ffc565b905490881b1c92610ffc565b90558254908115610af55750810192610ae184610ffc565b81939154921b1b1916905555388080808480f35b634e487b7160e01b865260319052602485fd5b634e487b7160e01b875260118352602487fd5b508480f35b50825163d719ab6960e01b8152fd5b845163e2517d3f60e01b815233818501526024810191909152604490fd5b5082903461055b578060031936011261055b57610b68610eef565b90336001600160a01b03831603610b85575061011a919235611424565b5163334bd91960e11b81528390fd5b50903461011e57602036600319011261011e57803590610bb2610fdd565b50818452836020526002838520015415610532575082829161050d945280602052209060028151926104ce84610f89565b503461011e578060031936011261011e5761011a9135610c0660016100f6610eef565b61139d565b50903461011e5760209081600319360112610e5f5780359267ffffffffffffffff9283851161021e573660238601121561021e578483013593841161021e57602492606095366024606088028301011161095357610c67611180565b875b868110610c74578880f35b87810282019060448201358015610e50576002805488516373e4f57b60e11b8152858b01358189018190529392918e91908a9082908e9082906001600160a01b03165afa918215610e455791610e0f575b5015610dff579088888e8e9486825281835280848320015415610d78575b91610d62917fd1714320240094fd6695c5f796545fbbaa072f747664921b110424cec115e7179695949388606460019c0193610d1e8561122d565b96805194610d2b86610f89565b898652808387019360ff809b168552838801954287528252522093518455868d850191511660ff198254161790555191015561122d565b8b519283521689820152428a820152a201610c69565b94505050509192936001805490600160401b821015610ded57610d628f8f94907fd1714320240094fd6695c5f796545fbbaa072f747664921b110424cec115e71796898f958f9482610dda60019f9e9d9a808560649661024793019055610ffc565b90559c5050509193949596509150610ce3565b634e487b7160e01b8f52604189528b8ffd5b885163a8c399e560e01b81528790fd5b90508881813d8311610e3e575b610e268183610fbb565b8101031261093f5751801515810361093f5738610cc5565b503d610e1c565b8b51903d90823e3d90fd5b865162bfc92160e01b81528590fd5b8380fd5b50903461011e57602036600319011261011e57816020936001923581526000805160206114a883398151915285522001549051908152f35b8490843461011e57602036600319011261011e573563ffffffff60e01b811680910361011e5760209250637965db0b60e01b8114908115610ede575b5015158152f35b6301ffc9a760e01b14905083610ed7565b602435906001600160a01b0382168203610f0557565b600080fd5b60005b838110610f1d5750506000910152565b8181015183820152602001610f0d565b90602091610f4681518092818552858086019101610f0a565b601f01601f1916010190565b610f8691815181526040610f756020840151606060208501526060840190610f2d565b920151906040818403910152610f2d565b90565b6060810190811067ffffffffffffffff821117610fa557604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610fa557604052565b60405190610fea82610f89565b60006040838281528260208201520152565b6001548110156110335760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b634e487b7160e01b600052603260045260246000fd5b67ffffffffffffffff8111610fa55760051b60200190565b6040519061106e82610f89565b6060604083600081528260208201520152565b81601f82011215610f0557805167ffffffffffffffff8111610fa557604051926110b5601f8301601f191660200185610fbb565b81845260208284010111610f0557610f869160208085019101610f0a565b9190606083820312610f0557604051906110ec82610f89565b81938051835260208101519167ffffffffffffffff92838111610f055781611115918401611081565b60208501526040820151928311610f05576040926111339201611081565b910152565b80518210156110335760209160051b010190565b604051906040820182811067ffffffffffffffff821117610fa55760405260078252662aa725a727aba760c91b6020830152565b3360009081527f4cd7f3876d8bd577ac885bd6a28644b234fdfca58e117f6db2ccfc80224a681660205260409020547f7d867aa9d791a9a4be418f90a2f248aa2c5f1348317792a6f6412f94df9819f79060ff16156111dc5750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b806000526000805160206114a883398151915260205260406000203360005260205260ff60406000205416156111dc5750565b3560ff81168103610f055790565b6001600160a01b031660008181527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d60205260408120549091906000805160206114a88339815191529060ff166112d6578280526020526040822081835260205260408220600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b505090565b6001600160a01b031660008181527fb16e88c42fd4e48df2dd6a2eabd6bc9aec654ec170056b470819f8892cc6431c60205260408120549091907fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775906000805160206114a88339815191529060ff16611397578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b50505090565b906000918083526000805160206114a883398151915280602052604084209260018060a01b03169283855260205260ff60408520541615600014611397578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b906000918083526000805160206114a883398151915280602052604084209260018060a01b03169283855260205260ff60408520541660001461139757818452602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a460019056fe02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800a264697066735822122011a8809dd911606e68b9a978ee2241f1c2ccad2f0e3a1bdf9b196db7f969e20164736f6c63430008180033",
  "deployedBytecode": "0x608060408181526004908136101561001657600080fd5b600092833560e01c90816301ffc9a714610e9b57508063248a9ca314610e635780632bbd610814610c0b5780632f2ff15d14610be357806331d98b3f14610b9457806336568abe14610b4d5780634a4d8f22146109d057806375b238fc14610995578063767eb5ef146105ee57806383ed8063146105b357806391d148541461055f578063a217fddf14610540578063a4ae35e014610461578063c0c53b8b146102d8578063d38bd218146101225763d547741f146100d457600080fd5b3461011e578060031936011261011e5761011a913561011560016100f6610eef565b938387526000805160206114a8833981519152602052862001546111fa565b611424565b5080f35b8280fd5b503461011e57606036600319011261011e5761013c611180565b60243580156102cb5760018060a01b036002541690833593835180936373e4f57b60e11b8252868383015281602460209687935afa9081156102c1578791610287575b5015610279578486528583526002848720015415610222575b506044359260ff841680940361021e577fd1714320240094fd6695c5f796545fbbaa072f747664921b110424cec115e7179360609382516101d881610f89565b8481526002828201848152858301904282528a8c528b8552868c209351845560ff6001850191511660ff198254161790555191015582519384528301524290820152a280f35b8580fd5b60015490600160401b821015610266575061025e610247826001889401600155610ffc565b819391549060031b91821b91600019901b19161790565b905538610198565b634e487b7160e01b875260419052602486fd5b835163a8c399e560e01b8152fd5b90508381813d83116102ba575b61029e8183610fbb565b810103126102b6575180151581036102b6573861017f565b8680fd5b503d610294565b85513d89823e3d90fd5b505162bfc92160e01b8152fd5b50903461011e57606036600319011261011e578035906001600160a01b03808316830361045d57610307610eef565b60443591821680920361021e577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009384549360ff85881c16159467ffffffffffffffff811680159081610455575b600114908161044b575b159081610442575b506104335767ffffffffffffffff198116600117875585610414575b5060ff8654881c161561040657509061039e6103a49261123b565b506112db565b506bffffffffffffffffffffffff60a01b60025416176002556103c5578280f35b805468ff00000000000000001916905551600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a138808280f35b8651631afcd79f60e31b8152fd5b68ffffffffffffffffff19166801000000000000000117865538610383565b50865163f92ee8a960e01b8152fd5b90501538610367565b303b15915061035f565b879150610355565b8480fd5b50903461011e578160031936011261011e5780359061047e610fdd565b50818452836020526002838520015415610532578184528360205260028385200154420342811161051f5760243510610511575082829161050d945280602052209060028151926104ce84610f89565b8054845260ff6001820154166020850152015481830152519182918291909160408060608301948051845260ff60208201511660208501520151910152565b0390f35b8251630cd5fa0760e11b8152fd5b634e487b7160e01b855260118252602485fd5b825163f23a554960e01b8152fd5b83823461055b578160031936011261055b5751908152602090f35b5080fd5b50903461011e578160031936011261011e578160209360ff92610580610eef565b903582526000805160206114a883398151915286528282206001600160a01b039091168252855220549151911615158152f35b83823461055b578160031936011261055b57602090517f7d867aa9d791a9a4be418f90a2f248aa2c5f1348317792a6f6412f94df9819f78152f35b50903461011e578260031936011261011e576001926001549161061083611049565b9261061d85519485610fbb565b80845261062981611049565b602092601f1991820184865b828110610961575050600254885163767eb5ef60e01b815292879250839182906001600160a01b03165afa9182156109575790889291869261082b575b50509050839694969592955b82811061070c5750505080519380850191818652865180935280860182828560051b890101980194915b8483106106b55787890388f35b90919293949584806106fa839b603f198c82030187528a5190866106ea60608451845286850151908088860152840190610f52565b9201519087818403910152610f52565b9a9801969594919091019201906106a8565b9085809896928187999699905b6107cd575b506107298189611138565b515115610740575b0190915096949695929561067e565b61074981610ffc565b90548a5161075681610f89565b89815261076161114c565b8982015261076d61114c565b8c8201528b519161077d83610f89565b8a835261078861114c565b8a84015261079461114c565b8d8401528c51936107a485610f89565b60031b1c8352888301528a8201526107bc828a611138565b526107c78189611138565b50610731565b8351811015610826576107e08185611138565b51516107eb83610ffc565b90549060031b1c146107ff57820182610719565b6108099084611138565b51610814828a611138565b5261081f8189611138565b503861071e565b61071e565b915091503d8086843e61083e8184610fbb565b8201848382031261021e57825167ffffffffffffffff9384821161095357019181601f840112156102b65782519161087583611049565b946108828b519687610fbb565b838652878087019460051b8601019482861161094f579081898e98979695949301945b8686106108ba57505050505050503880610672565b909192939480969798505183811161094b578201606080878388030112610947578e5191908f6108e984610f89565b8d830151845282015186811161094357878e610907928501016110d3565b8d8401528101519085821161093f57918f610929888f809795819701016110d3565b908201528152019501939291908d9796956108a5565b8d80fd5b8e80fd5b8c80fd5b8b80fd5b8980fd5b8780fd5b87513d87823e3d90fd5b895161096c81610f89565b888152610977611061565b83820152610983611061565b8b82015282828b010152018590610635565b83823461055b578160031936011261055b57602090517fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758152f35b5091903461055b57602036600319011261055b5780357fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758084526000805160206114a883398151915260205284842033855260205260ff858520541615610b2f5750808352826020526002848420015415610b205782938160029452846020528420918483558460019484828780970155015584935b610a6e578480f35b825480851015610b1b578290610a8386610ffc565b929054600393841b1c14610a9d5750508280940193610a66565b92509360001992838101908111610b0857610247610abd610ac992610ffc565b905490881b1c92610ffc565b90558254908115610af55750810192610ae184610ffc565b81939154921b1b1916905555388080808480f35b634e487b7160e01b865260319052602485fd5b634e487b7160e01b875260118352602487fd5b508480f35b50825163d719ab6960e01b8152fd5b845163e2517d3f60e01b815233818501526024810191909152604490fd5b5082903461055b578060031936011261055b57610b68610eef565b90336001600160a01b03831603610b85575061011a919235611424565b5163334bd91960e11b81528390fd5b50903461011e57602036600319011261011e57803590610bb2610fdd565b50818452836020526002838520015415610532575082829161050d945280602052209060028151926104ce84610f89565b503461011e578060031936011261011e5761011a9135610c0660016100f6610eef565b61139d565b50903461011e5760209081600319360112610e5f5780359267ffffffffffffffff9283851161021e573660238601121561021e578483013593841161021e57602492606095366024606088028301011161095357610c67611180565b875b868110610c74578880f35b87810282019060448201358015610e50576002805488516373e4f57b60e11b8152858b01358189018190529392918e91908a9082908e9082906001600160a01b03165afa918215610e455791610e0f575b5015610dff579088888e8e9486825281835280848320015415610d78575b91610d62917fd1714320240094fd6695c5f796545fbbaa072f747664921b110424cec115e7179695949388606460019c0193610d1e8561122d565b96805194610d2b86610f89565b898652808387019360ff809b168552838801954287528252522093518455868d850191511660ff198254161790555191015561122d565b8b519283521689820152428a820152a201610c69565b94505050509192936001805490600160401b821015610ded57610d628f8f94907fd1714320240094fd6695c5f796545fbbaa072f747664921b110424cec115e71796898f958f9482610dda60019f9e9d9a808560649661024793019055610ffc565b90559c5050509193949596509150610ce3565b634e487b7160e01b8f52604189528b8ffd5b885163a8c399e560e01b81528790fd5b90508881813d8311610e3e575b610e268183610fbb565b8101031261093f5751801515810361093f5738610cc5565b503d610e1c565b8b51903d90823e3d90fd5b865162bfc92160e01b81528590fd5b8380fd5b50903461011e57602036600319011261011e57816020936001923581526000805160206114a883398151915285522001549051908152f35b8490843461011e57602036600319011261011e573563ffffffff60e01b811680910361011e5760209250637965db0b60e01b8114908115610ede575b5015158152f35b6301ffc9a760e01b14905083610ed7565b602435906001600160a01b0382168203610f0557565b600080fd5b60005b838110610f1d5750506000910152565b8181015183820152602001610f0d565b90602091610f4681518092818552858086019101610f0a565b601f01601f1916010190565b610f8691815181526040610f756020840151606060208501526060840190610f2d565b920151906040818403910152610f2d565b90565b6060810190811067ffffffffffffffff821117610fa557604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610fa557604052565b60405190610fea82610f89565b60006040838281528260208201520152565b6001548110156110335760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b634e487b7160e01b600052603260045260246000fd5b67ffffffffffffffff8111610fa55760051b60200190565b6040519061106e82610f89565b6060604083600081528260208201520152565b81601f82011215610f0557805167ffffffffffffffff8111610fa557604051926110b5601f8301601f191660200185610fbb565b81845260208284010111610f0557610f869160208085019101610f0a565b9190606083820312610f0557604051906110ec82610f89565b81938051835260208101519167ffffffffffffffff92838111610f055781611115918401611081565b60208501526040820151928311610f05576040926111339201611081565b910152565b80518210156110335760209160051b010190565b604051906040820182811067ffffffffffffffff821117610fa55760405260078252662aa725a727aba760c91b6020830152565b3360009081527f4cd7f3876d8bd577ac885bd6a28644b234fdfca58e117f6db2ccfc80224a681660205260409020547f7d867aa9d791a9a4be418f90a2f248aa2c5f1348317792a6f6412f94df9819f79060ff16156111dc5750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b806000526000805160206114a883398151915260205260406000203360005260205260ff60406000205416156111dc5750565b3560ff81168103610f055790565b6001600160a01b031660008181527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d60205260408120549091906000805160206114a88339815191529060ff166112d6578280526020526040822081835260205260408220600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b505090565b6001600160a01b031660008181527fb16e88c42fd4e48df2dd6a2eabd6bc9aec654ec170056b470819f8892cc6431c60205260408120549091907fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775906000805160206114a88339815191529060ff16611397578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b50505090565b906000918083526000805160206114a883398151915280602052604084209260018060a01b03169283855260205260ff60408520541615600014611397578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b906000918083526000805160206114a883398151915280602052604084209260018060a01b03169283855260205260ff60408520541660001461139757818452602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a460019056fe02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800a264697066735822122011a8809dd911606e68b9a978ee2241f1c2ccad2f0e3a1bdf9b196db7f969e20164736f6c63430008180033",
  "devdoc": {
    "author": "Gildi Company",
    "custom:security-contact": "security@gildi.io",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "InvalidPairId()": [
        {
          "details": "Thrown when an invalid pair ID is provided"
        }
      ],
      "InvalidPrice()": [
        {
          "details": "Thrown when an invalid price (zero) is provided"
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "NotPriceFeeder()": [
        {
          "details": "Thrown when a non-price feeder attempts to set price data"
        }
      ],
      "PairNotFound()": [
        {
          "details": "Thrown when a pair is not found"
        }
      ],
      "PriceDataNotAvailable()": [
        {
          "details": "Thrown when price data is not available for a requested pair"
        }
      ],
      "StalePrice()": [
        {
          "details": "Thrown when a price is older than the requested maximum age"
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "PriceUpdated(bytes32,uint256,uint8,uint256)": {
        "params": {
          "decimals": "The number of decimals for the price",
          "pairId": "The pair ID",
          "price": "The updated price",
          "timestamp": "The timestamp when the price was updated"
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "deletePriceDataForPair(bytes32)": {
        "params": {
          "_pairId": "The pair ID"
        }
      },
      "getPairs()": {
        "returns": {
          "_0": "pairInfos An array of PairInfo structs"
        }
      },
      "getPrice(bytes32)": {
        "params": {
          "pairId": "The identifier of the asset pair"
        },
        "returns": {
          "priceData": "The price data for the asset pair"
        }
      },
      "getPriceNoOlderThan(bytes32,uint256)": {
        "params": {
          "age": "The maximum age of the price data in seconds",
          "pairId": "The identifier of the asset pair"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,address)": {
        "params": {
          "_contractAdmin": "The address of the contract admin",
          "_defaultAdmin": "The address of the default admin",
          "_oracle": "The address of the Gildi price oracle"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setPriceData((bytes32,uint256,uint8))": {
        "params": {
          "_priceUpdate": "The price data to set"
        }
      },
      "setPriceData((bytes32,uint256,uint8)[])": {
        "params": {
          "_priceUpdates": "Array of price updates"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "stateVariables": {
      "oracle": {
        "details": "Reference to the Gildi price oracle contract"
      },
      "pairIds": {
        "details": "Array of all pair IDs with price data"
      },
      "prices": {
        "details": "Mapping from pairId => PriceData"
      }
    },
    "title": "Gildi Price Provider",
    "version": 1
  },
  "userdoc": {
    "events": {
      "PriceUpdated(bytes32,uint256,uint8,uint256)": {
        "notice": "Emitted when a price is updated"
      }
    },
    "kind": "user",
    "methods": {
      "deletePriceDataForPair(bytes32)": {
        "notice": "Deletes the price data for a given pair"
      },
      "getPairs()": {
        "notice": "Retrieves all pairs with price data"
      },
      "getPrice(bytes32)": {
        "notice": "Retrieves the price data for a given pair ID"
      },
      "getPriceNoOlderThan(bytes32,uint256)": {
        "notice": "Retrieves the price data for a given pair ID, with a maximum age"
      },
      "initialize(address,address,address)": {
        "notice": "Initializes the contract and sets up roles"
      },
      "setPriceData((bytes32,uint256,uint8))": {
        "notice": "Sets the price data for a given pair"
      },
      "setPriceData((bytes32,uint256,uint8)[])": {
        "notice": "Sets the price data for multiple pairs in a single transaction"
      }
    },
    "notice": "Provides price data for asset pairs",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 51319,
        "contract": "contracts/oracles/price/providers/GildiPriceProvider.sol:GildiPriceProvider",
        "label": "prices",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(PriceData)23514_storage)"
      },
      {
        "astId": 51323,
        "contract": "contracts/oracles/price/providers/GildiPriceProvider.sol:GildiPriceProvider",
        "label": "pairIds",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 51327,
        "contract": "contracts/oracles/price/providers/GildiPriceProvider.sol:GildiPriceProvider",
        "label": "oracle",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IGildiPriceOracle)23500"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IGildiPriceOracle)23500": {
        "encoding": "inplace",
        "label": "contract IGildiPriceOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(PriceData)23514_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IGildiPriceResolver.PriceData)",
        "numberOfBytes": "32",
        "value": "t_struct(PriceData)23514_storage"
      },
      "t_struct(PriceData)23514_storage": {
        "encoding": "inplace",
        "label": "struct IGildiPriceResolver.PriceData",
        "members": [
          {
            "astId": 23507,
            "contract": "contracts/oracles/price/providers/GildiPriceProvider.sol:GildiPriceProvider",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23510,
            "contract": "contracts/oracles/price/providers/GildiPriceProvider.sol:GildiPriceProvider",
            "label": "decimals",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 23513,
            "contract": "contracts/oracles/price/providers/GildiPriceProvider.sol:GildiPriceProvider",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}