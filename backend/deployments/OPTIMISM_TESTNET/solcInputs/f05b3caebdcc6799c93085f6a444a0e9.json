{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {ERC165Upgradeable} from \"../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role => RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n     *\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\n     */\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\n        return INITIALIZABLE_STORAGE;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        bytes32 slot = _initializableStorageSlot();\n        assembly {\n            $.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\n    struct PausableStorage {\n        bool _paused;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Pausable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\n\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\n        assembly {\n            $.slot := PausableStorageLocation\n        }\n    }\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    function __Pausable_init() internal onlyInitializing {\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        PausableStorage storage $ = _getPausableStorage();\n        return $._paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\n    struct ReentrancyGuardStorage {\n        uint256 _status;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\n\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\n        assembly {\n            $.slot := ReentrancyGuardStorageLocation\n        }\n    }\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if ($._status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        $._status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        return $._status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\n\npragma solidity >=0.8.4;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[ERC].\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the zero address.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {IERC1155Receiver-onERC1155Received} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {IERC1155Receiver-onERC1155BatchReceived} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\nimport {Panic} from \"../Panic.sol\";\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Return the 512-bit addition of two uint256.\n     *\n     * The result is stored in two 256 variables such that sum = high * 2²⁵⁶ + low.\n     */\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\n        assembly (\"memory-safe\") {\n            low := add(a, b)\n            high := lt(low, a)\n        }\n    }\n\n    /**\n     * @dev Return the 512-bit multiplication of two uint256.\n     *\n     * The result is stored in two 256 variables such that product = high * 2²⁵⁶ + low.\n     */\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = high * 2²⁵⁶ + low.\n        assembly (\"memory-safe\") {\n            let mm := mulmod(a, b, not(0))\n            low := mul(a, b)\n            high := sub(sub(mm, low), lt(mm, low))\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a + b;\n            success = c >= a;\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a - b;\n            success = c <= a;\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a * b;\n            assembly (\"memory-safe\") {\n                // Only true when the multiplication doesn't overflow\n                // (c / a == b) || (a == 0)\n                success := or(eq(div(c, a), b), iszero(a))\n            }\n            // equivalent to: success ? c : 0\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            success = b > 0;\n            assembly (\"memory-safe\") {\n                // The `DIV` opcode returns zero when the denominator is 0.\n                result := div(a, b)\n            }\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            success = b > 0;\n            assembly (\"memory-safe\") {\n                // The `MOD` opcode returns zero when the denominator is 0.\n                result := mod(a, b)\n            }\n        }\n    }\n\n    /**\n     * @dev Unsigned saturating addition, bounds to `2²⁵⁶ - 1` instead of overflowing.\n     */\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        (bool success, uint256 result) = tryAdd(a, b);\n        return ternary(success, result, type(uint256).max);\n    }\n\n    /**\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\n     */\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        (, uint256 result) = trySub(a, b);\n        return result;\n    }\n\n    /**\n     * @dev Unsigned saturating multiplication, bounds to `2²⁵⁶ - 1` instead of overflowing.\n     */\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        (bool success, uint256 result) = tryMul(a, b);\n        return ternary(success, result, type(uint256).max);\n    }\n\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n\n        // The following calculation ensures accurate ceiling division without overflow.\n        // Since a is non-zero, (a - 1) / b will not overflow.\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\n        // when a = type(uint256).max and b = 1.\n        unchecked {\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\n        }\n    }\n\n    /**\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     *\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            (uint256 high, uint256 low) = mul512(x, y);\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (high == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return low / denominator;\n            }\n\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\n            if (denominator <= high) {\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [high low].\n            uint256 remainder;\n            assembly (\"memory-safe\") {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                high := sub(high, gt(remainder, low))\n                low := sub(low, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly (\"memory-safe\") {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [high low] by twos.\n                low := div(low, twos)\n\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from high into low.\n            low |= high * twos;\n\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and high\n            // is no longer required.\n            result = low * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\n    }\n\n    /**\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\n     */\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\n        unchecked {\n            (uint256 high, uint256 low) = mul512(x, y);\n            if (high >= 1 << n) {\n                Panic.panic(Panic.UNDER_OVERFLOW);\n            }\n            return (high << (256 - n)) | (low >> n);\n        }\n    }\n\n    /**\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\n     */\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\n    }\n\n    /**\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\n     *\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\n     *\n     * If the input value is not inversible, 0 is returned.\n     *\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\n     */\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\n        unchecked {\n            if (n == 0) return 0;\n\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\n            // ax + ny = 1\n            // ax = 1 + (-y)n\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\n\n            // If the remainder is 0 the gcd is n right away.\n            uint256 remainder = a % n;\n            uint256 gcd = n;\n\n            // Therefore the initial coefficients are:\n            // ax + ny = gcd(a, n) = n\n            // 0a + 1n = n\n            int256 x = 0;\n            int256 y = 1;\n\n            while (remainder != 0) {\n                uint256 quotient = gcd / remainder;\n\n                (gcd, remainder) = (\n                    // The old remainder is the next gcd to try.\n                    remainder,\n                    // Compute the next remainder.\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\n                    // where gcd is at most n (capped to type(uint256).max)\n                    gcd - remainder * quotient\n                );\n\n                (x, y) = (\n                    // Increment the coefficient of a.\n                    y,\n                    // Decrement the coefficient of n.\n                    // Can overflow, but the result is casted to uint256 so that the\n                    // next value of y is \"wrapped around\" to a value between 0 and n - 1.\n                    x - y * int256(quotient)\n                );\n            }\n\n            if (gcd != 1) return 0; // No inverse exists.\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\n        }\n    }\n\n    /**\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\n     *\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\n     *\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\n     */\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\n        unchecked {\n            return Math.modExp(a, p - 2, p);\n        }\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\n     *\n     * Requirements:\n     * - modulus can't be zero\n     * - underlying staticcall to precompile must succeed\n     *\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\n     * interpreted as 0.\n     */\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\n        (bool success, uint256 result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\n     * to operate modulo 0 or if the underlying precompile reverted.\n     *\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\n     * of a revert, but the result may be incorrectly interpreted as 0.\n     */\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\n        if (m == 0) return (false, 0);\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            // | Offset    | Content    | Content (Hex)                                                      |\n            // |-----------|------------|--------------------------------------------------------------------|\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\n            mstore(ptr, 0x20)\n            mstore(add(ptr, 0x20), 0x20)\n            mstore(add(ptr, 0x40), 0x20)\n            mstore(add(ptr, 0x60), b)\n            mstore(add(ptr, 0x80), e)\n            mstore(add(ptr, 0xa0), m)\n\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\n            // so we can use the memory scratch space located at offset 0.\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\n            result := mload(0x00)\n        }\n    }\n\n    /**\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\n     */\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\n        (bool success, bytes memory result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\n     */\n    function tryModExp(\n        bytes memory b,\n        bytes memory e,\n        bytes memory m\n    ) internal view returns (bool success, bytes memory result) {\n        if (_zeroBytes(m)) return (false, new bytes(0));\n\n        uint256 mLen = m.length;\n\n        // Encode call args in result and move the free memory pointer\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\n\n        assembly (\"memory-safe\") {\n            let dataPtr := add(result, 0x20)\n            // Write result on top of args to avoid allocating extra memory.\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\n            // Overwrite the length.\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\n            mstore(result, mLen)\n            // Set the memory pointer after the returned data.\n            mstore(0x40, add(dataPtr, mLen))\n        }\n    }\n\n    /**\n     * @dev Returns whether the provided byte array is zero.\n     */\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\n        for (uint256 i = 0; i < byteArray.length; ++i) {\n            if (byteArray[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\n     * using integer operations.\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        unchecked {\n            // Take care of easy edge cases when a == 0 or a == 1\n            if (a <= 1) {\n                return a;\n            }\n\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\n            //\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\n            // bigger than any uint256.\n            //\n            // By noticing that\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\n            // to the msb function.\n            uint256 aa = a;\n            uint256 xn = 1;\n\n            if (aa >= (1 << 128)) {\n                aa >>= 128;\n                xn <<= 64;\n            }\n            if (aa >= (1 << 64)) {\n                aa >>= 64;\n                xn <<= 32;\n            }\n            if (aa >= (1 << 32)) {\n                aa >>= 32;\n                xn <<= 16;\n            }\n            if (aa >= (1 << 16)) {\n                aa >>= 16;\n                xn <<= 8;\n            }\n            if (aa >= (1 << 8)) {\n                aa >>= 8;\n                xn <<= 4;\n            }\n            if (aa >= (1 << 4)) {\n                aa >>= 4;\n                xn <<= 2;\n            }\n            if (aa >= (1 << 2)) {\n                xn <<= 1;\n            }\n\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\n            //\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\n            // This is going to be our x_0 (and ε_0)\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\n\n            // From here, Newton's method give us:\n            // x_{n+1} = (x_n + a / x_n) / 2\n            //\n            // One should note that:\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\n            //              = ((x_n² + a) / (2 * x_n))² - a\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\n            //              = (x_n² - a)² / (2 * x_n)²\n            //              = ((x_n² - a) / (2 * x_n))²\n            //              ≥ 0\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\n            //\n            // This gives us the proof of quadratic convergence of the sequence:\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\n            //         = | ε_n² / (2 * x_n) |\n            //         = ε_n² / | (2 * x_n) |\n            //\n            // For the first iteration, we have a special case where x_0 is known:\n            // ε_1 = ε_0² / | (2 * x_0) |\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\n            //     ≤ 2**(e-3) / 3\n            //     ≤ 2**(e-3-log2(3))\n            //     ≤ 2**(e-4.5)\n            //\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\n            //         ≤ 2**(2*e-2*k) / 2**e\n            //         ≤ 2**(e-2*k)\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\n\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\n            // sqrt(a) or sqrt(a) + 1.\n            return xn - SafeCast.toUint(xn > a / xn);\n        }\n    }\n\n    /**\n     * @dev Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 x) internal pure returns (uint256 r) {\n        // If value has upper 128 bits set, log2 result is at least 128\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\n        // If upper 64 bits of 128-bit half set, add 64 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\n        // If upper 32 bits of 64-bit half set, add 32 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\n        // If upper 16 bits of 32-bit half set, add 16 to result\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\n        // If upper 8 bits of 16-bit half set, add 8 to result\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\n        // If upper 4 bits of 8-bit half set, add 4 to result\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\n\n        // Shifts value right by the current result and use it as an index into this lookup table:\n        //\n        // | x (4 bits) |  index  | table[index] = MSB position |\n        // |------------|---------|-----------------------------|\n        // |    0000    |    0    |        table[0] = 0         |\n        // |    0001    |    1    |        table[1] = 0         |\n        // |    0010    |    2    |        table[2] = 1         |\n        // |    0011    |    3    |        table[3] = 1         |\n        // |    0100    |    4    |        table[4] = 2         |\n        // |    0101    |    5    |        table[5] = 2         |\n        // |    0110    |    6    |        table[6] = 2         |\n        // |    0111    |    7    |        table[7] = 2         |\n        // |    1000    |    8    |        table[8] = 3         |\n        // |    1001    |    9    |        table[9] = 3         |\n        // |    1010    |   10    |        table[10] = 3        |\n        // |    1011    |   11    |        table[11] = 3        |\n        // |    1100    |   12    |        table[12] = 3        |\n        // |    1101    |   13    |        table[13] = 3        |\n        // |    1110    |   14    |        table[14] = 3        |\n        // |    1111    |   15    |        table[15] = 3        |\n        //\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\n        assembly (\"memory-safe\") {\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 x) internal pure returns (uint256 r) {\n        // If value has upper 128 bits set, log2 result is at least 128\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\n        // If upper 64 bits of 128-bit half set, add 64 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\n        // If upper 32 bits of 64-bit half set, add 32 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\n        // If upper 16 bits of 32-bit half set, add 16 to result\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n\n    /**\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\n     */\n    function toUint(bool b) internal pure returns (uint256 u) {\n        assembly (\"memory-safe\") {\n            u := iszero(iszero(b))\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Panic.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Helper library for emitting standardized panic codes.\n *\n * ```solidity\n * contract Example {\n *      using Panic for uint256;\n *\n *      // Use any of the declared internal constants\n *      function foo() { Panic.GENERIC.panic(); }\n *\n *      // Alternatively\n *      function foo() { Panic.panic(Panic.GENERIC); }\n * }\n * ```\n *\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\n *\n * _Available since v5.1._\n */\n// slither-disable-next-line unused-state\nlibrary Panic {\n    /// @dev generic / unspecified error\n    uint256 internal constant GENERIC = 0x00;\n    /// @dev used by the assert() builtin\n    uint256 internal constant ASSERT = 0x01;\n    /// @dev arithmetic underflow or overflow\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\n    /// @dev division or modulo by zero\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\n    /// @dev enum conversion error\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\n    /// @dev invalid encoding in storage\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\n    /// @dev empty array pop\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\n    /// @dev array out of bounds access\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\n    /// @dev resource error (too large allocation or too large array)\n    uint256 internal constant RESOURCE_ERROR = 0x41;\n    /// @dev calling invalid internal function\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\n\n    /// @dev Reverts with a panic code. Recommended to use with\n    /// the internal constants with predefined codes.\n    function panic(uint256 code) internal pure {\n        assembly (\"memory-safe\") {\n            mstore(0x00, 0x4e487b71)\n            mstore(0x20, code)\n            revert(0x1c, 0x24)\n        }\n    }\n}\n"
    },
    "contracts/interfaces/manager/IGildiManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\n\n/// @title IGildiManager\n/// @notice Interface for the Gildi Manager.\n/// @custom:security-contact security@gildi.io\n/// @author Patrick Fischer (Pathin) > https://pathin.me\ninterface IGildiManager is IERC165 {\n    /// @notice A user share.\n    struct UserShare {\n        /// @notice The user address.\n        address user;\n        /// @notice The number shares owned by the user.\n        uint256 shares;\n    }\n\n    /// @notice A report of the shares owned by a user in a specific time period.\n    struct SharesReport {\n        /// @notice The token ID.\n        uint256 tokenId;\n        /// @notice The start timestamp of the report.\n        uint256 start;\n        /// @notice The end timestamp of the report.\n        uint256 end;\n        /// @notice The total number of shares owned by all users.\n        uint256 totalNumberOfShares;\n        /// @notice The shares owned by each user.\n        UserShare[] userShares;\n        /// @notice Info for Pagination, if there are more results.\n        bool hasMore;\n        /// @notice Next cursor for Pagination.\n        uint256 nextCursor;\n    }\n\n    struct TokenBalance {\n        uint256 tokenId;\n        uint256 amount;\n        uint256 lockedAmount;\n    }\n\n    /// @notice A GILDI RWA release.\n    struct RWARelease {\n        /// @notice The token ID of the release (equal to release id).\n        uint256 tokenId;\n        /// @notice If the release is locked.\n        bool locked;\n        /// @notice When the release was unlocked.\n        uint256 unlockedAt;\n        /// @notice If the release is in the initial sale.\n        bool inInitialSale;\n        /// @notice The total number of shares.\n        uint256 totalShares;\n        /// @notice The number of unassigned shares.\n        uint256 unassignedShares;\n        /// @notice The number of burned shares.\n        uint256 burnedShares;\n        /// @notice The release is deleting.\n        bool deleting;\n        /// @notice The number of shares deleted.\n        uint256 deletedShares;\n        /// @notice The timestamp of the creation.\n        uint256 createdAt;\n    }\n\n    /// @notice Fetches all the release IDs.\n    /// @return An array of all the release IDs.\n    function getAllReleaseIds() external view returns (uint256[] memory);\n\n    /// @notice Create a new release.\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\n    /// @param _amount The amount of the token.\n    /// @param _ownershipTrackingTimePeriod The time period in which we aggregate the shares owned by a user.\n    function createNewRelease(uint256 _releaseId, uint256 _amount, uint256 _ownershipTrackingTimePeriod) external;\n\n    /// @notice Assigns the user shares to a royalty rights release in a batch operation.\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\n    /// @param _sharesBatch The shares to assign.\n    /// @dev The shares are assigned in a batch to prevent gas limit issues.\n    function assignShares(uint256 _releaseId, UserShare[] calldata _sharesBatch) external;\n\n    /// @notice Starts the initial sale of a release.\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\n    function startInitialSale(uint256 _releaseId) external;\n\n    /// @notice Cancels the initial sale of a release.\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\n    function cancelInitialSale(uint256 _releaseId) external;\n\n    /// @notice Ends the initial sale of a release.\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\n    function endInitialSale(uint256 _releaseId) external;\n\n    /// @notice Check if a release exists.\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\n    /// @return True if the release exists, false otherwise.\n    function releaseExists(uint256 _releaseId) external view returns (bool);\n\n    /// @notice Deletes a release in batches.\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\n    /// @param _batchSizeOwners The number of owners to delete in a batch.\n    /// @dev Batch deletion is used to prevent gas limit issues.\n    function batchDeleteRelease(uint256 _releaseId, uint256 _batchSizeOwners) external;\n\n    /// @notice Unlocks a release.\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\n    function unlockRelease(uint256 _releaseId) external;\n\n    /// @notice Deposits royalty rights tokens into the manager.\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\n    /// @param _account The account to deposit the tokens to.\n    /// @param _amount The amount of tokens to deposit.\n    function deposit(uint256 _tokenId, address _account, uint256 _amount) external;\n\n    /// @notice Withdraws royalty rights tokens from the manager.\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\n    /// @param _account The account to withdraw the tokens from.\n    /// @param _amount The amount of tokens to withdraw.\n    function withdraw(uint256 _tokenId, address _account, uint256 _amount) external;\n\n    /// @notice Locks tokens for a user.\n    /// @param _account The account to lock the tokens for.\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\n    /// @param _amountToLock The amount of tokens to lock.\n    function lockTokens(address _account, uint256 _tokenId, uint256 _amountToLock) external;\n\n    /// @notice Unlocks tokens for a user.\n    /// @param _account The account to unlock the tokens for.\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\n    /// @param _amountToUnlock The amount of tokens to unlock.\n    function unlockTokens(address _account, uint256 _tokenId, uint256 _amountToUnlock) external;\n\n    /// @notice Transfers ownership of a release's shares to another user.\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\n    /// @param _from The address of the current owner.\n    /// @param _to The address of the new owner.\n    /// @param _amount The amount of shares to transfer.\n    function transferOwnership(uint256 _tokenId, address _from, address _to, uint256 _amount) external;\n\n    /// @notice Transfers ownership of a release's shares to another user during the initial sale.\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\n    /// @param _from The address of the current owner.\n    /// @param _to The address of the new owner.\n    /// @param _amount The amount of shares to transfer.\n    function transferOwnershipInitialSale(uint256 _tokenId, address _from, address _to, uint256 _amount) external;\n\n    /// @notice Gets a release by its ID.\n    /// @param _releaseId The release ID.\n    /// @return The release.\n    function getReleaseById(uint256 _releaseId) external view returns (RWARelease memory);\n\n    /// @notice Checks if the release is locked.\n    /// @param _releaseId The release ID.\n    /// @return True if the release is locked, false otherwise.\n    function isLocked(uint256 _releaseId) external view returns (bool);\n\n    /// @notice Returns if the release is in the initial sale.\n    /// @param _releaseId The release ID.\n    /// @return True if the release is in the initial sale, false otherwise.\n    function isInInitialSale(uint256 _releaseId) external view returns (bool);\n\n    /// @notice Fetches the available balance of a user for a specific token.\n    /// @param _tokenId The token ID.\n    /// @param _account The account to fetch the balance for.\n    /// @return The available balance of the user for the token.\n    function getAvailableBalance(uint256 _tokenId, address _account) external view returns (uint256);\n\n    /// @notice Fetch the shares of a release owned by a user in a specific time period paginated.\n    /// @param _releaseId The release ID.\n    /// @param _start The start timestamp.\n    /// @param _end The end timestamp (exclusive).\n    /// @param _cursor The cursor for pagination.\n    /// @param _limit The limit for pagination.\n    function fetchSharesInPeriod(\n        uint256 _releaseId,\n        uint256 _start,\n        uint256 _end,\n        uint256 _cursor,\n        uint256 _limit\n    ) external view returns (SharesReport memory);\n\n    /// @notice Fetches the balance of a user for all tokens.\n    /// @param _account The account to fetch the balance for.\n    function balanceOf(address _account) external view returns (TokenBalance[] memory);\n\n    /// @notice Fetches the balance of a user for a specific token.\n    /// @param _tokenId The token ID.\n    /// @param _account The account to fetch the balance for.\n    function balanceOf(uint256 _tokenId, address _account) external view returns (TokenBalance memory);\n\n    /// @notice Checks if the release is fully assigned.\n    function isFullyAssigned(uint256 _releaseId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/marketplace/exchange/IGildiExchange.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport {IAccessControl} from '@openzeppelin/contracts/access/IAccessControl.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport {IGildiManager} from '../../manager/IGildiManager.sol';\nimport {IGildiPriceOracle} from '../../oracles/price/IGildiPriceOracle.sol';\nimport {IGildiExchangeOrderBook} from './IGildiExchangeOrderBook.sol';\nimport {IGildiExchangeFundManager} from './IGildiExchangeFundManager.sol';\nimport {IGildiExchangePaymentProcessor} from './IGildiExchangePaymentProcessor.sol';\nimport {IGildiExchangePaymentAggregator} from './IGildiExchangePaymentAggregator.sol';\n\n/// @title IGildiExchange\n/// @notice Interface for the Gildi Exchange.\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\ninterface IGildiExchange is IAccessControl {\n    /// @notice Represents a fee/burn receiver with an address and a basis points value and the currency to receive in.\n    struct Receiver {\n        /// @dev The address that receives the fee\n        address receiverAddress;\n        /// @dev The currency in which the fee is paid\n        address payoutCurrency;\n        /// @dev The value in basis points\n        uint16 value;\n    }\n\n    /// @notice Represents a top-level fee distribution with an address and optional sub-fee receivers.\n    struct FeeDistribution {\n        /// @dev The primary fee receiver\n        Receiver feeReceiver;\n        /// @dev Used to distribute a portion of the parent fee, e.g., burn a fraction\n        Receiver[] subFeeReceivers;\n    }\n\n    /// @notice Application environment settings\n    struct AppEnvironment {\n        /// @dev Application settings including dependencies\n        AppSettings settings;\n        /// @dev The basis points denominator for percentage calculations\n        uint16 basisPoints;\n        /// @dev The admin role identifier\n        bytes32 adminRole;\n        /// @dev The marketplace manager role identifier\n        bytes32 marketplaceManagerRole;\n        /// @dev The claimer role identifier\n        bytes32 claimerRole;\n    }\n\n    /// @notice Application settings\n    struct AppSettings {\n        /// @dev The number of decimals for price asking\n        uint8 priceAskDecimals;\n        /// @dev The fee distribution structure\n        FeeDistribution[] fees;\n        /// @dev The marketplace currency\n        IERC20 marketplaceCurrency;\n        /// @dev The maximum number of buys per transaction\n        uint256 maxBuyPerTransaction;\n        /// @dev The Gildi manager interface\n        IGildiManager gildiManager;\n        /// @dev The order book interface\n        IGildiExchangeOrderBook orderBook;\n        /// @dev The price oracle interface\n        IGildiPriceOracle gildiPriceOracle;\n        /// @dev The fund manager interface\n        IGildiExchangeFundManager fundManager;\n        /// @dev The payment processor interface\n        IGildiExchangePaymentProcessor paymentProcessor;\n        /// @dev The payment aggregator interface\n        IGildiExchangePaymentAggregator paymentAggregator;\n    }\n\n    /// @notice Purchases tokens of a release\n    /// @dev Sweeps the floor\n    /// @param _releaseId The ID of the release\n    /// @param _amount The amount of tokens to purchase\n    /// @param _maxTotalPrice The maximum total price to spend in Marketplace Currency\n    /// @param _beneficiary The address to send the tokens to\n    /// @param _isProxyOperation Whether the operation is a proxy operation\n    /// @return amountSpent The amount of Marketplace Currency spent\n    /// @return amountUsdSpent The amount spent in USD\n    function purchase(\n        uint256 _releaseId,\n        uint256 _amount,\n        uint256 _maxTotalPrice,\n        address _beneficiary,\n        bool _isProxyOperation\n    ) external returns (uint256 amountSpent, uint256 amountUsdSpent);\n\n    /// @notice Transfer a token in the context of the Gildi Exchange\n    /// @param _from The address to transfer from\n    /// @param _to The address to transfer to\n    /// @param _value The amount to transfer\n    /// @param _amountCurrency The currency of the amount\n    function transferTokenInContext(address _from, address _to, uint256 _value, address _amountCurrency) external;\n\n    /// @notice Tries to burn a token in the context of the Gildi Exchange\n    /// @param _from The address to burn from\n    /// @param _value The amount to burn\n    /// @param _amountCurrency The currency of the amount\n    /// @return Whether the burn was successful\n    function tryBurnTokenInContext(address _from, uint256 _value, address _amountCurrency) external returns (bool);\n\n    /// @notice Gets the price needed to pay in marketplace currency to buy `_amountToBuy` units of `_releaseId`.\n    /// @param _releaseId The ID of the release\n    /// @param _amountToBuy The amount of tokens to buy\n    /// @param _buyer The address of the buyer (optional)\n    /// @return totalPriceInCurrency The total cost in marketplace currency\n    /// @return asset The asset the price is in\n    /// @return totalPriceUsd The total price in USD (using exchange's priceAskDecimals)\n    function quotePricePreview(\n        uint256 _releaseId,\n        uint256 _amountToBuy,\n        address _buyer\n    ) external view returns (uint256 totalPriceInCurrency, address asset, uint256 totalPriceUsd);\n\n    /// @notice Checks if a release is currently in its initial sale period\n    /// @param _releaseId The ID of the release\n    /// @return True if the release is in active initial sale, false otherwise\n    function isInInitialSale(uint256 _releaseId) external view returns (bool);\n\n    /// @notice Returns the app environment.\n    /// @return appEnvironment The app environment\n    function getAppEnvironment() external view returns (AppEnvironment memory);\n\n    /// @notice Gets the active marketplace asset for a release\n    /// @param _releaseId The ID of the release\n    /// @return The address of the active marketplace asset for the release\n    function getActiveMarketplaceReleaseAsset(uint256 _releaseId) external view returns (address);\n\n    /// @notice Get the fees of a specific release\n    /// @param _releaseId The ID of the release\n    /// @return An array of fee distributions for the release\n    function getReleaseFees(uint256 _releaseId) external view returns (FeeDistribution[] memory);\n\n    /// @notice Get a list of release IDs\n    /// @param _activeOnly Whether or not to only return active releases\n    /// @return activeReleases An array of release IDs\n    function getReleaseIds(bool _activeOnly) external view returns (uint256[] memory);\n\n    /// @notice Creates a listing with default slippage\n    /// @param _releaseId The ID of the release\n    /// @param _seller The address of the seller\n    /// @param _pricePerItem The price per item in USD\n    /// @param _quantity The quantity being listed\n    /// @param _fundsReceiver The address to receive funds from the sale (if address(0), defaults to seller)\n    /// @param _payoutCurrency The currency the seller wants to receive payment in\n    function createListing(\n        uint256 _releaseId,\n        address _seller,\n        uint256 _pricePerItem,\n        uint256 _quantity,\n        address _payoutCurrency,\n        address _fundsReceiver\n    ) external;\n\n    /// @notice Creates a listing with custom slippage\n    /// @param _releaseId The ID of the release\n    /// @param _seller The address of the seller\n    /// @param _pricePerItem The price per item in USD\n    /// @param _quantity The quantity being listed\n    /// @param _payoutCurrency The currency the seller wants to receive payment in\n    /// @param _fundsReceiver The address to receive funds from the sale (if address(0), defaults to seller)\n    /// @param _slippageBps Slippage tolerance in basis points\n    function createListing(\n        uint256 _releaseId,\n        address _seller,\n        uint256 _pricePerItem,\n        uint256 _quantity,\n        address _payoutCurrency,\n        address _fundsReceiver,\n        uint16 _slippageBps\n    ) external;\n\n    /// @notice Modifies a listing with default slippage\n    /// @param _listingId The ID of the listing to modify\n    /// @param _newPricePerItem The new price per item in USD\n    /// @param _newQuantity The new quantity (if 0, the listing will be removed)\n    /// @param _payoutCurrency The new payout currency\n    /// @param _fundsReceiver The address to receive funds from the sale (if address(0), defaults to seller)\n    function modifyListing(\n        uint256 _listingId,\n        uint256 _newPricePerItem,\n        uint256 _newQuantity,\n        address _payoutCurrency,\n        address _fundsReceiver\n    ) external;\n\n    /// @notice Modifies a listing with custom slippage\n    /// @param _listingId The ID of the listing to modify\n    /// @param _newPricePerItem The new price per item in USD\n    /// @param _newQuantity The new quantity (if 0, the listing will be removed)\n    /// @param _payoutCurrency The new payout currency\n    /// @param _fundsReceiver The address to receive funds from the sale (if address(0), defaults to seller)\n    /// @param _slippageBps Slippage tolerance in basis points\n    function modifyListing(\n        uint256 _listingId,\n        uint256 _newPricePerItem,\n        uint256 _newQuantity,\n        address _payoutCurrency,\n        address _fundsReceiver,\n        uint16 _slippageBps\n    ) external;\n\n    /// @notice Cancels a listing by ID\n    /// @param _listingId The ID of the listing to cancel\n    function cancelListing(uint256 _listingId) external;\n}\n"
    },
    "contracts/interfaces/marketplace/exchange/IGildiExchangeFundManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\n/// @title Gildi Exchange Fund Manager Interface\n/// @notice Interface for the Gildi Exchange Fund Manager contract.\n/// @custom:security-contact security@gildi.io\n/// @author Patrick Fischer (Pathin) > https://pathin.me\ninterface IGildiExchangeFundManager {\n    // ========== Structs ==========\n\n    /// @notice Represents an fund entry storing the buyer, operator, fundParticipant, and value in Marketplace Currency.\n    struct Fund {\n        /// @dev Entity receiving the tokens (beneficiary)\n        address buyer;\n        /// @dev Entity that executed the transaction\n        address operator;\n        /// @dev Entity with funds in fund (seller or fee recipient)\n        address fundParticipant;\n        /// @dev Whether this was executed through a proxy\n        bool isProxyOperation;\n        /// @dev Amount in Marketplace Currency\n        FundAmount amount;\n        /// @dev Payout currency\n        address payoutCurrency;\n    }\n\n    /// @notice Represents an amount of tokens in a specific currency\n    struct FundAmount {\n        /// @dev The amount of tokens\n        uint256 value;\n        /// @dev The address of the currency token\n        address currencyAddress;\n    }\n\n    // ========== View Functions ==========\n\n    /// @notice Checks if a release has any funds\n    /// @param _releaseId The ID of the release\n    /// @return True if the release has funds, false otherwise\n    function releaseHasFunds(uint256 _releaseId) external view returns (bool);\n\n    // ========== Non-View Functions ==========\n\n    /// @notice Adds funds to fund for a participant\n    /// @param _releaseId The ID of the release\n    /// @param _participant The address of the fund participant\n    /// @param _buyer The address of the buyer\n    /// @param _operator The address of the operator\n    /// @param _isProxyOperation Whether this is a proxy operation\n    /// @param _amount The amount to add to fund\n    /// @param _amountCurrency The currency of the fund amount\n    /// @param _payoutCurrency The currency to payout in\n    function handleAddToFund(\n        uint256 _releaseId,\n        address _participant,\n        address _buyer,\n        address _operator,\n        bool _isProxyOperation,\n        uint256 _amount,\n        address _amountCurrency,\n        address _payoutCurrency\n    ) external;\n\n    /// @notice Cancels funds for a release in batches\n    /// @param _releaseId The ID of the release\n    /// @param _batchSize The number of funds to process in this batch\n    /// @return processed The number of funds processed\n    function handleCancelReleaseFunds(uint256 _releaseId, uint256 _batchSize) external returns (uint256 processed);\n\n    /// @notice Claims funds for a participant of a release with custom slippage\n    /// @param _releaseId The ID of the release\n    /// @param _fundParticipant The address of the fund participant\n    /// @param _slippageBps Slippage tolerance in basis points (100 = 1%, 500 = 5%)\n    function claimFunds(uint256 _releaseId, address _fundParticipant, uint16 _slippageBps) external;\n\n    /// @notice Claims funds for a participant of a release with default slippage (5%)\n    /// @param _releaseId The ID of the release\n    /// @param _fundParticipant The address of the fund participant\n    function claimFunds(uint256 _releaseId, address _fundParticipant) external;\n\n    /// @notice Claims all funds for a participant across all releases with custom slippage\n    /// @param _fundParticipant The address of the fund participant\n    /// @param _slippageBps Slippage tolerance in basis points (100 = 1%, 500 = 5%)\n    function claimAllFunds(address _fundParticipant, uint16 _slippageBps) external;\n\n    /// @notice Claims all funds for a participant across all releases with default slippage (5%)\n    /// @param _fundParticipant The address of the fund participant\n    function claimAllFunds(address _fundParticipant) external;\n}\n"
    },
    "contracts/interfaces/marketplace/exchange/IGildiExchangeOrderBook.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\n/// @title IGildiExchangeOrderBook\n/// @notice Interface for the Gildi Exchange Order Book, which manages listings and provides order book functionality for the marketplace.\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\ninterface IGildiExchangeOrderBook {\n    /// @notice Represents a listing in the order book for a specific token release.\n    struct Listing {\n        /// @dev A unique identifier for the listing.\n        uint256 id;\n        /// @dev The ID of the token release being listed.\n        uint256 releaseId;\n        /// @dev The address of the seller who created the listing.\n        address seller;\n        /// @dev The price per item in USD.\n        uint256 pricePerItem;\n        /// @dev The currency in which the seller wants to receive payment (if different from the active release marketplace currency, a swap will be performed).\n        address payoutCurrency;\n        /// @dev The quantity of tokens being listed.\n        uint256 quantity;\n        /// @dev Slippage protection in basis points (100 = 1%, 500 = 5%), 0 means no slippage allowed.\n        uint16 slippageBps;\n        /// @dev The block timestamp when the listing was created (UNIX timestamp).\n        uint256 createdAt;\n        /// @dev The block timestamp when the listing was last modified (UNIX timestamp).\n        uint256 modifiedAt;\n        /// @dev The ID of the next listing in the linked list (ordered by price).\n        uint256 nextListingId;\n        /// @dev The ID of the previous listing in the linked list (ordered by price).\n        uint256 prevListingId;\n        /// @dev Optional address to receive funds from the sale.\n        address fundsReceiver; // If address(0), defaults to seller\n    }\n\n    /// @notice Contains preview information for a potential purchase.\n    struct PurchasePreview {\n        /// @dev The total quantity available for purchase.\n        uint256 totalQuantityAvailable;\n        /// @dev The total price in marketplace currency.\n        uint256 totalPriceInCurrency;\n        /// @dev The address of the currency used for the purchase.\n        address currency;\n        /// @dev The total price in USD (using exchange's priceAskDecimals).\n        uint256 totalPriceUsd;\n    }\n\n    // ========== View Functions ==========\n\n    /// @notice Gets a listing by ID\n    /// @param _listingId The listing ID\n    /// @return The listing\n    function getListing(uint256 _listingId) external view returns (Listing memory);\n\n    /// @notice Gets all the listings of a specific seller\n    /// @param _seller The address of the seller\n    /// @return An array of listings for the seller\n    function getListingsOfSeller(address _seller) external view returns (Listing[] memory);\n\n    /// @notice Gets all the listings of a specific release, ordered by price\n    /// @param _releaseId The ID of the release\n    /// @param _cursor The cursor to start from\n    /// @param _limit The limit of listings to return\n    /// @return orderedListings An array of listings for the release\n    /// @return cursor The cursor to continue from\n    function getOrderedListings(\n        uint256 _releaseId,\n        uint256 _cursor,\n        uint256 _limit\n    ) external view returns (Listing[] memory orderedListings, uint256 cursor);\n\n    /// @notice Gets the available buy quantity for a user\n    /// @param _releaseId The release ID\n    /// @param _user The user address\n    /// @return The available quantity to buy\n    function getAvailableBuyQuantity(uint256 _releaseId, address _user) external view returns (uint256);\n\n    /// @notice Preview a purchase\n    /// @param _releaseId The ID of the release to purchase\n    /// @param _buyer The address of the buyer\n    /// @param _amountToBuy The amount of tokens to buy\n    /// @return Preview information for the purchase\n    function previewPurchase(\n        uint256 _releaseId,\n        address _buyer,\n        uint256 _amountToBuy\n    ) external view returns (PurchasePreview memory);\n\n    /// @notice Gets the first listing ID (with lowest price) for a specific release\n    /// @param _releaseId The ID of the release\n    /// @return The ID of the listing with the lowest price for this release\n    function getHeadListingId(uint256 _releaseId) external view returns (uint256);\n\n    /// @notice Gets the next listing ID in the price-ordered linked list\n    /// @param _listingId The current listing ID\n    /// @return The ID of the next listing with a higher price, or 0 if none exists\n    function getNextListingId(uint256 _listingId) external view returns (uint256);\n\n    /// @notice Gets the total quantity listed for a specific release\n    /// @param _releaseId The ID of the release\n    /// @return The total quantity listed\n    function listedQuantities(uint256 _releaseId) external view returns (uint256);\n\n    // ========== Non-View Functions ==========\n\n    /// @notice Creates a listing\n    /// @param _releaseId The ID of the release\n    /// @param _seller The address of the seller\n    /// @param _pricePerItem The price per item\n    /// @param _quantity The quantity being listed\n    /// @param _payoutCurrency The payout currency of the listing\n    /// @param _slippageBps Optional slippage protection in basis points (100 = 1%, 500 = 5%)\n    /// @dev Takes the slippage setting literally, 0 = no slippage, 10000 = 100%, does not make assumptions about the default, caller must know what they are doing\n    function handleCreateListing(\n        uint256 _releaseId,\n        address _seller,\n        uint256 _pricePerItem,\n        uint256 _quantity,\n        address _payoutCurrency,\n        address _fundsReceiver,\n        uint16 _slippageBps\n    ) external;\n\n    /// @notice Modifies an existing listing's price, quantity, and slippage settings\n    /// @param _listingId The ID of the listing to modify\n    /// @param _pricePerItem The new price per item\n    /// @param _quantity The new quantity (if 0, the listing will be removed)\n    /// @param _payoutCurrency The new payout currency\n    /// @param _slippageBps Slippage protection in basis points (100 = 1%, 500 = 5%)\n    /// @dev Takes the slippage setting literally, 0 = no slippage, 10000 = 100%, does not make assumptions about the default, caller must know what they are doing\n    function handleModifyListing(\n        uint256 _listingId,\n        uint256 _pricePerItem,\n        uint256 _quantity,\n        address _payoutCurrency,\n        address _fundsReceiver,\n        uint16 _slippageBps\n    ) external;\n\n    /// @notice Removes a listing\n    /// @param _listingId The ID of the listing to cancel\n    function handleRemoveListing(uint256 _listingId) external;\n\n    /// @notice Decreases a listing's quantity after a purchase\n    /// @param _listingId The ID of the listing\n    /// @param _quantityToBuy The amount to reduce from the listing's quantity (if this reduces quantity to 0, the listing will be removed)\n    function handleDecreaseListingQuantity(uint256 _listingId, uint256 _quantityToBuy) external;\n\n    /// @notice Unlists all listings of a release in batches.\n    /// @param _releaseId The ID of the release\n    /// @param _batchSize The batch size\n    /// @return processedListings The number of listings processed\n    function handleUnlistReleaseListings(\n        uint256 _releaseId,\n        uint256 _batchSize\n    ) external returns (uint256 processedListings);\n}\n"
    },
    "contracts/interfaces/marketplace/exchange/IGildiExchangePaymentAggregator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport './IGildiExchangeSwapAdapter.sol';\nimport './IGildiExchange.sol';\n\n/// @title IGildiExchangePaymentAggregator\n/// @notice Interface for marketplace payment operations including swap functionality\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\ninterface IGildiExchangePaymentAggregator {\n    /// @notice Executes a swap out operation to convert source tokens to a target token.\n    /// @param _amount The amount of source tokens to swap.\n    /// @param _sourceCurrency The address of the source token.\n    /// @param _targetToken The token to swap to.\n    /// @param _minTargetAmount The minimum amount of target tokens to receive (slippage protection).\n    /// @param _recipient The recipient of the target tokens.\n    /// @return targetReceived The amount of target tokens received.\n    function swapOut(\n        uint256 _amount,\n        address _sourceCurrency,\n        address _targetToken,\n        uint256 _minTargetAmount,\n        address _recipient\n    ) external returns (uint256 targetReceived);\n\n    /// @notice Previews a swap out operation to check if there's a valid route and estimate the output amount.\n    /// @param _amount The amount of source tokens to swap.\n    /// @param _sourceCurrency The address of the source token.\n    /// @param _targetToken The token to swap to.\n    /// @return hasValidRoute Whether there's a valid route for the swap.\n    /// @return expectedTargetAmount The expected amount of target tokens to receive.\n    /// @return bestRoute The best route for the swap.\n    function previewSwapOut(\n        uint256 _amount,\n        address _sourceCurrency,\n        address _targetToken\n    )\n        external\n        view\n        returns (\n            bool hasValidRoute,\n            uint256 expectedTargetAmount,\n            IGildiExchangeSwapAdapter.QuoteRoute memory bestRoute\n        );\n\n    /// @notice Executes the purchase payment flow.\n    /// @param _releaseId The release ID.\n    /// @param _amount The amount to purchase.\n    /// @param _sourceToken The token used for payment (address(0) means native).\n    /// @param _sourceMaxAmount Maximum amount of _sourceToken to spend.\n    /// @return amountUsdSpent The amount spent in USD\n    function purchase(\n        uint256 _releaseId,\n        uint256 _amount,\n        address _sourceToken,\n        uint256 _sourceMaxAmount\n    ) external payable returns (uint256 amountUsdSpent);\n\n    /// @notice Estimates the amount of `_sourceToken` required to get `_amount` of `_releaseId` for `_buyer` of the marketplace token and returns the current best route.\n    /// @param _releaseId The release ID.\n    /// @param _amount The amount of the release.\n    /// @param _buyer The buyer of the release.\n    /// @param _sourceToken The token to swap from.\n    /// @return sourceNeeded The amount of `_sourceToken` required.\n    /// @return releaseCurrency The active martketplace currency of the release.\n    /// @return quoteRoute The route of the quote.\n    /// @return totalPriceUsd The total price in USD (using exchange's priceAskDecimals).\n    function estimatePurchase(\n        uint256 _releaseId,\n        uint256 _amount,\n        address _buyer,\n        address _sourceToken\n    )\n        external\n        view\n        returns (\n            uint256 sourceNeeded,\n            address releaseCurrency,\n            IGildiExchangeSwapAdapter.QuoteRoute memory quoteRoute,\n            uint256 totalPriceUsd\n        );\n\n    /// @notice Returns the GildiExchange contract instance.\n    /// @return The GildiExchange contract.\n    function getGildiExchange() external view returns (IGildiExchange);\n}\n"
    },
    "contracts/interfaces/marketplace/exchange/IGildiExchangePaymentProcessor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport {IGildiExchange} from './IGildiExchange.sol';\n\n/// @title IGildiExchangePaymentProcessor\n/// @notice Interface for the Gildi Exchange Payment Processor.\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\ninterface IGildiExchangePaymentProcessor {\n    /// @notice Gets the price feed ID for a currency\n    /// @param _currency The currency address\n    /// @return The price feed ID\n    function getPriceFeedId(address _currency) external view returns (bytes32);\n\n    /// @notice Converts a price in USD to the equivalent amount in the specified currency\n    /// @param _priceInUSD The price in USD to convert\n    /// @param _currency The address of the currency to convert to\n    /// @return The equivalent amount in the specified currency\n    function quoteInCurrency(uint256 _priceInUSD, address _currency) external view returns (uint256);\n\n    /// @notice Processes payment with fees.\n    ///      Calculates fees, transfers funds to fee recipients, and optionally creates funds\n    /// @param _releaseId The ID of the release\n    /// @param _buyer The address of the buyer\n    /// @param _seller The address of the seller\n    /// @param _value The value to process fees for\n    /// @param _amountCurrency The currency of the amount\n    /// @param _createFund Whether to create an fund\n    /// @param _operator The address of the operator\n    /// @param _listingId The ID of the listing\n    /// @param _isProxyOperation Whether this is a proxy operation\n    /// @param _listingPayoutCurrency The currency to payout in from the listing\n    function handleProcessPaymentWithFees(\n        uint256 _releaseId,\n        address _buyer,\n        address _seller,\n        uint256 _value,\n        address _amountCurrency,\n        bool _createFund,\n        address _operator,\n        bool _isProxyOperation,\n        uint256 _listingId,\n        address _listingPayoutCurrency,\n        uint16 _slippageBps\n    ) external;\n}\n"
    },
    "contracts/interfaces/marketplace/exchange/IGildiExchangeSwapAdapter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\n/// @title IGildiExchangeSwapAdapter\n/// @notice Interface for a DEX/aggregator adapter that can\n///         quote & swap from a user’s source token -> marketplace token\n///         in an \"exact out\" fashion.\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\ninterface IGildiExchangeSwapAdapter {\n    /// @notice The route of the quote\n    /// @param marketplaceAdapter The address of the marketplace adapter\n    /// @param route The path of the quote\n    /// @param fees The fees of the quote\n    /// @param amounts The amounts of the quote\n    /// @param virtualAmountsWithoutSlippage The virtual amounts of the quote without slippage\n    struct QuoteRoute {\n        address marketplaceAdapter;\n        address[] route;\n        uint128[] fees;\n        uint128[] amounts;\n        uint128[] virtualAmountsWithoutSlippage;\n    }\n\n    /// @notice The quote for a swap in\n    /// @param sourceTokenRequired The amount of source token required\n    /// @param rawQuoteData The raw quote data\n    /// @param quoteRoute The quote route\n    /// @param validRoute Whether the route is valid\n    struct SwapInQuote {\n        uint256 sourceTokenRequired;\n        bytes rawQuoteData;\n        QuoteRoute quoteRoute;\n        bool validRoute;\n    }\n\n    /// @notice The quote for a swap out\n    /// @param targetTokenOut The target token\n    /// @param rawQuoteData The raw quote data\n    /// @param quoteRoute The quote route\n    /// @param validRoute Whether the route is valid\n    struct SwapOutQuote {\n        uint256 targetTokenOut;\n        bytes rawQuoteData;\n        QuoteRoute quoteRoute;\n        bool validRoute;\n    }\n\n    /// @notice Quotes the amount of `_sourceToken` required to get `_marketplaceAmountDesired` of `_marketplaceToken`.\n    /// @param _sourceToken The token to swap from.\n    /// @param _marketplaceToken The token to swap to.\n    /// @param _marketplaceAmountDesired The amount of `_marketplaceToken` desired.\n    /// @return quote The swap in quote containing required source token amount, quote data and route information\n    function quoteSwapIn(\n        address _sourceToken,\n        address _marketplaceToken,\n        uint256 _marketplaceAmountDesired\n    ) external view returns (SwapInQuote memory quote);\n\n    /// @notice Performs an \"exact out\" swap to get `_marketplaceAmount` of `_marketplaceToken`.\n    /// @param _sourceToken The token to swap from.\n    /// @param _marketplaceToken The token to swap to.\n    /// @param _sourceAmountMax The max `_sourceToken` we can spend (slippage buffer).\n    /// @param _marketplaceAmount The exact marketplace tokens we want out.\n    /// @param _to The recipient of the marketplace tokens.\n    /// @param _quoteData The data previously returned by `quoteSwapIn`.\n    function swapIn(\n        address _sourceToken,\n        address _marketplaceToken,\n        uint256 _sourceAmountMax,\n        uint256 _marketplaceAmount,\n        address _to,\n        bytes calldata _quoteData\n    ) external returns (uint256 sourceSpent);\n\n    /// @notice Quotes the amount of `_targetToken` you can get by providing `_sourceAmount` of `_sourceToken`.\n    /// @param _sourceToken The token to swap from.\n    /// @param _targetToken The token to swap to.\n    /// @param _sourceAmount The amount of `_sourceToken` available.\n    /// @return quote The quote.\n    function quoteSwapOut(\n        address _sourceToken,\n        address _targetToken,\n        uint256 _sourceAmount\n    ) external view returns (SwapOutQuote memory quote);\n\n    /// @notice Performs an \"exact in\" swap to convert `_sourceAmount` of `_sourceToken` into `_targetToken`.\n    /// @param _sourceToken The token to swap from.\n    /// @param _targetToken The token to swap to.\n    /// @param _sourceAmount The exact amount of `_sourceToken` to swap.\n    /// @param _minTargetAmount The minimum amount of `_targetToken` to receive (slippage protection).\n    /// @param _to The recipient of the target tokens.\n    /// @param _quoteData The data previously returned by `quoteSwapOut`.\n    function swapOut(\n        address _sourceToken,\n        address _targetToken,\n        uint256 _sourceAmount,\n        uint256 _minTargetAmount,\n        address _to,\n        bytes calldata _quoteData\n    ) external returns (uint256 targetReceived);\n}\n"
    },
    "contracts/interfaces/oracles/price/IGildiPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\n\npragma solidity 0.8.24;\n\nimport './IGildiPriceResolver.sol';\n\n/// @title Gildi Price Oracle Interface\n/// @notice Interface for the consumer-facing Gildi Price Oracle\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\ninterface IGildiPriceOracle is IGildiPriceResolver {\n    /// @notice Represents an asset in the system\n    struct Asset {\n        /// @dev Unique identifier for the asset\n        uint256 id;\n        /// @dev The asset's symbol (e.g., BTC, ETH)\n        string symbol;\n        /// @dev The asset's full name\n        string name;\n    }\n\n    /// @notice Information about a trading pair\n    struct PairInfo {\n        /// @dev Unique identifier for the pair\n        bytes32 pairId;\n        /// @dev The base asset in the pair\n        Asset baseAsset;\n        /// @dev The quote asset in the pair\n        Asset quoteAsset;\n    }\n\n    /// @dev Thrown when an invalid pair ID is provided\n    error InvalidPairId();\n\n    /// @notice Adds a pair using asset IDs\n    /// @param _baseAssetId The ID of the base asset\n    /// @param _quoteAssetId The ID of the quote asset\n    /// @param _resolver The resolver contract for the asset pair\n    function addPair(uint256 _baseAssetId, uint256 _quoteAssetId, IGildiPriceResolver _resolver) external;\n\n    /// @notice Retrieves the resolver for a specific asset pair\n    /// @param _pairId The identifier of the asset pair\n    function getResolver(bytes32 _pairId) external view returns (IGildiPriceResolver resolver);\n\n    /// @notice Fetches a list of all registered pairs in \"BASE/QUOTE\" string form\n    /// @return An array of registered pairs\n    function getPairs() external view returns (PairInfo[] memory);\n\n    /// @notice Adds a new asset\n    /// @param _symbol The symbol of the asset\n    /// @param _name The name of the asset\n    /// @return The ID of the newly added asset\n    function addAsset(string memory _symbol, string memory _name) external returns (uint256);\n\n    /// @notice Returns all registered assets\n    /// @return An array of registered assets\n    function getAssets() external view returns (Asset[] memory);\n\n    /// @notice Returns an asset by ID\n    /// @param _assetId The ID of the asset\n    /// @return The asset details\n    function getAssetById(uint256 _assetId) external view returns (Asset memory);\n\n    /// @notice Returns pairs that use the specified asset ID as quote\n    /// @param _quoteAssetId The ID of the quote asset\n    /// @return An array of registered pairs\n    function getPairsByQuoteAsset(uint256 _quoteAssetId) external view returns (string[] memory);\n\n    /// @notice Retrieves price data by numeric IDs\n    /// @param _baseAssetId The ID of the base asset\n    /// @param _quoteAssetId The ID of the quote asset\n    /// @return The price data for the asset pair\n    function getPriceById(uint256 _baseAssetId, uint256 _quoteAssetId) external view returns (PriceData memory);\n\n    /// @notice Checks if a pair with the given ID exists\n    /// @param _pairId The identifier of the asset pair\n    /// @return True if the pair exists\n    function pairExistsById(bytes32 _pairId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/oracles/price/IGildiPriceResolver.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\n\npragma solidity 0.8.24;\n\n/// @title Gildi Price Resolver Interface\n/// @notice Interface that all price resolvers must implement\n/// @custom:security-contact security@gildi.io\n/// @author Patrick Fischer\ninterface IGildiPriceResolver {\n    /// @notice Price data struct\n    struct PriceData {\n        /// @notice The price of the base asset in terms of the quote asset\n        uint256 price;\n        /// @notice The number of decimals for the price\n        uint8 decimals;\n        /// @notice The UNIX timestamp when the price was last updated\n        uint256 timestamp;\n    }\n\n    /// @notice Retrieves the price data for a given pair ID\n    /// @param pairId The identifier of the asset pair\n    /// @return price The price data for the asset pair\n    function getPrice(bytes32 pairId) external view returns (PriceData memory price);\n\n    /// @notice Retrieves the price data for a given pair ID, with a maximum age\n    /// @param pairId The identifier of the asset pair\n    /// @param age The maximum age of the price data in seconds\n    function getPriceNoOlderThan(bytes32 pairId, uint256 age) external view returns (PriceData memory priceData);\n}\n"
    },
    "contracts/interfaces/token/IERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\n\npragma solidity 0.8.24;\n\n/// @title IERC20Burnable\n/// @notice Interface for openzeppelin ERC20Burnable\n/// @custom:security-contact security@gildi.io\n/// @author Patrick Fischer (Pathin) > https://pathin.me\ninterface IERC20Burnable {\n    /// @notice Destroys a `value` amount of tokens from the caller.\n    /// @param value The amount of tokens to destroy.\n    function burn(uint256 value) external;\n\n    /// @notice Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance.\n    /// @param account The account to destroy the tokens from.\n    /// @param value The amount of tokens to destroy.\n    function burnFrom(address account, uint256 value) external;\n}\n"
    },
    "contracts/libraries/marketplace/exchange/SharedErrors.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\n/// @title SharedErrors\n/// @notice Common error definitions shared across Gildi Exchange contracts\n/// @dev This library consolidates error definitions to avoid duplication\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\nlibrary SharedErrors {\n    /// @dev Emitted when a function parameter is invalid or out-of-range (e.g. zero batchSize, zero price, etc.)\n    error ParamError();\n\n    /// @dev Emitted when an operation is not allowed for the caller\n    error NotAllowed();\n\n    /// @dev Emitted when the caller is invalid\n    error InvalidCaller();\n\n    /// @dev Emitted when a listing ID is invalid or does not match storage data\n    /// @param listingId The ID that caused the error\n    error ListingError(uint256 listingId);\n}\n"
    },
    "contracts/marketplace/exchange/GildiExchange.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport '../../interfaces/marketplace/exchange/IGildiExchange.sol';\nimport {SharedErrors} from '../../libraries/marketplace/exchange/SharedErrors.sol';\nimport {IERC20Burnable} from '../../interfaces/token/IERC20Burnable.sol';\nimport {IGildiPriceResolver} from '../../interfaces/oracles/price/IGildiPriceOracle.sol';\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport {PausableUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol';\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\nimport {ReentrancyGuardUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol';\nimport {Math} from '@openzeppelin/contracts/utils/math/Math.sol';\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\n/// @title Gildi Exchange\n/// @notice Marketplace of the Gildi platform.\n/// @custom:security-contact security@gildi.to\n/// @author Gildi Digital LLC\ncontract GildiExchange is\n    Initializable,\n    PausableUpgradeable,\n    AccessControlUpgradeable,\n    ReentrancyGuardUpgradeable,\n    IGildiExchange\n{\n    using SafeERC20 for IERC20;\n\n    // ========== Constants ==========\n    /// @notice Role identifier for admin access\n    bytes32 private constant ADMIN_ROLE = keccak256('ADMIN_ROLE');\n\n    /// @notice Role identifier for marketplace manager access\n    bytes32 private constant MARKETPLACE_MANAGER_ROLE = keccak256('MARKETPLACE_MANAGER_ROLE');\n\n    /// @notice Role identifier for fund claimer access\n    bytes32 private constant CLAIMER_ROLE = keccak256('CLAIMER_ROLE');\n\n    /// @notice Basis points denominator for percentage calculations (100% = 10000)\n    uint16 private constant BASIS_POINTS = 10000;\n\n    /// @notice Default slippage tolerance in basis points (5%)\n    uint16 public constant DEFAULT_SLIPPAGE_BPS = 500;\n\n    // ========== Storage Variables ==========\n    /// @notice Application settings for the exchange\n    AppSettings private appSettings;\n\n    /// @notice Array of all release IDs in the exchange\n    uint256[] private releaseIds;\n    /// @notice Mapping from release ID to Release struct\n    mapping(uint256 => Release) public releases;\n\n    /// @notice Mapping from release ID to InitialSale struct\n    mapping(uint256 => InitialSale) private initialSales;\n    /// @notice Mapping from release ID to array of whitelist buyer addresses\n    mapping(uint256 => address[]) private initialSaleWhitelistBuyers;\n    /// @notice Mapping from release ID to buyer address to whitelist status\n    mapping(uint256 => mapping(address => bool)) public isInitialSaleWhitelistBuyer;\n    /// @notice Mapping from release ID to buyer address to maximum buy count\n    mapping(uint256 => mapping(address => uint256)) private initialSaleMaxBuyCounts;\n    /// @notice Mapping from release ID to total quantity listed in initial sale\n    mapping(uint256 => uint256) private initialSaleListedQuantities;\n\n    // ========== Structs ==========\n\n    /// @notice Parameters for creating an initial sale\n    struct InitialSaleParams {\n        /// @dev The ID of the release\n        uint256 releaseId;\n        /// @dev The quantities of the asset\n        uint256[] assetQuantities;\n        /// @dev The prices of the asset for the quantity bracket\n        uint256[] assetPrices;\n        /// @dev The address of the seller (owner of the shares)\n        address seller;\n        /// @dev The maximum amount of tokens a buyer can buy in the initial sale\n        uint256 maxBuy;\n        /// @dev The start time of the initial sale\n        uint256 start;\n        /// @dev The duration of the initial sale (default 1 week)\n        uint256 duration;\n        /// @dev If the initial sale is a whitelist sale\n        bool whitelist;\n        /// @dev The addresses of the whitelist\n        address[] whitelistAddresses;\n        /// @dev The duration the whitelist is enforced (default 0 = forever)\n        uint256 whitelistDuration;\n        /// @dev Overrides the marketplace currency for the initial sale\n        address initialSaleCurrency;\n        /// @dev The currency to pay out in\n        address payoutCurrency;\n        /// @dev The address to receive funds from the sale (if address(0), defaults to seller)\n        address fundsReceiver;\n        /// @dev The fee distribution structure for the initial sale\n        FeeDistribution[] fees;\n    }\n\n    /// @notice A marketplace release\n    struct Release {\n        /// @dev The ID of the release\n        uint256 releaseId;\n        /// @dev Additional fees for this release\n        FeeDistribution[] additionalFees;\n        /// @dev If the release is initialized (set)\n        bool initialized;\n        /// @dev If the release is active = can be traded\n        bool active;\n        /// @dev If the release is in the process of being cancelled\n        bool isCancelling;\n    }\n\n    /// @notice Initial sale related data\n    struct InitialSale {\n        /// @dev If the release is in initial sale state\n        bool active;\n        /// @dev If the initial sale is a whitelist sale\n        bool whitelist;\n        /// @dev When the initial sale starts\n        uint256 startTime;\n        /// @dev When the initial sale ends\n        uint256 endTime;\n        /// @dev Until when the whitelist is enforced (0 = unlimited)\n        uint256 whitelistUntil;\n        /// @dev Maximum amount of tokens a buyer can buy in the initial sale\n        uint256 maxBuy;\n        /// @dev The sale currency of the initial sale\n        address saleCurrency;\n        /// @dev The fee distribution structure for the initial sale\n        FeeDistribution[] fees;\n    }\n\n    // ========== Events ==========\n\n    /// @notice Emitted when a purchase is made\n    /// @param releaseId The ID of the release being purchased\n    /// @param buyer The address of the buyer\n    /// @param seller The address of the seller\n    /// @param operator The address of the operator\n    /// @param listingId The ID of the listing\n    /// @param priceInUSD The price per item in USD\n    /// @param quantity The quantity of the release being purchased\n    event Purchased(\n        uint256 indexed releaseId,\n        address indexed buyer,\n        address indexed seller,\n        address operator,\n        uint256 listingId,\n        uint256 priceInUSD,\n        uint256 quantity,\n        uint256 priceInAsset,\n        address asset\n    );\n\n    /// @notice Emitted when a release cancellation is started\n    /// @param releaseId The ID of the release being cancelled\n    event ReleaseCancellationStarted(uint256 indexed releaseId);\n\n    /// @notice Emitted when a release is fully cancelled\n    /// @param releaseId The ID of the release being cancelled\n    event ReleaseCancelled(uint256 indexed releaseId);\n\n    /// @notice Emitted when an initial sale is created\n    /// @param releaseId The ID of the release\n    /// @param seller The address of the seller\n    /// @param assetQuantities The quantities of the asset\n    /// @param assetPrices The prices of the asset for the quantity bracket\n    /// @param maxBuy The maximum amount of tokens a buyer can buy in the initial sale\n    /// @param startTime The start time of the initial sale\n    /// @param duration The duration of the initial sale\n    /// @param whitelistEnabled If the initial sale is a whitelist sale\n    /// @param whitelistDuration The duration the whitelist is enforced\n    /// @param saleCurrency The currency of the initial sale\n    /// @param payoutCurrency The currency of the payout\n    /// @param saleFees The fees for the initial sale\n    event InitialSaleCreated(\n        uint256 indexed releaseId,\n        address indexed seller,\n        uint256[] assetQuantities,\n        uint256[] assetPrices,\n        uint256 maxBuy,\n        uint256 startTime,\n        uint256 duration,\n        bool whitelistEnabled,\n        uint256 whitelistDuration,\n        address saleCurrency,\n        address payoutCurrency,\n        FeeDistribution[] saleFees\n    );\n\n    /// @notice Emitted when the initial sale ends\n    /// @param releaseId The ID of the release\n    event InitialSaleEnded(uint256 indexed releaseId);\n\n    /// @notice Emitted when a release is initialized\n    /// @param releaseId The ID of the release\n    event ReleaseInitialized(uint256 indexed releaseId);\n\n    /// @notice Emitted when a release's active state is changed\n    /// @param releaseId The ID of the release\n    /// @param isActive The new active state\n    event ReleaseActiveStateChanged(uint256 indexed releaseId, bool isActive);\n\n    /// @notice Emitted when a release's fees are updated\n    /// @param releaseId The ID of the release\n    event FeesUpdated(uint256 indexed releaseId);\n\n    /// @notice Emitted when the ask decimals are set\n    /// @param askDecimals The new ask decimals\n    event AskDecimalsSet(uint8 askDecimals);\n\n    /// @notice Emitted when the marketplace currency is set\n    /// @param marketplaceCurrency The new marketplace currency\n    event MarketplaceCurrencySet(address marketplaceCurrency);\n\n    // ========== Errors ==========\n\n    /// @dev Emitted when the requested quantity exceeds available inventory.\n    /// @dev The quantity that was requested.\n    /// @dev The quantity that was available.\n    error InsufficientQuantity(uint256 requested, uint256 available);\n\n    /// @dev Emitted when a purchase cannot proceed (e.g. buyer not whitelisted, amount exceeds max buy, not enough tokens).\n    error PurchaseError();\n\n    /// @dev Emitted when there is a setup/configuration issue (e.g. oracle decimals not set, invalid fee distribution).\n    error SetupError();\n\n    /// @dev Emitted when a release is not found in the manager (e.g. gildiManager.releaseExists(...) fails).\n    /// @dev The ID that could not be found.\n    error ReleaseNotFound(uint256 releaseId);\n\n    /// @dev Emitted when the requested number of tokens to buy cannot be fulfilled by the available listings.\n    /// @dev The total amount of tokens requested\n    /// @dev The amount of tokens actually found in listings\n    error NotEnoughTokensInListings(uint256 requested, uint256 available);\n\n    /// @dev Emitted when a release is in a wrong state (e.g. uninitialized, cancelling when it should not be, or active/inactive mismatch).\n    /// @dev The ID of the release in question.\n    error ReleaseStateError(uint256 releaseId);\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    // ========== Constructor and Initializer ==========\n\n    /// @notice Initializes the contract\n    /// @param _initialDefaultAdmin The address of the initial default admin\n    /// @param _initialAdmin The address of the initial admin\n    /// @param _initialMarketplaceManager The address of the initial marketplace manager\n    /// @param _gildiManager The address of the Gildi Manager\n    /// @param _marketplaceCurrency The address of the marketplace currency\n    function initialize(\n        address _initialDefaultAdmin,\n        address _initialAdmin,\n        address _initialMarketplaceManager,\n        IGildiManager _gildiManager,\n        IERC20 _marketplaceCurrency\n    ) public initializer {\n        AppSettings storage $ = appSettings;\n\n        __Pausable_init();\n        __AccessControl_init();\n        __ReentrancyGuard_init();\n\n        if (_initialDefaultAdmin == address(0)) {\n            _initialDefaultAdmin = _msgSender();\n        }\n        _grantRole(DEFAULT_ADMIN_ROLE, _initialDefaultAdmin);\n\n        if (_initialAdmin != address(0)) {\n            _grantRole(ADMIN_ROLE, _initialAdmin);\n        }\n\n        if (_initialMarketplaceManager != address(0)) {\n            _grantRole(MARKETPLACE_MANAGER_ROLE, _initialMarketplaceManager);\n        }\n\n        $.maxBuyPerTransaction = 15;\n\n        $.gildiManager = _gildiManager;\n        _setMarketplaceCurrency(address(_marketplaceCurrency));\n    }\n\n    // ========== Main Marketplace Logic ==========\n\n    /// @notice Creates an initial sale.\n    /// @param _params The parameters for creating the initial sale\n    function createInitialSale(\n        InitialSaleParams calldata _params\n    ) external whenNotPaused onlyRole(MARKETPLACE_MANAGER_ROLE) {\n        AppSettings storage $ = appSettings;\n\n        // Validate release state - combine multiple checks\n        Release storage release = releases[_params.releaseId];\n        if (\n            !release.initialized ||\n            release.active ||\n            release.isCancelling ||\n            !$.gildiManager.isLocked(_params.releaseId) ||\n            $.gildiManager.isInInitialSale(_params.releaseId) ||\n            isInInitialSale(_params.releaseId)\n        ) {\n            revert ReleaseStateError(_params.releaseId);\n        }\n\n        // Validate function parameters\n        if (\n            _params.assetQuantities.length != _params.assetPrices.length ||\n            (_params.whitelist && _params.whitelistAddresses.length == 0) ||\n            (!_params.whitelist && _params.whitelistAddresses.length > 0)\n        ) {\n            revert SharedErrors.ParamError();\n        }\n\n        // Check if we have a feed for the initial sale currency\n        if (\n            _params.initialSaleCurrency != address(0) &&\n            $.paymentProcessor.getPriceFeedId(_params.initialSaleCurrency) == bytes32(0)\n        ) {\n            revert SharedErrors.ParamError();\n        }\n\n        // Adjust start time and duration if needed\n        uint256 startTime = _params.start < block.timestamp ? block.timestamp : _params.start;\n        uint256 duration = _params.duration == 0 ? 1 weeks : _params.duration;\n\n        // Calculate whitelist end time\n        uint256 whitelistUntil = (_params.whitelist && _params.whitelistDuration != 0)\n            ? startTime + _params.whitelistDuration\n            : 0;\n\n        // Setup initial sale\n        InitialSale storage initialSale = initialSales[_params.releaseId];\n        initialSale.whitelist = _params.whitelist;\n        initialSale.whitelistUntil = whitelistUntil;\n        initialSale.maxBuy = _params.maxBuy;\n        initialSale.saleCurrency = _params.initialSaleCurrency;\n\n        _enforceValidFeeDistribution(_params.fees);\n        initialSale.fees = _params.fees;\n\n        // Process whitelist addresses in a single loop\n        uint256 whitelistLength = _params.whitelistAddresses.length;\n        for (uint256 i = 0; i < whitelistLength; i++) {\n            address buyer = _params.whitelistAddresses[i];\n            if (!isInitialSaleWhitelistBuyer[_params.releaseId][buyer]) {\n                isInitialSaleWhitelistBuyer[_params.releaseId][buyer] = true;\n                initialSaleWhitelistBuyers[_params.releaseId].push(buyer);\n            }\n        }\n\n        release.active = true;\n        initialSale.active = true;\n        initialSale.startTime = startTime;\n        initialSale.endTime = startTime + duration;\n\n        $.gildiManager.startInitialSale(_params.releaseId);\n\n        for (uint256 i = 0; i < _params.assetQuantities.length; i++) {\n            initialSaleListedQuantities[_params.releaseId] += _params.assetQuantities[i];\n\n            // Use the orderBook to create the listing\n            $.orderBook.handleCreateListing(\n                _params.releaseId,\n                _params.seller,\n                _params.assetPrices[i],\n                _params.assetQuantities[i],\n                _params.payoutCurrency,\n                _params.fundsReceiver,\n                DEFAULT_SLIPPAGE_BPS\n            );\n        }\n\n        emit InitialSaleCreated(\n            _params.releaseId,\n            _params.seller,\n            _params.assetQuantities,\n            _params.assetPrices,\n            _params.maxBuy,\n            _params.start,\n            _params.duration,\n            _params.whitelist,\n            _params.whitelistDuration,\n            _params.initialSaleCurrency,\n            _params.payoutCurrency,\n            _params.fees\n        );\n    }\n\n    /// @notice Cancels a release in batches.\n    /// @param _releaseId The ID of the release\n    /// @param _batchSize The batch size (min 1, max 100)\n    function cancelRelease(uint256 _releaseId, uint256 _batchSize) external onlyRole(MARKETPLACE_MANAGER_ROLE) {\n        AppSettings storage $ = appSettings;\n\n        if (_batchSize > 100 || _batchSize == 0) {\n            revert SharedErrors.ParamError();\n        }\n\n        Release storage release = releases[_releaseId];\n        InitialSale storage initialSale = initialSales[_releaseId];\n\n        if (!release.initialized) {\n            revert ReleaseStateError(_releaseId);\n        }\n\n        if (release.active) {\n            revert ReleaseStateError(_releaseId);\n        }\n\n        if (!release.isCancelling) {\n            release.isCancelling = true;\n            emit ReleaseCancellationStarted(_releaseId);\n        }\n\n        if (initialSale.active) {\n            $.gildiManager.cancelInitialSale(_releaseId);\n        }\n\n        uint256 i = 0;\n\n        // Process batch of listings\n        uint256 batchToProcess = _batchSize > 100 ? 100 : _batchSize;\n\n        try $.orderBook.handleUnlistReleaseListings(_releaseId, batchToProcess) returns (uint256 processedCount) {\n            i += processedCount;\n        } catch {}\n        // Process funds using the fund manager\n        uint256 fundsProcessed = 0;\n        if (i < _batchSize) {\n            try $.fundManager.handleCancelReleaseFunds(_releaseId, _batchSize - i) returns (uint256 processedCount) {\n                fundsProcessed = processedCount;\n                i += fundsProcessed;\n            } catch {}\n        } else {\n            return;\n        }\n\n        if ($.orderBook.listedQuantities(_releaseId) == 0 && !$.fundManager.releaseHasFunds(_releaseId)) {\n            // Clean up initial sale mappings in batch constraints\n            if (initialSale.active) {\n                for (; i < initialSaleWhitelistBuyers[_releaseId].length && i < _batchSize; i++) {\n                    address buyer = initialSaleWhitelistBuyers[_releaseId][i];\n                    delete isInitialSaleWhitelistBuyer[_releaseId][buyer];\n                    delete initialSaleMaxBuyCounts[_releaseId][buyer];\n                }\n                if (initialSaleWhitelistBuyers[_releaseId].length > 0) {\n                    return;\n                }\n\n                delete initialSaleWhitelistBuyers[_releaseId];\n                delete initialSaleListedQuantities[_releaseId];\n            }\n\n            delete releases[_releaseId];\n            delete initialSales[_releaseId];\n\n            for (uint256 j = 0; j < releaseIds.length; j++) {\n                if (releaseIds[j] == _releaseId) {\n                    releaseIds[j] = releaseIds[releaseIds.length - 1];\n                    releaseIds.pop();\n                    break;\n                }\n            }\n            emit ReleaseCancelled(_releaseId);\n        }\n    }\n\n    /// @inheritdoc IGildiExchange\n    function createListing(\n        uint256 _releaseId,\n        address _seller,\n        uint256 _pricePerItem,\n        uint256 _quantity,\n        address _payoutCurrency,\n        address _fundsReceiver\n    ) external whenNotPaused {\n        _createListing(\n            _releaseId,\n            _seller,\n            _pricePerItem,\n            _quantity,\n            _payoutCurrency,\n            _fundsReceiver,\n            DEFAULT_SLIPPAGE_BPS\n        );\n    }\n\n    /// @inheritdoc IGildiExchange\n    function createListing(\n        uint256 _releaseId,\n        address _seller,\n        uint256 _pricePerItem,\n        uint256 _quantity,\n        address _payoutCurrency,\n        address _fundsReceiver,\n        uint16 _slippageBps\n    ) external whenNotPaused {\n        _createListing(_releaseId, _seller, _pricePerItem, _quantity, _payoutCurrency, _fundsReceiver, _slippageBps);\n    }\n\n    /// @inheritdoc IGildiExchange\n    function modifyListing(\n        uint256 _listingId,\n        uint256 _newPricePerItem,\n        uint256 _newQuantity,\n        address _payoutCurrency,\n        address _fundsReceiver\n    ) external whenNotPaused {\n        _modifyListing(\n            _listingId,\n            _newPricePerItem,\n            _newQuantity,\n            _payoutCurrency,\n            _fundsReceiver,\n            DEFAULT_SLIPPAGE_BPS\n        );\n    }\n\n    /// @inheritdoc IGildiExchange\n    function modifyListing(\n        uint256 _listingId,\n        uint256 _newPricePerItem,\n        uint256 _newQuantity,\n        address _payoutCurrency,\n        address _fundsReceiver,\n        uint16 _slippageBps\n    ) external whenNotPaused {\n        _modifyListing(_listingId, _newPricePerItem, _newQuantity, _payoutCurrency, _fundsReceiver, _slippageBps);\n    }\n\n    /// @notice Cancels a listing by ID\n    /// @param _listingId The ID of the listing\n    function cancelListing(uint256 _listingId) external nonReentrant whenNotPaused {\n        AppSettings storage $ = appSettings;\n\n        // Get the listing from the order book\n        IGildiExchangeOrderBook.Listing memory listing = $.orderBook.getListing(_listingId);\n\n        // Only the listing owner or someone with ADMIN_ROLE can cancel a listing\n        if (listing.seller != _msgSender() && !hasRole(ADMIN_ROLE, _msgSender())) {\n            revert SharedErrors.NotAllowed();\n        }\n\n        if ($.gildiManager.isInInitialSale(listing.releaseId) && isInInitialSale(listing.releaseId)) {\n            revert ReleaseStateError(listing.releaseId);\n        }\n\n        // Delegate to the order book to remove the listing\n        $.orderBook.handleRemoveListing(_listingId);\n    }\n\n    /// @notice Unlists all listings of a release in batches.\n    /// @param _releaseId The ID of the release (0 = all)\n    /// @param _batchSize The batch size (0 = unlimited)\n    function unlistAllListings(uint256 _releaseId, uint256 _batchSize) external onlyRole(ADMIN_ROLE) {\n        AppSettings storage $ = appSettings;\n\n        if (_batchSize == 0) {\n            _batchSize = type(uint256).max;\n        }\n\n        uint256 totalProcessed = 0;\n\n        // For each release\n        for (uint256 i = 0; i < releaseIds.length && totalProcessed < _batchSize; i++) {\n            uint256 releaseId = releaseIds[i];\n\n            if (releaseId != _releaseId && _releaseId != 0) {\n                continue;\n            }\n\n            uint256 remaining = _batchSize - totalProcessed;\n            uint256 batchToProcess = remaining > 100 ? 100 : remaining; // Process in chunks of max 100\n\n            // Delegate to the order book\n            uint256 processed = $.orderBook.handleUnlistReleaseListings(releaseId, batchToProcess);\n\n            totalProcessed += processed;\n\n            // If we processed less than the batch size, we're done with this release\n            if (processed < batchToProcess) {\n                break;\n            }\n        }\n    }\n\n    /// @inheritdoc IGildiExchange\n    function purchase(\n        uint256 _releaseId,\n        uint256 _amount,\n        uint256 _maxTotalPrice,\n        address _beneficiary,\n        bool _isProxyOperation\n    ) external override nonReentrant whenNotPaused returns (uint256 amountSpent, uint256 amountUsdSpent) {\n        address beneficiary = _beneficiary == address(0) ? _msgSender() : _beneficiary;\n        (bool buyAllowed, uint256 maxBuy) = canBuy(_releaseId, beneficiary);\n        if (!buyAllowed) {\n            revert PurchaseError();\n        }\n\n        if (maxBuy != 0 && _amount > maxBuy) {\n            revert PurchaseError();\n        }\n\n        // Default to non-proxy operation when called directly\n        (amountSpent, amountUsdSpent) = _performPurchase(\n            _releaseId,\n            _msgSender(),\n            _maxTotalPrice,\n            _amount,\n            beneficiary,\n            _isProxyOperation\n        );\n    }\n\n    // ========== Admin Functions ==========\n\n    /// @notice Sets the max buy per transaction\n    /// @param _maxBuyPerTransaction The maximum buy per transaction (0 = unlimited)\n    function setMaxBuyPerTransaction(uint256 _maxBuyPerTransaction) external onlyRole(ADMIN_ROLE) {\n        appSettings.maxBuyPerTransaction = _maxBuyPerTransaction;\n    }\n\n    /// @notice Pauses the contract\n    function pause() external onlyRole(ADMIN_ROLE) {\n        _pause();\n    }\n\n    /// @notice Unpauses the contract\n    function unpause() external onlyRole(ADMIN_ROLE) {\n        _unpause();\n    }\n\n    /// @notice Initializes the release\n    /// @param _tokenId The ID of the release\n    /// @param _additionalFees Additional fees for the release\n    function initializeRelease(\n        uint256 _tokenId,\n        FeeDistribution[] calldata _additionalFees\n    ) external onlyRole(ADMIN_ROLE) {\n        AppSettings storage $ = appSettings;\n        if (releases[_tokenId].initialized) {\n            revert ReleaseStateError(_tokenId);\n        }\n\n        if (!$.gildiManager.releaseExists(_tokenId)) {\n            revert ReleaseNotFound(_tokenId);\n        }\n\n        FeeDistribution[] memory feesToCheck = new FeeDistribution[]($.fees.length + _additionalFees.length);\n        uint256 toCheckIndex = 0;\n\n        for (uint256 i = 0; i < $.fees.length; i++) {\n            feesToCheck[toCheckIndex] = $.fees[i];\n            toCheckIndex++;\n        }\n\n        for (uint256 i = 0; i < _additionalFees.length; i++) {\n            feesToCheck[toCheckIndex] = _additionalFees[i];\n            toCheckIndex++;\n        }\n\n        _enforceValidFeeDistribution(feesToCheck);\n\n        releases[_tokenId] = Release({\n            releaseId: _tokenId,\n            initialized: true,\n            additionalFees: _additionalFees,\n            active: false,\n            isCancelling: false\n        });\n\n        releaseIds.push(_tokenId);\n\n        emit ReleaseInitialized(_tokenId);\n    }\n\n    /// @notice Sets the active state of a release\n    /// @param _releaseId The ID of the release\n    /// @param _active The active state\n    function setReleaseActive(uint256 _releaseId, bool _active) external onlyRole(ADMIN_ROLE) {\n        Release storage release = releases[_releaseId];\n\n        if (!release.initialized) {\n            revert ReleaseStateError(_releaseId);\n        }\n\n        if (_active && release.isCancelling) {\n            revert ReleaseStateError(_releaseId);\n        }\n\n        release.active = _active;\n\n        emit ReleaseActiveStateChanged(_releaseId, _active);\n    }\n\n    /// @notice Sets the fees for a specific release\n    /// @param _releaseId The ID of the release\n    /// @param _additionalFees The additional fees for the release\n    function setReleaseFees(\n        uint256 _releaseId,\n        FeeDistribution[] calldata _additionalFees\n    ) external onlyRole(ADMIN_ROLE) {\n        AppSettings storage $ = appSettings;\n        Release storage release = releases[_releaseId];\n\n        if (!release.initialized) {\n            revert ReleaseStateError(_releaseId);\n        }\n\n        FeeDistribution[] memory feesToCheck = new FeeDistribution[]($.fees.length + _additionalFees.length);\n        uint256 toCheckIndex = 0;\n\n        for (uint256 i = 0; i < $.fees.length; i++) {\n            feesToCheck[toCheckIndex] = $.fees[i];\n            toCheckIndex++;\n        }\n\n        for (uint256 i = 0; i < _additionalFees.length; i++) {\n            feesToCheck[toCheckIndex] = _additionalFees[i];\n            toCheckIndex++;\n        }\n\n        _enforceValidFeeDistribution(feesToCheck);\n        release.additionalFees = _additionalFees;\n\n        emit FeesUpdated(_releaseId);\n    }\n\n    /// @notice Sets the marketplace fees\n    function setFees(FeeDistribution[] calldata _fees) external onlyRole(ADMIN_ROLE) {\n        AppSettings storage $ = appSettings;\n\n        _enforceValidFeeDistribution(_fees);\n        $.fees = _fees;\n\n        emit FeesUpdated(0);\n    }\n\n    /// @notice Sets the number of decimals for price asks\n    /// @param _askDecimals The number of decimals for price asks (max 8)\n    function setAskDecimals(uint8 _askDecimals) public onlyRole(ADMIN_ROLE) {\n        AppSettings storage $ = appSettings;\n        if (_askDecimals == $.priceAskDecimals) {\n            return;\n        }\n\n        if (_askDecimals > 8) {\n            revert SharedErrors.ParamError();\n        }\n\n        // If the decimals changed, we need to make sure there are no listings, if there are, throw error\n        for (uint256 i = 0; i < releaseIds.length; i++) {\n            uint256 releaseId = releaseIds[i];\n            // Check if there are any listings for this release using the OrderBook\n            if ($.orderBook.listedQuantities(releaseId) > 0) {\n                revert SetupError();\n            }\n        }\n\n        $.priceAskDecimals = _askDecimals;\n        emit AskDecimalsSet(_askDecimals);\n    }\n\n    /// @notice Sets the marketplace currency\n    /// @param _marketplaceCurrency The address of the marketplace currency\n    function setMarketplaceCurrency(address _marketplaceCurrency) public onlyRole(ADMIN_ROLE) {\n        _setMarketplaceCurrency(_marketplaceCurrency);\n    }\n\n    /// @inheritdoc IGildiExchange\n    function transferTokenInContext(\n        address _from,\n        address _to,\n        uint256 _value,\n        address _amountCurrency\n    ) external override {\n        AppSettings storage $ = appSettings;\n\n        if (_amountCurrency == address(0) || _from == address(0) || _to == address(0)) {\n            revert SharedErrors.ParamError();\n        }\n\n        // Make sure caller is payment processor or fund manager\n        if (_msgSender() != address($.paymentProcessor) && _msgSender() != address($.fundManager)) {\n            revert SharedErrors.InvalidCaller();\n        }\n\n        if (_from == _to || _value == 0) {\n            return;\n        }\n\n        IERC20 token = IERC20(_amountCurrency);\n        if (_from == address(this)) {\n            token.safeTransfer(_to, _value);\n        } else {\n            token.safeTransferFrom(_from, _to, _value);\n        }\n    }\n\n    /// @inheritdoc IGildiExchange\n    function tryBurnTokenInContext(\n        address _from,\n        uint256 _value,\n        address _amountCurrency\n    ) external override returns (bool) {\n        AppSettings storage $ = appSettings;\n\n        if (_amountCurrency == address(0) || _from == address(0)) {\n            revert SharedErrors.ParamError();\n        }\n\n        // Make sure caller is payment processor\n        if (_msgSender() != address($.paymentProcessor)) {\n            revert SharedErrors.InvalidCaller();\n        }\n\n        IERC20Burnable burnable = IERC20Burnable(_amountCurrency);\n\n        // Try to burn based on source of funds\n        try burnable.burnFrom(_from, _value) {\n            return true;\n        } catch {}\n        return false;\n    }\n\n    /// @notice Sets up the exchange with required dependencies\n    /// @param _gildiPriceOracle The price oracle for currency conversions\n    /// @param _askDecimals The number of decimals for price asks\n    /// @param _orderBook The order book contract for managing listings\n    /// @param _fundManager The fund manager contract for handling funds\n    /// @param _paymentAggregator The payment aggregator for handling payments\n    function setup(\n        IGildiPriceOracle _gildiPriceOracle,\n        uint8 _askDecimals,\n        IGildiExchangeOrderBook _orderBook,\n        IGildiExchangeFundManager _fundManager,\n        IGildiExchangePaymentProcessor _paymentProcessor,\n        IGildiExchangePaymentAggregator _paymentAggregator\n    ) external onlyRole(ADMIN_ROLE) {\n        AppSettings storage $ = appSettings;\n        setAskDecimals(_askDecimals);\n\n        if (\n            address(_gildiPriceOracle) == address(0) ||\n            address(_orderBook) == address(0) ||\n            address(_fundManager) == address(0) ||\n            address(_paymentAggregator) == address(0) ||\n            address(_paymentProcessor) == address(0)\n        ) {\n            revert SharedErrors.ParamError();\n        }\n\n        $.gildiPriceOracle = _gildiPriceOracle;\n        $.orderBook = _orderBook;\n        $.fundManager = _fundManager;\n        $.paymentProcessor = _paymentProcessor;\n        $.paymentAggregator = _paymentAggregator;\n    }\n\n    // ========== View Functions ==========\n\n    /// @notice Gets the whitelist of a release.\n    /// @param _releaseId The ID of the release\n    /// @return whitelist The whitelist of the release\n    function getWhitelist(uint256 _releaseId) external view returns (address[] memory) {\n        return initialSaleWhitelistBuyers[_releaseId];\n    }\n\n    /// @inheritdoc IGildiExchange\n    function quotePricePreview(\n        uint256 _releaseId,\n        uint256 _amountToBuy,\n        address _buyer\n    ) external view override returns (uint256, address, uint256) {\n        AppSettings storage $ = appSettings;\n        Release storage release = releases[_releaseId];\n\n        // Combine multiple state checks into a single condition\n        if ((initialSales[_releaseId].active && !release.initialized) || release.isCancelling || !release.active) {\n            revert ReleaseStateError(_releaseId);\n        }\n\n        // Get the preview information from the OrderBook\n        IGildiExchangeOrderBook.PurchasePreview memory preview = $.orderBook.previewPurchase(\n            _releaseId,\n            _buyer,\n            _amountToBuy\n        );\n\n        // Check if there are enough tokens available\n        if (preview.totalQuantityAvailable < _amountToBuy) {\n            revert InsufficientQuantity(_amountToBuy, preview.totalQuantityAvailable);\n        }\n\n        // Use USD price from OrderBook's extended PurchasePreview\n        return (preview.totalPriceInCurrency, preview.currency, preview.totalPriceUsd);\n    }\n\n    /// @inheritdoc IGildiExchange\n    function getReleaseFees(uint256 _releaseId) public view override returns (FeeDistribution[] memory) {\n        AppSettings storage $ = appSettings;\n        Release storage release = releases[_releaseId];\n\n        // If initial sale is active, return initial sale fees\n        if (initialSales[_releaseId].active) {\n            return initialSales[_releaseId].fees;\n        }\n\n        // If no additional fees, just return global fees\n        if (release.additionalFees.length == 0) {\n            return $.fees;\n        }\n\n        uint256 globalLength = $.fees.length;\n        uint256 additionalLength = release.additionalFees.length;\n        FeeDistribution[] memory combinedFees = new FeeDistribution[](globalLength + additionalLength);\n\n        // Copy global fees first\n        for (uint256 i = 0; i < globalLength; i++) {\n            combinedFees[i] = $.fees[i];\n        }\n\n        // Copy additional fees at offset\n        for (uint256 i = 0; i < additionalLength; i++) {\n            combinedFees[globalLength + i] = release.additionalFees[i];\n        }\n\n        return combinedFees;\n    }\n\n    /// @inheritdoc IGildiExchange\n    function isInInitialSale(uint256 _releaseId) public view override returns (bool) {\n        InitialSale storage initialSale = initialSales[_releaseId];\n        return\n            initialSale.active && block.timestamp < initialSale.endTime && initialSaleListedQuantities[_releaseId] > 0;\n    }\n\n    /// @notice Whether or not the release is in a whitelist sale state\n    /// @param _releaseId The ID of the release\n    function isWhitelistSale(uint256 _releaseId) public view returns (bool) {\n        // First check if it's in initial sale at all\n        if (!isInInitialSale(_releaseId)) {\n            return false;\n        }\n\n        // Check whitelist settings\n        InitialSale storage initialSale = initialSales[_releaseId];\n        if (!initialSale.whitelist) {\n            return false;\n        }\n\n        // Check whitelist timing\n        return initialSale.whitelistUntil == 0 || block.timestamp < initialSale.whitelistUntil;\n    }\n\n    /// @notice Checks if a user can buy a release and determines the maximum amount they can buy\n    /// @dev Considers whitelist status, initial sale status, and transaction limits\n    /// @param _releaseId The ID of the release\n    /// @param _address The address of the buyer\n    /// @return buyAllowed True if the user can buy the release, false otherwise\n    /// @return maxBuyAmount The maximum amount the user can buy (0 if not allowed)\n    function canBuy(uint256 _releaseId, address _address) public view returns (bool buyAllowed, uint256 maxBuyAmount) {\n        AppSettings storage $ = appSettings;\n\n        // Check release is active\n        if (!releases[_releaseId].active) {\n            return (false, 0);\n        }\n\n        // Check whitelist requirements\n        bool isWhitelist = isWhitelistSale(_releaseId);\n        if (isWhitelist && !isInitialSaleWhitelistBuyer[_releaseId][_address]) {\n            return (false, 0);\n        }\n\n        bool inInitialSale = isInInitialSale(_releaseId);\n        if (!inInitialSale) {\n            // Regular sale case - always allowed up to transaction limit\n            return (true, $.maxBuyPerTransaction);\n        }\n\n        // Initial sale timing check\n        InitialSale storage initialSale = initialSales[_releaseId];\n        if (block.timestamp < initialSale.startTime) {\n            return (false, 0);\n        }\n\n        // Initial sale without limit\n        if (initialSale.maxBuy == 0) {\n            return (true, $.maxBuyPerTransaction);\n        }\n\n        // Check user buy limit\n        uint256 userBought = initialSaleMaxBuyCounts[_releaseId][_address];\n        if (userBought >= initialSale.maxBuy) {\n            return (false, 0);\n        }\n\n        // User can buy the remaining amount up to transaction limit\n        return (true, Math.min(initialSale.maxBuy - userBought, $.maxBuyPerTransaction));\n    }\n\n    /// @notice Checks whether or not a list of releases can be sold.\n    /// @param _releaseIds The IDs of the releases\n    /// @return result An array containing whether or not each release can be sold\n    function canSell(uint256[] calldata _releaseIds) external view returns (bool[] memory) {\n        bool[] memory result = new bool[](_releaseIds.length);\n        for (uint256 i = 0; i < _releaseIds.length; i++) {\n            uint256 releaseId = _releaseIds[i];\n            Release storage release = releases[releaseId];\n            result[i] = release.initialized && release.active && !release.isCancelling && !isInInitialSale(releaseId);\n        }\n        return result;\n    }\n\n    /// @notice Gets a release by ID\n    /// @param _releaseId The ID of the release\n    /// @return release The release\n    function getReleaseById(uint256 _releaseId) external view returns (Release memory) {\n        return releases[_releaseId];\n    }\n\n    /// @notice Gets the initial sale by release ID\n    /// @param _releaseId The ID of the release\n    /// @return initialSale The initial sale\n    function getInitialSaleByReleaseId(uint256 _releaseId) external view returns (InitialSale memory) {\n        return initialSales[_releaseId];\n    }\n\n    /// @inheritdoc IGildiExchange\n    function getReleaseIds(bool _activeOnly) external view override returns (uint256[] memory) {\n        if (!_activeOnly) {\n            return releaseIds;\n        }\n\n        // Single-pass algorithm to count and collect active releases simultaneously\n        uint256[] memory tempReleaseIds = new uint256[](releaseIds.length);\n        uint256 activeCount = 0;\n\n        // Store length to avoid multiple storage reads\n        uint256 totalLength = releaseIds.length;\n\n        for (uint256 i = 0; i < totalLength; i++) {\n            uint256 releaseId = releaseIds[i];\n            if (releases[releaseId].active || initialSales[releaseId].active) {\n                tempReleaseIds[activeCount] = releaseId;\n                activeCount++;\n            }\n        }\n\n        // Copy to exactly-sized result array\n        uint256[] memory result = new uint256[](activeCount);\n        for (uint256 i = 0; i < activeCount; i++) {\n            result[i] = tempReleaseIds[i];\n        }\n\n        return result;\n    }\n\n    /// @inheritdoc IGildiExchange\n    function getAppEnvironment() external view override returns (AppEnvironment memory) {\n        return AppEnvironment(appSettings, BASIS_POINTS, ADMIN_ROLE, MARKETPLACE_MANAGER_ROLE, CLAIMER_ROLE);\n    }\n\n    /// @inheritdoc IGildiExchange\n    function getActiveMarketplaceReleaseAsset(uint256 _releaseId) public view override returns (address) {\n        InitialSale storage initialSale = initialSales[_releaseId];\n\n        if (isInInitialSale(_releaseId) && initialSale.saleCurrency != address(0)) {\n            return initialSale.saleCurrency;\n        }\n\n        return address(appSettings.marketplaceCurrency);\n    }\n\n    /// @notice Converts a price in USD to the equivalent amount in the release's active marketplace asset\n    /// @param _releaseId The ID of the release\n    /// @param _priceInUsd The price in USD to convert\n    /// @return activeMarketplaceReleaseAsset The address of the active marketplace asset for the release\n    /// @return priceInAsset The equivalent amount in the active marketplace asset\n    function quotePrice(\n        uint256 _releaseId,\n        uint256 _priceInUsd\n    ) external view returns (address activeMarketplaceReleaseAsset, uint256 priceInAsset) {\n        AppSettings storage $ = appSettings;\n        activeMarketplaceReleaseAsset = getActiveMarketplaceReleaseAsset(_releaseId);\n        priceInAsset = $.paymentProcessor.quoteInCurrency(_priceInUsd, activeMarketplaceReleaseAsset);\n    }\n\n    // ========== Internal Functions ==========\n\n    /// @dev Validates that a release is in a valid state for operations\n    /// @dev Reverts with ReleaseStateError if the release is not initialized, is cancelling, or is not active\n    /// @param _releaseId The ID of the release to validate\n    function _validateReleaseState(uint256 _releaseId) internal view {\n        Release storage release = releases[_releaseId];\n        if (!release.initialized || release.isCancelling || !release.active) {\n            revert ReleaseStateError(_releaseId);\n        }\n    }\n\n    /// @dev Validates that a release is initialized\n    /// @dev Reverts with ReleaseStateError if the release is not initialized\n    /// @param _releaseId The ID of the release to validate\n    function _validateReleaseInitialized(uint256 _releaseId) internal view {\n        if (!releases[_releaseId].initialized) {\n            revert ReleaseStateError(_releaseId);\n        }\n    }\n\n    /// @dev Performs the purchase of tokens from a release\n    /// @dev Handles the entire purchase flow including finding listings, transferring funds, and updating state\n    /// @param _releaseId The ID of the release to purchase\n    /// @param _operator The address performing the purchase operation\n    /// @param _maxTotalPrice The maximum total price the buyer is willing to pay\n    /// @param _amount The amount of tokens to purchase\n    /// @param _buyer The address of the buyer receiving the tokens\n    /// @param _isProxyOperation Whether this is a proxy operation\n    /// @return amountSpent The total amount spent on the purchase\n    /// @return amountUsdSpent The total amount spent in USD\n    function _performPurchase(\n        uint256 _releaseId,\n        address _operator,\n        uint256 _maxTotalPrice,\n        uint256 _amount,\n        address _buyer,\n        bool _isProxyOperation\n    ) internal returns (uint256 amountSpent, uint256 amountUsdSpent) {\n        _endInitialSaleIfNecessary(_releaseId);\n\n        AppSettings storage $ = appSettings;\n        address releaseAsset = getActiveMarketplaceReleaseAsset(_releaseId);\n\n        // Validate release state\n        _validateReleaseState(_releaseId);\n\n        // Check available buy quantity using the order book\n        uint256 availableQuantity = $.orderBook.getAvailableBuyQuantity(_releaseId, _buyer);\n        if (availableQuantity < _amount) {\n            revert NotEnoughTokensInListings(_amount, availableQuantity);\n        }\n\n        bool releaseIsInInitialSale = isInInitialSale(_releaseId);\n\n        // Initialize tracking variables\n        uint256 remainingAmount = _amount;\n        uint256 totalBought = 0;\n        uint256 totalPriceInMarketplaceCurrency = 0;\n        uint256 totalPriceInUsd = 0;\n\n        // Process listings in order of price\n        uint256 current = $.orderBook.getHeadListingId(_releaseId);\n        while (current != 0 && remainingAmount > 0) {\n            // Get the listing details\n            IGildiExchangeOrderBook.Listing memory listing = $.orderBook.getListing(current);\n\n            // Skip self-listings\n            if (listing.seller == _buyer) {\n                current = $.orderBook.getNextListingId(current);\n                continue;\n            }\n\n            // Calculate quantity to buy from this listing\n            uint256 boughtQuantity = listing.quantity >= remainingAmount ? remainingAmount : listing.quantity;\n            remainingAmount -= boughtQuantity;\n\n            // Calculate price and process payment\n            uint256 marketplaceCurrencyPricePerItem = $.paymentProcessor.quoteInCurrency(\n                listing.pricePerItem,\n                releaseAsset\n            );\n            uint256 listingPrice = marketplaceCurrencyPricePerItem * boughtQuantity;\n            uint256 listingUsdPrice = listing.pricePerItem * boughtQuantity;\n            _handlePaymentFlow(\n                _operator,\n                _buyer,\n                listing.fundsReceiver == address(0) ? listing.seller : listing.fundsReceiver,\n                _releaseId,\n                listingPrice,\n                releaseAsset,\n                _isProxyOperation,\n                listing.id,\n                listing.payoutCurrency,\n                listing.slippageBps\n            );\n            totalPriceInMarketplaceCurrency += listingPrice;\n            totalPriceInUsd += listingUsdPrice;\n\n            // Unlock tokens\n            $.gildiManager.unlockTokens(listing.seller, listing.releaseId, boughtQuantity);\n\n            // Transfer ownership using appropriate method based on sale state\n            if (releaseIsInInitialSale) {\n                $.gildiManager.transferOwnershipInitialSale(_releaseId, listing.seller, _buyer, boughtQuantity);\n            } else {\n                $.gildiManager.transferOwnership(_releaseId, listing.seller, _buyer, boughtQuantity);\n            }\n\n            // Log events\n            emit Purchased(\n                _releaseId,\n                _buyer,\n                listing.seller,\n                _operator,\n                listing.id,\n                listing.pricePerItem,\n                boughtQuantity,\n                marketplaceCurrencyPricePerItem,\n                releaseAsset\n            );\n\n            // Update totals\n            totalBought += boughtQuantity;\n\n            // Get next listing before modifying current one\n            uint256 nextId = $.orderBook.getNextListingId(current);\n\n            // Update the orderbook\n            $.orderBook.handleDecreaseListingQuantity(current, boughtQuantity);\n\n            current = nextId;\n        }\n\n        // Ensure price limit wasn't exceeded\n        if (totalPriceInMarketplaceCurrency > _maxTotalPrice) {\n            revert PurchaseError();\n        }\n\n        // Ensure all requested tokens were purchased\n        if (remainingAmount > 0) {\n            revert NotEnoughTokensInListings(_amount, _amount - remainingAmount);\n        }\n\n        // Handle initial sale bookkeeping if needed\n        if (releaseIsInInitialSale) {\n            initialSaleListedQuantities[_releaseId] -= totalBought;\n            initialSaleMaxBuyCounts[_releaseId][_buyer] += _amount;\n\n            if ($.orderBook.listedQuantities(_releaseId) == 0) {\n                _endInitialSale(_releaseId);\n            }\n        }\n\n        return (totalPriceInMarketplaceCurrency, totalPriceInUsd);\n    }\n\n    /// @dev Ends the initial sale for a release\n    /// @dev Cleans up all initial sale data including whitelist information\n    /// @param _releaseId The ID of the release to end initial sale for\n    function _endInitialSale(uint256 _releaseId) internal {\n        AppSettings storage $ = appSettings;\n        address[] storage buyers = initialSaleWhitelistBuyers[_releaseId];\n        uint256 buyersLength = buyers.length;\n\n        // Reset all initial sale data in one go\n        delete initialSales[_releaseId];\n\n        // Clean up whitelist data - use single loop\n        for (uint256 i = 0; i < buyersLength; i++) {\n            address buyer = buyers[i];\n            delete isInitialSaleWhitelistBuyer[_releaseId][buyer];\n            delete initialSaleMaxBuyCounts[_releaseId][buyer];\n        }\n\n        delete initialSaleWhitelistBuyers[_releaseId];\n        delete initialSaleListedQuantities[_releaseId];\n\n        if ($.gildiManager.isInInitialSale(_releaseId)) {\n            $.gildiManager.endInitialSale(_releaseId);\n        }\n\n        emit InitialSaleEnded(_releaseId);\n    }\n\n    /// @dev Creates a new listing\n    /// @param _releaseId The ID of the release\n    /// @param _seller The address of the seller\n    /// @param _pricePerItem The price per item (in USD)\n    /// @param _quantity The quantity of the listing\n    /// @param _payoutCurrency The currency to payout in\n    /// @param _fundsReceiver The address to receive funds from the sale (if address(0), defaults to seller)\n    /// @param _slippageBps The slippage tolerance in basis points\n    function _createListing(\n        uint256 _releaseId,\n        address _seller,\n        uint256 _pricePerItem,\n        uint256 _quantity,\n        address _payoutCurrency,\n        address _fundsReceiver,\n        uint16 _slippageBps\n    ) internal nonReentrant {\n        _endInitialSaleIfNecessary(_releaseId);\n\n        AppSettings storage $ = appSettings;\n        Release storage release = releases[_releaseId];\n\n        // Only the seller or someone with ADMIN_ROLE can create a listing\n        if (_seller != _msgSender() && !hasRole(ADMIN_ROLE, _msgSender())) {\n            revert SharedErrors.NotAllowed();\n        }\n\n        // Validation\n        if (release.isCancelling || !release.active) {\n            revert ReleaseStateError(_releaseId);\n        }\n\n        if ($.gildiManager.isLocked(_releaseId)) {\n            revert ReleaseStateError(_releaseId);\n        }\n\n        if ($.gildiManager.isInInitialSale(_releaseId) && isInInitialSale(_releaseId)) {\n            revert ReleaseStateError(_releaseId);\n        }\n\n        if (_slippageBps > BASIS_POINTS) {\n            revert SharedErrors.ParamError();\n        }\n\n        // Delegate to the order book\n        $.orderBook.handleCreateListing(\n            _releaseId,\n            _seller,\n            _pricePerItem,\n            _quantity,\n            _payoutCurrency,\n            _fundsReceiver,\n            _slippageBps\n        );\n    }\n\n    /// @dev Modifies an existing listing\n    /// @param _listingId The ID of the listing\n    /// @param _newPricePerItem The new price per item (in USD)\n    /// @param _newQuantity The new quantity of the listing\n    /// @param _payoutCurrency The new payout currency\n    /// @param _fundsReceiver The new address to receive funds from the sale (if address(0), defaults to seller)\n    /// @param _slippageBps The new slippage tolerance in basis points\n    function _modifyListing(\n        uint256 _listingId,\n        uint256 _newPricePerItem,\n        uint256 _newQuantity,\n        address _payoutCurrency,\n        address _fundsReceiver,\n        uint16 _slippageBps\n    ) internal nonReentrant {\n        _endInitialSaleIfNecessary(_listingId);\n\n        AppSettings storage $ = appSettings;\n\n        // Get the listing from the order book\n        IGildiExchangeOrderBook.Listing memory listing = $.orderBook.getListing(_listingId);\n\n        // Only the listing owner or someone with ADMIN_ROLE can modify a listing\n        if (listing.seller != _msgSender() && !hasRole(ADMIN_ROLE, _msgSender())) {\n            revert SharedErrors.NotAllowed();\n        }\n\n        if ($.gildiManager.isInInitialSale(listing.releaseId) && isInInitialSale(listing.releaseId)) {\n            revert ReleaseStateError(listing.releaseId);\n        }\n\n        if (_slippageBps > BASIS_POINTS) {\n            revert SharedErrors.ParamError();\n        }\n\n        // Delegate to the order book\n        $.orderBook.handleModifyListing(\n            _listingId,\n            _newPricePerItem,\n            _newQuantity,\n            _payoutCurrency,\n            _fundsReceiver,\n            _slippageBps\n        );\n    }\n\n    /// @dev Handles currency transfers between buyers and sellers\n    /// @dev Determines whether to use fund or direct transfer based on initial sale status\n    /// @param _operator The address of the operator\n    /// @param _buyer The address of the buyer\n    /// @param _seller The address of the seller\n    /// @param _releaseId The ID of the release\n    /// @param _value The value to transfer\n    /// @param _currencyAddress The address of the currency to transfer\n    /// @param _isProxyOperation Whether this is a proxy operation\n    /// @param _listingId The ID of the listing\n    /// @param _payoutCurrency The currency to payout in\n    /// @param _slippageBps The slippage tolerance in basis points\n    function _handlePaymentFlow(\n        address _operator,\n        address _buyer,\n        address _seller,\n        uint256 _releaseId,\n        uint256 _value,\n        address _currencyAddress,\n        bool _isProxyOperation,\n        uint256 _listingId,\n        address _payoutCurrency,\n        uint16 _slippageBps\n    ) internal {\n        _validateReleaseInitialized(_releaseId);\n\n        AppSettings storage $ = appSettings;\n\n        bool isFund = isInInitialSale(_releaseId);\n\n        if (isFund) {\n            // Process fees and create funds, passing the proxy operation flag\n            $.paymentProcessor.handleProcessPaymentWithFees(\n                _releaseId,\n                _buyer,\n                _seller,\n                _value,\n                _currencyAddress,\n                true,\n                _operator,\n                _isProxyOperation,\n                _listingId,\n                _payoutCurrency,\n                _slippageBps\n            );\n        } else {\n            // Process fees and make direct transfers\n            // For direct transfers we don't need to track the proxy operation flag\n            $.paymentProcessor.handleProcessPaymentWithFees(\n                _releaseId,\n                _buyer,\n                _seller,\n                _value,\n                _currencyAddress,\n                false, // _createFund\n                _operator, // Use the actual operator, not the buyer\n                false, // _isProxyOperation\n                _listingId,\n                _payoutCurrency,\n                _slippageBps\n            );\n        }\n    }\n\n    /// @dev Validates that fee distributions are valid\n    /// @dev Ensures that fee percentages don't exceed 100% (BASIS_POINTS) for both parent and sub-fees\n    /// @param _feeDistributions Array of fee distributions to validate\n    function _enforceValidFeeDistribution(FeeDistribution[] memory _feeDistributions) internal pure {\n        uint256 sum = 0;\n        uint256 feeLength = _feeDistributions.length;\n\n        for (uint256 i = 0; i < feeLength; i++) {\n            // Add parent fee, check immediately\n            sum += _feeDistributions[i].feeReceiver.value;\n            if (sum > BASIS_POINTS) {\n                revert SetupError();\n            }\n\n            // Check sub fees in a separate loop\n            uint256 subSum = 0;\n            uint256 subLength = _feeDistributions[i].subFeeReceivers.length;\n\n            for (uint256 j = 0; j < subLength; j++) {\n                subSum += _feeDistributions[i].subFeeReceivers[j].value;\n            }\n\n            if (subSum > BASIS_POINTS) {\n                revert SetupError();\n            }\n        }\n    }\n\n    /// @dev Checks if an initial sale should be ended and ends it if necessary\n    /// @dev Ends the initial sale if it's active but no longer in the initial sale period\n    /// @param _releaseId The ID of the release to check\n    function _endInitialSaleIfNecessary(uint256 _releaseId) internal {\n        if (initialSales[_releaseId].active && !isInInitialSale(_releaseId)) {\n            _endInitialSale(_releaseId);\n        }\n    }\n\n    /// @dev Sets the marketplace currency\n    /// @param _marketplaceCurrency The address of the marketplace currency\n    function _setMarketplaceCurrency(address _marketplaceCurrency) private {\n        AppSettings storage $ = appSettings;\n        $.marketplaceCurrency = IERC20(_marketplaceCurrency);\n\n        emit MarketplaceCurrencySet(_marketplaceCurrency);\n    }\n\n    // ---------------------------------------------------------------------------\n    // End of contract logic\n    // ---------------------------------------------------------------------------\n\n    // ---------------------------------------------------------------------------\n    // Fallback functions\n    // ---------------------------------------------------------------------------\n\n    /// @notice Fallback function to prevent direct Ether transfers\n    fallback() external payable {\n        revert SharedErrors.NotAllowed();\n    }\n\n    /// @notice Fallback function to prevent direct Ether transfers\n    receive() external payable {\n        revert SharedErrors.NotAllowed();\n    }\n}\n"
    },
    "contracts/mock/MockGildiExchangeUpgrade.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport '../marketplace/exchange/GildiExchange.sol';\nimport './MockUpgrade.sol';\n\ncontract MockGildiExchangeUpgrade is GildiExchange, MockUpgrade {}\n"
    },
    "contracts/mock/MockUpgrade.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nabstract contract MockUpgrade {\n    bool private newFunctionValue;\n\n    /// @dev This function is used to test the upgradeability of the contract.\n    /// @return True if the function is called, false otherwise.\n    function newFunctionGetter() external view returns (bool) {\n        return newFunctionValue;\n    }\n\n    /// @dev This function is used to test the upgradeability of the contract.\n    /// @param _newFunctionValue The new value for the function.\n    function newFunctionSetter(bool _newFunctionValue) external {\n        newFunctionValue = _newFunctionValue;\n    }\n\n    /// @dev Returns true to indicate this is an upgraded contract\n    /// @return Boolean indicating upgrade status\n    function isUpgraded() public pure returns (bool) {\n        return true;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}