{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {ERC165Upgradeable} from \"../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role => RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n     *\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\n     */\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\n        return INITIALIZABLE_STORAGE;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        bytes32 slot = _initializableStorageSlot();\n        assembly {\n            $.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\n    struct PausableStorage {\n        bool _paused;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Pausable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\n\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\n        assembly {\n            $.slot := PausableStorageLocation\n        }\n    }\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    function __Pausable_init() internal onlyInitializing {\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        PausableStorage storage $ = _getPausableStorage();\n        return $._paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\n    struct ReentrancyGuardStorage {\n        uint256 _status;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\n\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\n        assembly {\n            $.slot := ReentrancyGuardStorageLocation\n        }\n    }\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if ($._status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        $._status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        return $._status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\n\npragma solidity >=0.8.4;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[ERC].\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the zero address.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {IERC1155Receiver-onERC1155Received} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {IERC1155Receiver-onERC1155BatchReceived} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            _revert(returndata);\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            assembly (\"memory-safe\") {\n                revert(add(returndata, 0x20), mload(returndata))\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Arrays.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Arrays.sol)\n// This file was procedurally generated from scripts/generate/templates/Arrays.js.\n\npragma solidity ^0.8.20;\n\nimport {Comparators} from \"./Comparators.sol\";\nimport {SlotDerivation} from \"./SlotDerivation.sol\";\nimport {StorageSlot} from \"./StorageSlot.sol\";\nimport {Math} from \"./math/Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary Arrays {\n    using SlotDerivation for bytes32;\n    using StorageSlot for bytes32;\n\n    /**\n     * @dev Sort an array of uint256 (in memory) following the provided comparator function.\n     *\n     * This function does the sorting \"in place\", meaning that it overrides the input. The object is returned for\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\n     *\n     * NOTE: this function's cost is `O(n · log(n))` in average and `O(n²)` in the worst case, with n the length of the\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\n     * consume more gas than is available in a block, leading to potential DoS.\n     *\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\n     */\n    function sort(\n        uint256[] memory array,\n        function(uint256, uint256) pure returns (bool) comp\n    ) internal pure returns (uint256[] memory) {\n        _quickSort(_begin(array), _end(array), comp);\n        return array;\n    }\n\n    /**\n     * @dev Variant of {sort} that sorts an array of uint256 in increasing order.\n     */\n    function sort(uint256[] memory array) internal pure returns (uint256[] memory) {\n        sort(array, Comparators.lt);\n        return array;\n    }\n\n    /**\n     * @dev Sort an array of address (in memory) following the provided comparator function.\n     *\n     * This function does the sorting \"in place\", meaning that it overrides the input. The object is returned for\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\n     *\n     * NOTE: this function's cost is `O(n · log(n))` in average and `O(n²)` in the worst case, with n the length of the\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\n     * consume more gas than is available in a block, leading to potential DoS.\n     *\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\n     */\n    function sort(\n        address[] memory array,\n        function(address, address) pure returns (bool) comp\n    ) internal pure returns (address[] memory) {\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\n        return array;\n    }\n\n    /**\n     * @dev Variant of {sort} that sorts an array of address in increasing order.\n     */\n    function sort(address[] memory array) internal pure returns (address[] memory) {\n        sort(_castToUint256Array(array), Comparators.lt);\n        return array;\n    }\n\n    /**\n     * @dev Sort an array of bytes32 (in memory) following the provided comparator function.\n     *\n     * This function does the sorting \"in place\", meaning that it overrides the input. The object is returned for\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\n     *\n     * NOTE: this function's cost is `O(n · log(n))` in average and `O(n²)` in the worst case, with n the length of the\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\n     * consume more gas than is available in a block, leading to potential DoS.\n     *\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\n     */\n    function sort(\n        bytes32[] memory array,\n        function(bytes32, bytes32) pure returns (bool) comp\n    ) internal pure returns (bytes32[] memory) {\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\n        return array;\n    }\n\n    /**\n     * @dev Variant of {sort} that sorts an array of bytes32 in increasing order.\n     */\n    function sort(bytes32[] memory array) internal pure returns (bytes32[] memory) {\n        sort(_castToUint256Array(array), Comparators.lt);\n        return array;\n    }\n\n    /**\n     * @dev Performs a quick sort of a segment of memory. The segment sorted starts at `begin` (inclusive), and stops\n     * at end (exclusive). Sorting follows the `comp` comparator.\n     *\n     * Invariant: `begin <= end`. This is the case when initially called by {sort} and is preserved in subcalls.\n     *\n     * IMPORTANT: Memory locations between `begin` and `end` are not validated/zeroed. This function should\n     * be used only if the limits are within a memory array.\n     */\n    function _quickSort(uint256 begin, uint256 end, function(uint256, uint256) pure returns (bool) comp) private pure {\n        unchecked {\n            if (end - begin < 0x40) return;\n\n            // Use first element as pivot\n            uint256 pivot = _mload(begin);\n            // Position where the pivot should be at the end of the loop\n            uint256 pos = begin;\n\n            for (uint256 it = begin + 0x20; it < end; it += 0x20) {\n                if (comp(_mload(it), pivot)) {\n                    // If the value stored at the iterator's position comes before the pivot, we increment the\n                    // position of the pivot and move the value there.\n                    pos += 0x20;\n                    _swap(pos, it);\n                }\n            }\n\n            _swap(begin, pos); // Swap pivot into place\n            _quickSort(begin, pos, comp); // Sort the left side of the pivot\n            _quickSort(pos + 0x20, end, comp); // Sort the right side of the pivot\n        }\n    }\n\n    /**\n     * @dev Pointer to the memory location of the first element of `array`.\n     */\n    function _begin(uint256[] memory array) private pure returns (uint256 ptr) {\n        assembly (\"memory-safe\") {\n            ptr := add(array, 0x20)\n        }\n    }\n\n    /**\n     * @dev Pointer to the memory location of the first memory word (32bytes) after `array`. This is the memory word\n     * that comes just after the last element of the array.\n     */\n    function _end(uint256[] memory array) private pure returns (uint256 ptr) {\n        unchecked {\n            return _begin(array) + array.length * 0x20;\n        }\n    }\n\n    /**\n     * @dev Load memory word (as a uint256) at location `ptr`.\n     */\n    function _mload(uint256 ptr) private pure returns (uint256 value) {\n        assembly {\n            value := mload(ptr)\n        }\n    }\n\n    /**\n     * @dev Swaps the elements memory location `ptr1` and `ptr2`.\n     */\n    function _swap(uint256 ptr1, uint256 ptr2) private pure {\n        assembly {\n            let value1 := mload(ptr1)\n            let value2 := mload(ptr2)\n            mstore(ptr1, value2)\n            mstore(ptr2, value1)\n        }\n    }\n\n    /// @dev Helper: low level cast address memory array to uint256 memory array\n    function _castToUint256Array(address[] memory input) private pure returns (uint256[] memory output) {\n        assembly {\n            output := input\n        }\n    }\n\n    /// @dev Helper: low level cast bytes32 memory array to uint256 memory array\n    function _castToUint256Array(bytes32[] memory input) private pure returns (uint256[] memory output) {\n        assembly {\n            output := input\n        }\n    }\n\n    /// @dev Helper: low level cast address comp function to uint256 comp function\n    function _castToUint256Comp(\n        function(address, address) pure returns (bool) input\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\n        assembly {\n            output := input\n        }\n    }\n\n    /// @dev Helper: low level cast bytes32 comp function to uint256 comp function\n    function _castToUint256Comp(\n        function(bytes32, bytes32) pure returns (bool) input\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\n        assembly {\n            output := input\n        }\n    }\n\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * NOTE: The `array` is expected to be sorted in ascending order, and to\n     * contain no repeated elements.\n     *\n     * IMPORTANT: Deprecated. This implementation behaves as {lowerBound} but lacks\n     * support for repeated elements in the array. The {lowerBound} function should\n     * be used instead.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeAccess(array, mid).value > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n\n    /**\n     * @dev Searches an `array` sorted in ascending order and returns the first\n     * index that contains a value greater or equal than `element`. If no such index\n     * exists (i.e. all values in the array are strictly less than `element`), the array\n     * length is returned. Time complexity O(log n).\n     *\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/lower_bound[lower_bound].\n     */\n    function lowerBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeAccess(array, mid).value < element) {\n                // this cannot overflow because mid < high\n                unchecked {\n                    low = mid + 1;\n                }\n            } else {\n                high = mid;\n            }\n        }\n\n        return low;\n    }\n\n    /**\n     * @dev Searches an `array` sorted in ascending order and returns the first\n     * index that contains a value strictly greater than `element`. If no such index\n     * exists (i.e. all values in the array are strictly less than `element`), the array\n     * length is returned. Time complexity O(log n).\n     *\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/upper_bound[upper_bound].\n     */\n    function upperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeAccess(array, mid).value > element) {\n                high = mid;\n            } else {\n                // this cannot overflow because mid < high\n                unchecked {\n                    low = mid + 1;\n                }\n            }\n        }\n\n        return low;\n    }\n\n    /**\n     * @dev Same as {lowerBound}, but with an array in memory.\n     */\n    function lowerBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeMemoryAccess(array, mid) < element) {\n                // this cannot overflow because mid < high\n                unchecked {\n                    low = mid + 1;\n                }\n            } else {\n                high = mid;\n            }\n        }\n\n        return low;\n    }\n\n    /**\n     * @dev Same as {upperBound}, but with an array in memory.\n     */\n    function upperBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeMemoryAccess(array, mid) > element) {\n                high = mid;\n            } else {\n                // this cannot overflow because mid < high\n                unchecked {\n                    low = mid + 1;\n                }\n            }\n        }\n\n        return low;\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\n        bytes32 slot;\n        assembly (\"memory-safe\") {\n            slot := arr.slot\n        }\n        return slot.deriveArray().offset(pos).getAddressSlot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\n        bytes32 slot;\n        assembly (\"memory-safe\") {\n            slot := arr.slot\n        }\n        return slot.deriveArray().offset(pos).getBytes32Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\n        bytes32 slot;\n        assembly (\"memory-safe\") {\n            slot := arr.slot\n        }\n        return slot.deriveArray().offset(pos).getUint256Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(bytes[] storage arr, uint256 pos) internal pure returns (StorageSlot.BytesSlot storage) {\n        bytes32 slot;\n        assembly (\"memory-safe\") {\n            slot := arr.slot\n        }\n        return slot.deriveArray().offset(pos).getBytesSlot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(string[] storage arr, uint256 pos) internal pure returns (StorageSlot.StringSlot storage) {\n        bytes32 slot;\n        assembly (\"memory-safe\") {\n            slot := arr.slot\n        }\n        return slot.deriveArray().offset(pos).getStringSlot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(bytes32[] memory arr, uint256 pos) internal pure returns (bytes32 res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(bytes[] memory arr, uint256 pos) internal pure returns (bytes memory res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(string[] memory arr, uint256 pos) internal pure returns (string memory res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\n     *\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\n     */\n    function unsafeSetLength(address[] storage array, uint256 len) internal {\n        assembly (\"memory-safe\") {\n            sstore(array.slot, len)\n        }\n    }\n\n    /**\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\n     *\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\n     */\n    function unsafeSetLength(bytes32[] storage array, uint256 len) internal {\n        assembly (\"memory-safe\") {\n            sstore(array.slot, len)\n        }\n    }\n\n    /**\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\n     *\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\n     */\n    function unsafeSetLength(uint256[] storage array, uint256 len) internal {\n        assembly (\"memory-safe\") {\n            sstore(array.slot, len)\n        }\n    }\n\n    /**\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\n     *\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\n     */\n    function unsafeSetLength(bytes[] storage array, uint256 len) internal {\n        assembly (\"memory-safe\") {\n            sstore(array.slot, len)\n        }\n    }\n\n    /**\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\n     *\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\n     */\n    function unsafeSetLength(string[] storage array, uint256 len) internal {\n        assembly (\"memory-safe\") {\n            sstore(array.slot, len)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Comparators.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Comparators.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides a set of functions to compare values.\n *\n * _Available since v5.1._\n */\nlibrary Comparators {\n    function lt(uint256 a, uint256 b) internal pure returns (bool) {\n        return a < b;\n    }\n\n    function gt(uint256 a, uint256 b) internal pure returns (bool) {\n        return a > b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\nimport {Panic} from \"../Panic.sol\";\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Return the 512-bit addition of two uint256.\n     *\n     * The result is stored in two 256 variables such that sum = high * 2²⁵⁶ + low.\n     */\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\n        assembly (\"memory-safe\") {\n            low := add(a, b)\n            high := lt(low, a)\n        }\n    }\n\n    /**\n     * @dev Return the 512-bit multiplication of two uint256.\n     *\n     * The result is stored in two 256 variables such that product = high * 2²⁵⁶ + low.\n     */\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = high * 2²⁵⁶ + low.\n        assembly (\"memory-safe\") {\n            let mm := mulmod(a, b, not(0))\n            low := mul(a, b)\n            high := sub(sub(mm, low), lt(mm, low))\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a + b;\n            success = c >= a;\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a - b;\n            success = c <= a;\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a * b;\n            assembly (\"memory-safe\") {\n                // Only true when the multiplication doesn't overflow\n                // (c / a == b) || (a == 0)\n                success := or(eq(div(c, a), b), iszero(a))\n            }\n            // equivalent to: success ? c : 0\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            success = b > 0;\n            assembly (\"memory-safe\") {\n                // The `DIV` opcode returns zero when the denominator is 0.\n                result := div(a, b)\n            }\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            success = b > 0;\n            assembly (\"memory-safe\") {\n                // The `MOD` opcode returns zero when the denominator is 0.\n                result := mod(a, b)\n            }\n        }\n    }\n\n    /**\n     * @dev Unsigned saturating addition, bounds to `2²⁵⁶ - 1` instead of overflowing.\n     */\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        (bool success, uint256 result) = tryAdd(a, b);\n        return ternary(success, result, type(uint256).max);\n    }\n\n    /**\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\n     */\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        (, uint256 result) = trySub(a, b);\n        return result;\n    }\n\n    /**\n     * @dev Unsigned saturating multiplication, bounds to `2²⁵⁶ - 1` instead of overflowing.\n     */\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        (bool success, uint256 result) = tryMul(a, b);\n        return ternary(success, result, type(uint256).max);\n    }\n\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n\n        // The following calculation ensures accurate ceiling division without overflow.\n        // Since a is non-zero, (a - 1) / b will not overflow.\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\n        // when a = type(uint256).max and b = 1.\n        unchecked {\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\n        }\n    }\n\n    /**\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     *\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            (uint256 high, uint256 low) = mul512(x, y);\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (high == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return low / denominator;\n            }\n\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\n            if (denominator <= high) {\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [high low].\n            uint256 remainder;\n            assembly (\"memory-safe\") {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                high := sub(high, gt(remainder, low))\n                low := sub(low, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly (\"memory-safe\") {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [high low] by twos.\n                low := div(low, twos)\n\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from high into low.\n            low |= high * twos;\n\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and high\n            // is no longer required.\n            result = low * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\n    }\n\n    /**\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\n     */\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\n        unchecked {\n            (uint256 high, uint256 low) = mul512(x, y);\n            if (high >= 1 << n) {\n                Panic.panic(Panic.UNDER_OVERFLOW);\n            }\n            return (high << (256 - n)) | (low >> n);\n        }\n    }\n\n    /**\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\n     */\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\n    }\n\n    /**\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\n     *\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\n     *\n     * If the input value is not inversible, 0 is returned.\n     *\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\n     */\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\n        unchecked {\n            if (n == 0) return 0;\n\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\n            // ax + ny = 1\n            // ax = 1 + (-y)n\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\n\n            // If the remainder is 0 the gcd is n right away.\n            uint256 remainder = a % n;\n            uint256 gcd = n;\n\n            // Therefore the initial coefficients are:\n            // ax + ny = gcd(a, n) = n\n            // 0a + 1n = n\n            int256 x = 0;\n            int256 y = 1;\n\n            while (remainder != 0) {\n                uint256 quotient = gcd / remainder;\n\n                (gcd, remainder) = (\n                    // The old remainder is the next gcd to try.\n                    remainder,\n                    // Compute the next remainder.\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\n                    // where gcd is at most n (capped to type(uint256).max)\n                    gcd - remainder * quotient\n                );\n\n                (x, y) = (\n                    // Increment the coefficient of a.\n                    y,\n                    // Decrement the coefficient of n.\n                    // Can overflow, but the result is casted to uint256 so that the\n                    // next value of y is \"wrapped around\" to a value between 0 and n - 1.\n                    x - y * int256(quotient)\n                );\n            }\n\n            if (gcd != 1) return 0; // No inverse exists.\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\n        }\n    }\n\n    /**\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\n     *\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\n     *\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\n     */\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\n        unchecked {\n            return Math.modExp(a, p - 2, p);\n        }\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\n     *\n     * Requirements:\n     * - modulus can't be zero\n     * - underlying staticcall to precompile must succeed\n     *\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\n     * interpreted as 0.\n     */\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\n        (bool success, uint256 result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\n     * to operate modulo 0 or if the underlying precompile reverted.\n     *\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\n     * of a revert, but the result may be incorrectly interpreted as 0.\n     */\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\n        if (m == 0) return (false, 0);\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            // | Offset    | Content    | Content (Hex)                                                      |\n            // |-----------|------------|--------------------------------------------------------------------|\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\n            mstore(ptr, 0x20)\n            mstore(add(ptr, 0x20), 0x20)\n            mstore(add(ptr, 0x40), 0x20)\n            mstore(add(ptr, 0x60), b)\n            mstore(add(ptr, 0x80), e)\n            mstore(add(ptr, 0xa0), m)\n\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\n            // so we can use the memory scratch space located at offset 0.\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\n            result := mload(0x00)\n        }\n    }\n\n    /**\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\n     */\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\n        (bool success, bytes memory result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\n     */\n    function tryModExp(\n        bytes memory b,\n        bytes memory e,\n        bytes memory m\n    ) internal view returns (bool success, bytes memory result) {\n        if (_zeroBytes(m)) return (false, new bytes(0));\n\n        uint256 mLen = m.length;\n\n        // Encode call args in result and move the free memory pointer\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\n\n        assembly (\"memory-safe\") {\n            let dataPtr := add(result, 0x20)\n            // Write result on top of args to avoid allocating extra memory.\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\n            // Overwrite the length.\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\n            mstore(result, mLen)\n            // Set the memory pointer after the returned data.\n            mstore(0x40, add(dataPtr, mLen))\n        }\n    }\n\n    /**\n     * @dev Returns whether the provided byte array is zero.\n     */\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\n        for (uint256 i = 0; i < byteArray.length; ++i) {\n            if (byteArray[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\n     * using integer operations.\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        unchecked {\n            // Take care of easy edge cases when a == 0 or a == 1\n            if (a <= 1) {\n                return a;\n            }\n\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\n            //\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\n            // bigger than any uint256.\n            //\n            // By noticing that\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\n            // to the msb function.\n            uint256 aa = a;\n            uint256 xn = 1;\n\n            if (aa >= (1 << 128)) {\n                aa >>= 128;\n                xn <<= 64;\n            }\n            if (aa >= (1 << 64)) {\n                aa >>= 64;\n                xn <<= 32;\n            }\n            if (aa >= (1 << 32)) {\n                aa >>= 32;\n                xn <<= 16;\n            }\n            if (aa >= (1 << 16)) {\n                aa >>= 16;\n                xn <<= 8;\n            }\n            if (aa >= (1 << 8)) {\n                aa >>= 8;\n                xn <<= 4;\n            }\n            if (aa >= (1 << 4)) {\n                aa >>= 4;\n                xn <<= 2;\n            }\n            if (aa >= (1 << 2)) {\n                xn <<= 1;\n            }\n\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\n            //\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\n            // This is going to be our x_0 (and ε_0)\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\n\n            // From here, Newton's method give us:\n            // x_{n+1} = (x_n + a / x_n) / 2\n            //\n            // One should note that:\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\n            //              = ((x_n² + a) / (2 * x_n))² - a\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\n            //              = (x_n² - a)² / (2 * x_n)²\n            //              = ((x_n² - a) / (2 * x_n))²\n            //              ≥ 0\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\n            //\n            // This gives us the proof of quadratic convergence of the sequence:\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\n            //         = | ε_n² / (2 * x_n) |\n            //         = ε_n² / | (2 * x_n) |\n            //\n            // For the first iteration, we have a special case where x_0 is known:\n            // ε_1 = ε_0² / | (2 * x_0) |\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\n            //     ≤ 2**(e-3) / 3\n            //     ≤ 2**(e-3-log2(3))\n            //     ≤ 2**(e-4.5)\n            //\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\n            //         ≤ 2**(2*e-2*k) / 2**e\n            //         ≤ 2**(e-2*k)\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\n\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\n            // sqrt(a) or sqrt(a) + 1.\n            return xn - SafeCast.toUint(xn > a / xn);\n        }\n    }\n\n    /**\n     * @dev Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 x) internal pure returns (uint256 r) {\n        // If value has upper 128 bits set, log2 result is at least 128\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\n        // If upper 64 bits of 128-bit half set, add 64 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\n        // If upper 32 bits of 64-bit half set, add 32 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\n        // If upper 16 bits of 32-bit half set, add 16 to result\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\n        // If upper 8 bits of 16-bit half set, add 8 to result\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\n        // If upper 4 bits of 8-bit half set, add 4 to result\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\n\n        // Shifts value right by the current result and use it as an index into this lookup table:\n        //\n        // | x (4 bits) |  index  | table[index] = MSB position |\n        // |------------|---------|-----------------------------|\n        // |    0000    |    0    |        table[0] = 0         |\n        // |    0001    |    1    |        table[1] = 0         |\n        // |    0010    |    2    |        table[2] = 1         |\n        // |    0011    |    3    |        table[3] = 1         |\n        // |    0100    |    4    |        table[4] = 2         |\n        // |    0101    |    5    |        table[5] = 2         |\n        // |    0110    |    6    |        table[6] = 2         |\n        // |    0111    |    7    |        table[7] = 2         |\n        // |    1000    |    8    |        table[8] = 3         |\n        // |    1001    |    9    |        table[9] = 3         |\n        // |    1010    |   10    |        table[10] = 3        |\n        // |    1011    |   11    |        table[11] = 3        |\n        // |    1100    |   12    |        table[12] = 3        |\n        // |    1101    |   13    |        table[13] = 3        |\n        // |    1110    |   14    |        table[14] = 3        |\n        // |    1111    |   15    |        table[15] = 3        |\n        //\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\n        assembly (\"memory-safe\") {\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 x) internal pure returns (uint256 r) {\n        // If value has upper 128 bits set, log2 result is at least 128\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\n        // If upper 64 bits of 128-bit half set, add 64 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\n        // If upper 32 bits of 64-bit half set, add 32 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\n        // If upper 16 bits of 32-bit half set, add 16 to result\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n\n    /**\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\n     */\n    function toUint(bool b) internal pure returns (uint256 u) {\n        assembly (\"memory-safe\") {\n            u := iszero(iszero(b))\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Panic.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Helper library for emitting standardized panic codes.\n *\n * ```solidity\n * contract Example {\n *      using Panic for uint256;\n *\n *      // Use any of the declared internal constants\n *      function foo() { Panic.GENERIC.panic(); }\n *\n *      // Alternatively\n *      function foo() { Panic.panic(Panic.GENERIC); }\n * }\n * ```\n *\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\n *\n * _Available since v5.1._\n */\n// slither-disable-next-line unused-state\nlibrary Panic {\n    /// @dev generic / unspecified error\n    uint256 internal constant GENERIC = 0x00;\n    /// @dev used by the assert() builtin\n    uint256 internal constant ASSERT = 0x01;\n    /// @dev arithmetic underflow or overflow\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\n    /// @dev division or modulo by zero\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\n    /// @dev enum conversion error\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\n    /// @dev invalid encoding in storage\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\n    /// @dev empty array pop\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\n    /// @dev array out of bounds access\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\n    /// @dev resource error (too large allocation or too large array)\n    uint256 internal constant RESOURCE_ERROR = 0x41;\n    /// @dev calling invalid internal function\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\n\n    /// @dev Reverts with a panic code. Recommended to use with\n    /// the internal constants with predefined codes.\n    function panic(uint256 code) internal pure {\n        assembly (\"memory-safe\") {\n            mstore(0x00, 0x4e487b71)\n            mstore(0x20, code)\n            revert(0x1c, 0x24)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/SlotDerivation.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/SlotDerivation.sol)\n// This file was procedurally generated from scripts/generate/templates/SlotDerivation.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for computing storage (and transient storage) locations from namespaces and deriving slots\n * corresponding to standard patterns. The derivation method for array and mapping matches the storage layout used by\n * the solidity language / compiler.\n *\n * See https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays[Solidity docs for mappings and dynamic arrays.].\n *\n * Example usage:\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using StorageSlot for bytes32;\n *     using SlotDerivation for bytes32;\n *\n *     // Declare a namespace\n *     string private constant _NAMESPACE = \"<namespace>\"; // eg. OpenZeppelin.Slot\n *\n *     function setValueInNamespace(uint256 key, address newValue) internal {\n *         _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value = newValue;\n *     }\n *\n *     function getValueInNamespace(uint256 key) internal view returns (address) {\n *         return _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value;\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {StorageSlot}.\n *\n * NOTE: This library provides a way to manipulate storage locations in a non-standard way. Tooling for checking\n * upgrade safety will ignore the slots accessed through this library.\n *\n * _Available since v5.1._\n */\nlibrary SlotDerivation {\n    /**\n     * @dev Derive an ERC-7201 slot from a string (namespace).\n     */\n    function erc7201Slot(string memory namespace) internal pure returns (bytes32 slot) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, sub(keccak256(add(namespace, 0x20), mload(namespace)), 1))\n            slot := and(keccak256(0x00, 0x20), not(0xff))\n        }\n    }\n\n    /**\n     * @dev Add an offset to a slot to get the n-th element of a structure or an array.\n     */\n    function offset(bytes32 slot, uint256 pos) internal pure returns (bytes32 result) {\n        unchecked {\n            return bytes32(uint256(slot) + pos);\n        }\n    }\n\n    /**\n     * @dev Derive the location of the first element in an array from the slot where the length is stored.\n     */\n    function deriveArray(bytes32 slot) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, slot)\n            result := keccak256(0x00, 0x20)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, address key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, and(key, shr(96, not(0))))\n            mstore(0x20, slot)\n            result := keccak256(0x00, 0x40)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, bool key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, iszero(iszero(key)))\n            mstore(0x20, slot)\n            result := keccak256(0x00, 0x40)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, bytes32 key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, key)\n            mstore(0x20, slot)\n            result := keccak256(0x00, 0x40)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, uint256 key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, key)\n            mstore(0x20, slot)\n            result := keccak256(0x00, 0x40)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, int256 key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, key)\n            mstore(0x20, slot)\n            result := keccak256(0x00, 0x40)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, string memory key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            let length := mload(key)\n            let begin := add(key, 0x20)\n            let end := add(begin, length)\n            let cache := mload(end)\n            mstore(end, slot)\n            result := keccak256(begin, add(length, 0x20))\n            mstore(end, cache)\n        }\n    }\n\n    /**\n     * @dev Derive the location of a mapping element from the key.\n     */\n    function deriveMapping(bytes32 slot, bytes memory key) internal pure returns (bytes32 result) {\n        assembly (\"memory-safe\") {\n            let length := mload(key)\n            let begin := add(key, 0x20)\n            let end := add(begin, length)\n            let cache := mload(end)\n            mstore(end, slot)\n            result := keccak256(begin, add(length, 0x20))\n            mstore(end, cache)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC-1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct Int256Slot {\n        int256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\n     */\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/structs/EnumerableMap.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\n\npragma solidity ^0.8.20;\n\nimport {EnumerableSet} from \"./EnumerableSet.sol\";\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n * - Map can be cleared (all entries removed) in O(n).\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * The following map types are supported:\n *\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\n * - `uint256 -> bytes32` (`UintToBytes32Map`) since v5.1.0\n * - `address -> address` (`AddressToAddressMap`) since v5.1.0\n * - `address -> bytes32` (`AddressToBytes32Map`) since v5.1.0\n * - `bytes32 -> address` (`Bytes32ToAddressMap`) since v5.1.0\n * - `bytes -> bytes` (`BytesToBytesMap`) since v5.4.0\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableMap.\n * ====\n */\nlibrary EnumerableMap {\n    using EnumerableSet for *;\n\n    // To implement this library for multiple types with as little code repetition as possible, we write it in\n    // terms of a generic Map type with bytes32 keys and values. The Map implementation uses private functions,\n    // and user-facing implementations such as `UintToAddressMap` are just wrappers around the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit in bytes32.\n\n    /**\n     * @dev Query for a nonexistent map key.\n     */\n    error EnumerableMapNonexistentKey(bytes32 key);\n\n    struct Bytes32ToBytes32Map {\n        // Storage of keys\n        EnumerableSet.Bytes32Set _keys;\n        mapping(bytes32 key => bytes32) _values;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\n        map._values[key] = value;\n        return map._keys.add(key);\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\n        delete map._values[key];\n        return map._keys.remove(key);\n    }\n\n    /**\n     * @dev Removes all the entries from a map. O(n).\n     *\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\n     * function uncallable if the map grows to the point where clearing it consumes too much gas to fit in a block.\n     */\n    function clear(Bytes32ToBytes32Map storage map) internal {\n        uint256 len = length(map);\n        for (uint256 i = 0; i < len; ++i) {\n            delete map._values[map._keys.at(i)];\n        }\n        map._keys.clear();\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\n        return map._keys.contains(key);\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\n        return map._keys.length();\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32 key, bytes32 value) {\n        bytes32 atKey = map._keys.at(index);\n        return (atKey, map._values[atKey]);\n    }\n\n    /**\n     * @dev Tries to return the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool exists, bytes32 value) {\n        bytes32 val = map._values[key];\n        if (val == bytes32(0)) {\n            return (contains(map, key), bytes32(0));\n        } else {\n            return (true, val);\n        }\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\n        bytes32 value = map._values[key];\n        if (value == 0 && !contains(map, key)) {\n            revert EnumerableMapNonexistentKey(key);\n        }\n        return value;\n    }\n\n    /**\n     * @dev Returns an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\n        return map._keys.values();\n    }\n\n    /**\n     * @dev Returns an array containing a slice of the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(\n        Bytes32ToBytes32Map storage map,\n        uint256 start,\n        uint256 end\n    ) internal view returns (bytes32[] memory) {\n        return map._keys.values(start, end);\n    }\n\n    // UintToUintMap\n\n    struct UintToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\n        return set(map._inner, bytes32(key), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Removes all the entries from a map. O(n).\n     *\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\n     * gas to fit in a block.\n     */\n    function clear(UintToUintMap storage map) internal {\n        clear(map._inner);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256 key, uint256 value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (uint256(atKey), uint256(val));\n    }\n\n    /**\n     * @dev Tries to return the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool exists, uint256 value) {\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(key));\n        return (success, uint256(val));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(key)));\n    }\n\n    /**\n     * @dev Returns an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        uint256[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Returns an array containing a slice of the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(UintToUintMap storage map, uint256 start, uint256 end) internal view returns (uint256[] memory) {\n        bytes32[] memory store = keys(map._inner, start, end);\n        uint256[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Removes all the entries from a map. O(n).\n     *\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\n     * gas to fit in a block.\n     */\n    function clear(UintToAddressMap storage map) internal {\n        clear(map._inner);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256 key, address value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (uint256(atKey), address(uint160(uint256(val))));\n    }\n\n    /**\n     * @dev Tries to return the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool exists, address value) {\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(val))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Returns an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        uint256[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Returns an array containing a slice of the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(UintToAddressMap storage map, uint256 start, uint256 end) internal view returns (uint256[] memory) {\n        bytes32[] memory store = keys(map._inner, start, end);\n        uint256[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintToBytes32Map\n\n    struct UintToBytes32Map {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToBytes32Map storage map, uint256 key, bytes32 value) internal returns (bool) {\n        return set(map._inner, bytes32(key), value);\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToBytes32Map storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Removes all the entries from a map. O(n).\n     *\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\n     * gas to fit in a block.\n     */\n    function clear(UintToBytes32Map storage map) internal {\n        clear(map._inner);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToBytes32Map storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToBytes32Map storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToBytes32Map storage map, uint256 index) internal view returns (uint256 key, bytes32 value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (uint256(atKey), val);\n    }\n\n    /**\n     * @dev Tries to return the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToBytes32Map storage map, uint256 key) internal view returns (bool exists, bytes32 value) {\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(key));\n        return (success, val);\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToBytes32Map storage map, uint256 key) internal view returns (bytes32) {\n        return get(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(UintToBytes32Map storage map) internal view returns (uint256[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        uint256[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Returns an array containing a slice of the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(UintToBytes32Map storage map, uint256 start, uint256 end) internal view returns (uint256[] memory) {\n        bytes32[] memory store = keys(map._inner, start, end);\n        uint256[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressToUintMap\n\n    struct AddressToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\n        return remove(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Removes all the entries from a map. O(n).\n     *\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\n     * gas to fit in a block.\n     */\n    function clear(AddressToUintMap storage map) internal {\n        clear(map._inner);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\n        return contains(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address key, uint256 value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (address(uint160(uint256(atKey))), uint256(val));\n    }\n\n    /**\n     * @dev Tries to return the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool exists, uint256 value) {\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(uint256(uint160(key))));\n        return (success, uint256(val));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\n    }\n\n    /**\n     * @dev Returns an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        address[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Returns an array containing a slice of the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(AddressToUintMap storage map, uint256 start, uint256 end) internal view returns (address[] memory) {\n        bytes32[] memory store = keys(map._inner, start, end);\n        address[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressToAddressMap\n\n    struct AddressToAddressMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(AddressToAddressMap storage map, address key, address value) internal returns (bool) {\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(AddressToAddressMap storage map, address key) internal returns (bool) {\n        return remove(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Removes all the entries from a map. O(n).\n     *\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\n     * gas to fit in a block.\n     */\n    function clear(AddressToAddressMap storage map) internal {\n        clear(map._inner);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(AddressToAddressMap storage map, address key) internal view returns (bool) {\n        return contains(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(AddressToAddressMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressToAddressMap storage map, uint256 index) internal view returns (address key, address value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (address(uint160(uint256(atKey))), address(uint160(uint256(val))));\n    }\n\n    /**\n     * @dev Tries to return the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(AddressToAddressMap storage map, address key) internal view returns (bool exists, address value) {\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(uint256(uint160(key))));\n        return (success, address(uint160(uint256(val))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(AddressToAddressMap storage map, address key) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, bytes32(uint256(uint160(key)))))));\n    }\n\n    /**\n     * @dev Returns an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(AddressToAddressMap storage map) internal view returns (address[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        address[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Returns an array containing a slice of the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(\n        AddressToAddressMap storage map,\n        uint256 start,\n        uint256 end\n    ) internal view returns (address[] memory) {\n        bytes32[] memory store = keys(map._inner, start, end);\n        address[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressToBytes32Map\n\n    struct AddressToBytes32Map {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(AddressToBytes32Map storage map, address key, bytes32 value) internal returns (bool) {\n        return set(map._inner, bytes32(uint256(uint160(key))), value);\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(AddressToBytes32Map storage map, address key) internal returns (bool) {\n        return remove(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Removes all the entries from a map. O(n).\n     *\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\n     * gas to fit in a block.\n     */\n    function clear(AddressToBytes32Map storage map) internal {\n        clear(map._inner);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(AddressToBytes32Map storage map, address key) internal view returns (bool) {\n        return contains(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(AddressToBytes32Map storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressToBytes32Map storage map, uint256 index) internal view returns (address key, bytes32 value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (address(uint160(uint256(atKey))), val);\n    }\n\n    /**\n     * @dev Tries to return the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(AddressToBytes32Map storage map, address key) internal view returns (bool exists, bytes32 value) {\n        (bool success, bytes32 val) = tryGet(map._inner, bytes32(uint256(uint160(key))));\n        return (success, val);\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(AddressToBytes32Map storage map, address key) internal view returns (bytes32) {\n        return get(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(AddressToBytes32Map storage map) internal view returns (address[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        address[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Returns an array containing a slice of the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(\n        AddressToBytes32Map storage map,\n        uint256 start,\n        uint256 end\n    ) internal view returns (address[] memory) {\n        bytes32[] memory store = keys(map._inner, start, end);\n        address[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // Bytes32ToUintMap\n\n    struct Bytes32ToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\n        return set(map._inner, key, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\n        return remove(map._inner, key);\n    }\n\n    /**\n     * @dev Removes all the entries from a map. O(n).\n     *\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\n     * gas to fit in a block.\n     */\n    function clear(Bytes32ToUintMap storage map) internal {\n        clear(map._inner);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\n        return contains(map._inner, key);\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32 key, uint256 value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (atKey, uint256(val));\n    }\n\n    /**\n     * @dev Tries to return the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool exists, uint256 value) {\n        (bool success, bytes32 val) = tryGet(map._inner, key);\n        return (success, uint256(val));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\n        return uint256(get(map._inner, key));\n    }\n\n    /**\n     * @dev Returns an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        bytes32[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Returns an array containing a slice of the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(Bytes32ToUintMap storage map, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = keys(map._inner, start, end);\n        bytes32[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // Bytes32ToAddressMap\n\n    struct Bytes32ToAddressMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(Bytes32ToAddressMap storage map, bytes32 key, address value) internal returns (bool) {\n        return set(map._inner, key, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\n        return remove(map._inner, key);\n    }\n\n    /**\n     * @dev Removes all the entries from a map. O(n).\n     *\n     * WARNING: This function has an unbounded cost that scales with map size. Developers should keep in mind that\n     * using it may render the function uncallable if the map grows to the point where clearing it consumes too much\n     * gas to fit in a block.\n     */\n    function clear(Bytes32ToAddressMap storage map) internal {\n        clear(map._inner);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\n        return contains(map._inner, key);\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32 key, address value) {\n        (bytes32 atKey, bytes32 val) = at(map._inner, index);\n        return (atKey, address(uint160(uint256(val))));\n    }\n\n    /**\n     * @dev Tries to return the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool exists, address value) {\n        (bool success, bytes32 val) = tryGet(map._inner, key);\n        return (success, address(uint160(uint256(val))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, key))));\n    }\n\n    /**\n     * @dev Returns an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(Bytes32ToAddressMap storage map) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        bytes32[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Returns an array containing a slice of the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(\n        Bytes32ToAddressMap storage map,\n        uint256 start,\n        uint256 end\n    ) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = keys(map._inner, start, end);\n        bytes32[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Query for a nonexistent map key.\n     */\n    error EnumerableMapNonexistentBytesKey(bytes key);\n\n    struct BytesToBytesMap {\n        // Storage of keys\n        EnumerableSet.BytesSet _keys;\n        mapping(bytes key => bytes) _values;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(BytesToBytesMap storage map, bytes memory key, bytes memory value) internal returns (bool) {\n        map._values[key] = value;\n        return map._keys.add(key);\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(BytesToBytesMap storage map, bytes memory key) internal returns (bool) {\n        delete map._values[key];\n        return map._keys.remove(key);\n    }\n\n    /**\n     * @dev Removes all the entries from a map. O(n).\n     *\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\n     * function uncallable if the map grows to the point where clearing it consumes too much gas to fit in a block.\n     */\n    function clear(BytesToBytesMap storage map) internal {\n        uint256 len = length(map);\n        for (uint256 i = 0; i < len; ++i) {\n            delete map._values[map._keys.at(i)];\n        }\n        map._keys.clear();\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(BytesToBytesMap storage map, bytes memory key) internal view returns (bool) {\n        return map._keys.contains(key);\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function length(BytesToBytesMap storage map) internal view returns (uint256) {\n        return map._keys.length();\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(\n        BytesToBytesMap storage map,\n        uint256 index\n    ) internal view returns (bytes memory key, bytes memory value) {\n        key = map._keys.at(index);\n        value = map._values[key];\n    }\n\n    /**\n     * @dev Tries to return the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(\n        BytesToBytesMap storage map,\n        bytes memory key\n    ) internal view returns (bool exists, bytes memory value) {\n        value = map._values[key];\n        exists = bytes(value).length != 0 || contains(map, key);\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(BytesToBytesMap storage map, bytes memory key) internal view returns (bytes memory value) {\n        bool exists;\n        (exists, value) = tryGet(map, key);\n        if (!exists) {\n            revert EnumerableMapNonexistentBytesKey(key);\n        }\n    }\n\n    /**\n     * @dev Returns an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(BytesToBytesMap storage map) internal view returns (bytes[] memory) {\n        return map._keys.values();\n    }\n\n    /**\n     * @dev Returns an array containing a slice of the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(BytesToBytesMap storage map, uint256 start, uint256 end) internal view returns (bytes[] memory) {\n        return map._keys.values(start, end);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\nimport {Arrays} from \"../Arrays.sol\";\nimport {Math} from \"../math/Math.sol\";\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n * - Set can be cleared (all elements removed) in O(n).\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * The following types are supported:\n *\n * - `bytes32` (`Bytes32Set`) since v3.3.0\n * - `address` (`AddressSet`) since v3.3.0\n * - `uint256` (`UintSet`) since v3.3.0\n * - `string` (`StringSet`) since v5.4.0\n * - `bytes` (`BytesSet`) since v5.4.0\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes32 value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes all the values from a set. O(n).\n     *\n     * WARNING: This function has an unbounded cost that scales with set size. Developers should keep in mind that\n     * using it may render the function uncallable if the set grows to the point where clearing it consumes too much\n     * gas to fit in a block.\n     */\n    function _clear(Set storage set) private {\n        uint256 len = _length(set);\n        for (uint256 i = 0; i < len; ++i) {\n            delete set._positions[set._values[i]];\n        }\n        Arrays.unsafeSetLength(set._values, 0);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    /**\n     * @dev Return a slice of the set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set, uint256 start, uint256 end) private view returns (bytes32[] memory) {\n        unchecked {\n            end = Math.min(end, _length(set));\n            start = Math.min(start, end);\n\n            uint256 len = end - start;\n            bytes32[] memory result = new bytes32[](len);\n            for (uint256 i = 0; i < len; ++i) {\n                result[i] = Arrays.unsafeAccess(set._values, start + i).value;\n            }\n            return result;\n        }\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Removes all the values from a set. O(n).\n     *\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\n     */\n    function clear(Bytes32Set storage set) internal {\n        _clear(set._inner);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Return a slice of the set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner, start, end);\n        bytes32[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes all the values from a set. O(n).\n     *\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\n     */\n    function clear(AddressSet storage set) internal {\n        _clear(set._inner);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Return a slice of the set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner, start, end);\n        address[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes all the values from a set. O(n).\n     *\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\n     */\n    function clear(UintSet storage set) internal {\n        _clear(set._inner);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Return a slice of the set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner, start, end);\n        uint256[] memory result;\n\n        assembly (\"memory-safe\") {\n            result := store\n        }\n\n        return result;\n    }\n\n    struct StringSet {\n        // Storage of set values\n        string[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(string value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(StringSet storage set, string memory value) internal returns (bool) {\n        if (!contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(StringSet storage set, string memory value) internal returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                string memory lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes all the values from a set. O(n).\n     *\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\n     */\n    function clear(StringSet storage set) internal {\n        uint256 len = length(set);\n        for (uint256 i = 0; i < len; ++i) {\n            delete set._positions[set._values[i]];\n        }\n        Arrays.unsafeSetLength(set._values, 0);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(StringSet storage set, string memory value) internal view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(StringSet storage set) internal view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(StringSet storage set, uint256 index) internal view returns (string memory) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(StringSet storage set) internal view returns (string[] memory) {\n        return set._values;\n    }\n\n    /**\n     * @dev Return a slice of the set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(StringSet storage set, uint256 start, uint256 end) internal view returns (string[] memory) {\n        unchecked {\n            end = Math.min(end, length(set));\n            start = Math.min(start, end);\n\n            uint256 len = end - start;\n            string[] memory result = new string[](len);\n            for (uint256 i = 0; i < len; ++i) {\n                result[i] = Arrays.unsafeAccess(set._values, start + i).value;\n            }\n            return result;\n        }\n    }\n\n    struct BytesSet {\n        // Storage of set values\n        bytes[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(BytesSet storage set, bytes memory value) internal returns (bool) {\n        if (!contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(BytesSet storage set, bytes memory value) internal returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes memory lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes all the values from a set. O(n).\n     *\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\n     */\n    function clear(BytesSet storage set) internal {\n        uint256 len = length(set);\n        for (uint256 i = 0; i < len; ++i) {\n            delete set._positions[set._values[i]];\n        }\n        Arrays.unsafeSetLength(set._values, 0);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(BytesSet storage set, bytes memory value) internal view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(BytesSet storage set) internal view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(BytesSet storage set, uint256 index) internal view returns (bytes memory) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(BytesSet storage set) internal view returns (bytes[] memory) {\n        return set._values;\n    }\n\n    /**\n     * @dev Return a slice of the set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(BytesSet storage set, uint256 start, uint256 end) internal view returns (bytes[] memory) {\n        unchecked {\n            end = Math.min(end, length(set));\n            start = Math.min(start, end);\n\n            uint256 len = end - start;\n            bytes[] memory result = new bytes[](len);\n            for (uint256 i = 0; i < len; ++i) {\n                result[i] = Arrays.unsafeAccess(set._values, start + i).value;\n            }\n            return result;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/external/IWNative.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity >=0.5.0;\n\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\n/// @title Wrapped Native Token Interface\n/// @notice Interface for wrapped native tokens (e.g., WETH, WPOL) that can wrap/unwrap native currency\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\ninterface IWNative is IERC20 {\n    /// @notice Deposit native currency and receive wrapped tokens\n    /// @dev Mints wrapped tokens equivalent to the native currency sent\n    function deposit() external payable;\n    \n    /// @notice Withdraw wrapped tokens and receive native currency\n    /// @dev Burns wrapped tokens and sends equivalent native currency to caller\n    /// @param amount The amount of wrapped tokens to withdraw\n    function withdraw(uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/manager/IGildiManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\n\n/// @title IGildiManager\n/// @notice Interface for the Gildi Manager.\n/// @custom:security-contact security@gildi.io\n/// @author Patrick Fischer (Pathin) > https://pathin.me\ninterface IGildiManager is IERC165 {\n    /// @notice A user share.\n    struct UserShare {\n        /// @notice The user address.\n        address user;\n        /// @notice The number shares owned by the user.\n        uint256 shares;\n    }\n\n    /// @notice A report of the shares owned by a user in a specific time period.\n    struct SharesReport {\n        /// @notice The token ID.\n        uint256 tokenId;\n        /// @notice The start timestamp of the report.\n        uint256 start;\n        /// @notice The end timestamp of the report.\n        uint256 end;\n        /// @notice The total number of shares owned by all users.\n        uint256 totalNumberOfShares;\n        /// @notice The shares owned by each user.\n        UserShare[] userShares;\n        /// @notice Info for Pagination, if there are more results.\n        bool hasMore;\n        /// @notice Next cursor for Pagination.\n        uint256 nextCursor;\n    }\n\n    struct TokenBalance {\n        uint256 tokenId;\n        uint256 amount;\n        uint256 lockedAmount;\n    }\n\n    /// @notice A GILDI RWA release.\n    struct RWARelease {\n        /// @notice The token ID of the release (equal to release id).\n        uint256 tokenId;\n        /// @notice If the release is locked.\n        bool locked;\n        /// @notice When the release was unlocked.\n        uint256 unlockedAt;\n        /// @notice If the release is in the initial sale.\n        bool inInitialSale;\n        /// @notice The total number of shares.\n        uint256 totalShares;\n        /// @notice The number of unassigned shares.\n        uint256 unassignedShares;\n        /// @notice The number of burned shares.\n        uint256 burnedShares;\n        /// @notice The release is deleting.\n        bool deleting;\n        /// @notice The number of shares deleted.\n        uint256 deletedShares;\n        /// @notice The timestamp of the creation.\n        uint256 createdAt;\n    }\n\n    /// @notice Fetches all the release IDs.\n    /// @return An array of all the release IDs.\n    function getAllReleaseIds() external view returns (uint256[] memory);\n\n    /// @notice Create a new release.\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\n    /// @param _amount The amount of the token.\n    /// @param _ownershipTrackingTimePeriod The time period in which we aggregate the shares owned by a user.\n    function createNewRelease(uint256 _releaseId, uint256 _amount, uint256 _ownershipTrackingTimePeriod) external;\n\n    /// @notice Assigns the user shares to a royalty rights release in a batch operation.\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\n    /// @param _sharesBatch The shares to assign.\n    /// @dev The shares are assigned in a batch to prevent gas limit issues.\n    function assignShares(uint256 _releaseId, UserShare[] calldata _sharesBatch) external;\n\n    /// @notice Starts the initial sale of a release.\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\n    function startInitialSale(uint256 _releaseId) external;\n\n    /// @notice Cancels the initial sale of a release.\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\n    function cancelInitialSale(uint256 _releaseId) external;\n\n    /// @notice Ends the initial sale of a release.\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\n    function endInitialSale(uint256 _releaseId) external;\n\n    /// @notice Check if a release exists.\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\n    /// @return True if the release exists, false otherwise.\n    function releaseExists(uint256 _releaseId) external view returns (bool);\n\n    /// @notice Deletes a release in batches.\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\n    /// @param _batchSizeOwners The number of owners to delete in a batch.\n    /// @dev Batch deletion is used to prevent gas limit issues.\n    function batchDeleteRelease(uint256 _releaseId, uint256 _batchSizeOwners) external;\n\n    /// @notice Unlocks a release.\n    /// @param _releaseId The ID of the Royalty Rights Token / release.\n    function unlockRelease(uint256 _releaseId) external;\n\n    /// @notice Deposits royalty rights tokens into the manager.\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\n    /// @param _account The account to deposit the tokens to.\n    /// @param _amount The amount of tokens to deposit.\n    function deposit(uint256 _tokenId, address _account, uint256 _amount) external;\n\n    /// @notice Withdraws royalty rights tokens from the manager.\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\n    /// @param _account The account to withdraw the tokens from.\n    /// @param _amount The amount of tokens to withdraw.\n    function withdraw(uint256 _tokenId, address _account, uint256 _amount) external;\n\n    /// @notice Locks tokens for a user.\n    /// @param _account The account to lock the tokens for.\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\n    /// @param _amountToLock The amount of tokens to lock.\n    function lockTokens(address _account, uint256 _tokenId, uint256 _amountToLock) external;\n\n    /// @notice Unlocks tokens for a user.\n    /// @param _account The account to unlock the tokens for.\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\n    /// @param _amountToUnlock The amount of tokens to unlock.\n    function unlockTokens(address _account, uint256 _tokenId, uint256 _amountToUnlock) external;\n\n    /// @notice Transfers ownership of a release's shares to another user.\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\n    /// @param _from The address of the current owner.\n    /// @param _to The address of the new owner.\n    /// @param _amount The amount of shares to transfer.\n    function transferOwnership(uint256 _tokenId, address _from, address _to, uint256 _amount) external;\n\n    /// @notice Transfers ownership of a release's shares to another user during the initial sale.\n    /// @param _tokenId The ID of the Royalty Rights Token / release.\n    /// @param _from The address of the current owner.\n    /// @param _to The address of the new owner.\n    /// @param _amount The amount of shares to transfer.\n    function transferOwnershipInitialSale(uint256 _tokenId, address _from, address _to, uint256 _amount) external;\n\n    /// @notice Gets a release by its ID.\n    /// @param _releaseId The release ID.\n    /// @return The release.\n    function getReleaseById(uint256 _releaseId) external view returns (RWARelease memory);\n\n    /// @notice Checks if the release is locked.\n    /// @param _releaseId The release ID.\n    /// @return True if the release is locked, false otherwise.\n    function isLocked(uint256 _releaseId) external view returns (bool);\n\n    /// @notice Returns if the release is in the initial sale.\n    /// @param _releaseId The release ID.\n    /// @return True if the release is in the initial sale, false otherwise.\n    function isInInitialSale(uint256 _releaseId) external view returns (bool);\n\n    /// @notice Fetches the available balance of a user for a specific token.\n    /// @param _tokenId The token ID.\n    /// @param _account The account to fetch the balance for.\n    /// @return The available balance of the user for the token.\n    function getAvailableBalance(uint256 _tokenId, address _account) external view returns (uint256);\n\n    /// @notice Fetch the shares of a release owned by a user in a specific time period paginated.\n    /// @param _releaseId The release ID.\n    /// @param _start The start timestamp.\n    /// @param _end The end timestamp (exclusive).\n    /// @param _cursor The cursor for pagination.\n    /// @param _limit The limit for pagination.\n    function fetchSharesInPeriod(\n        uint256 _releaseId,\n        uint256 _start,\n        uint256 _end,\n        uint256 _cursor,\n        uint256 _limit\n    ) external view returns (SharesReport memory);\n\n    /// @notice Fetches the balance of a user for all tokens.\n    /// @param _account The account to fetch the balance for.\n    function balanceOf(address _account) external view returns (TokenBalance[] memory);\n\n    /// @notice Fetches the balance of a user for a specific token.\n    /// @param _tokenId The token ID.\n    /// @param _account The account to fetch the balance for.\n    function balanceOf(uint256 _tokenId, address _account) external view returns (TokenBalance memory);\n\n    /// @notice Checks if the release is fully assigned.\n    function isFullyAssigned(uint256 _releaseId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/marketplace/exchange/IGildiExchange.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport {IAccessControl} from '@openzeppelin/contracts/access/IAccessControl.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport {IGildiManager} from '../../manager/IGildiManager.sol';\nimport {IGildiPriceOracle} from '../../oracles/price/IGildiPriceOracle.sol';\nimport {IGildiExchangeOrderBook} from './IGildiExchangeOrderBook.sol';\nimport {IGildiExchangeFundManager} from './IGildiExchangeFundManager.sol';\nimport {IGildiExchangePaymentProcessor} from './IGildiExchangePaymentProcessor.sol';\nimport {IGildiExchangePaymentAggregator} from './IGildiExchangePaymentAggregator.sol';\n\n/// @title IGildiExchange\n/// @notice Interface for the Gildi Exchange.\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\ninterface IGildiExchange is IAccessControl {\n    /// @notice Represents a fee/burn receiver with an address and a basis points value and the currency to receive in.\n    struct Receiver {\n        /// @dev The address that receives the fee\n        address receiverAddress;\n        /// @dev The currency in which the fee is paid\n        address payoutCurrency;\n        /// @dev The value in basis points\n        uint16 value;\n    }\n\n    /// @notice Represents a top-level fee distribution with an address and optional sub-fee receivers.\n    struct FeeDistribution {\n        /// @dev The primary fee receiver\n        Receiver feeReceiver;\n        /// @dev Used to distribute a portion of the parent fee, e.g., burn a fraction\n        Receiver[] subFeeReceivers;\n    }\n\n    /// @notice Application environment settings\n    struct AppEnvironment {\n        /// @dev Application settings including dependencies\n        AppSettings settings;\n        /// @dev The basis points denominator for percentage calculations\n        uint16 basisPoints;\n        /// @dev The admin role identifier\n        bytes32 adminRole;\n        /// @dev The marketplace manager role identifier\n        bytes32 marketplaceManagerRole;\n        /// @dev The claimer role identifier\n        bytes32 claimerRole;\n    }\n\n    /// @notice Application settings\n    struct AppSettings {\n        /// @dev The number of decimals for price asking\n        uint8 priceAskDecimals;\n        /// @dev The fee distribution structure\n        FeeDistribution[] fees;\n        /// @dev The marketplace currency\n        IERC20 marketplaceCurrency;\n        /// @dev The maximum number of buys per transaction\n        uint256 maxBuyPerTransaction;\n        /// @dev The Gildi manager interface\n        IGildiManager gildiManager;\n        /// @dev The order book interface\n        IGildiExchangeOrderBook orderBook;\n        /// @dev The price oracle interface\n        IGildiPriceOracle gildiPriceOracle;\n        /// @dev The fund manager interface\n        IGildiExchangeFundManager fundManager;\n        /// @dev The payment processor interface\n        IGildiExchangePaymentProcessor paymentProcessor;\n        /// @dev The payment aggregator interface\n        IGildiExchangePaymentAggregator paymentAggregator;\n    }\n\n    /// @notice Purchases tokens of a release\n    /// @dev Sweeps the floor\n    /// @param _releaseId The ID of the release\n    /// @param _amount The amount of tokens to purchase\n    /// @param _maxTotalPrice The maximum total price to spend in Marketplace Currency\n    /// @param _beneficiary The address to send the tokens to\n    /// @param _isProxyOperation Whether the operation is a proxy operation\n    /// @return amountSpent The amount of Marketplace Currency spent\n    /// @return amountUsdSpent The amount spent in USD\n    function purchase(\n        uint256 _releaseId,\n        uint256 _amount,\n        uint256 _maxTotalPrice,\n        address _beneficiary,\n        bool _isProxyOperation\n    ) external returns (uint256 amountSpent, uint256 amountUsdSpent);\n\n    /// @notice Transfer a token in the context of the Gildi Exchange\n    /// @param _from The address to transfer from\n    /// @param _to The address to transfer to\n    /// @param _value The amount to transfer\n    /// @param _amountCurrency The currency of the amount\n    function transferTokenInContext(address _from, address _to, uint256 _value, address _amountCurrency) external;\n\n    /// @notice Tries to burn a token in the context of the Gildi Exchange\n    /// @param _from The address to burn from\n    /// @param _value The amount to burn\n    /// @param _amountCurrency The currency of the amount\n    /// @return Whether the burn was successful\n    function tryBurnTokenInContext(address _from, uint256 _value, address _amountCurrency) external returns (bool);\n\n    /// @notice Gets the price needed to pay in marketplace currency to buy `_amountToBuy` units of `_releaseId`.\n    /// @param _releaseId The ID of the release\n    /// @param _amountToBuy The amount of tokens to buy\n    /// @param _buyer The address of the buyer (optional)\n    /// @return totalPriceInCurrency The total cost in marketplace currency\n    /// @return asset The asset the price is in\n    /// @return totalPriceUsd The total price in USD (using exchange's priceAskDecimals)\n    function quotePricePreview(\n        uint256 _releaseId,\n        uint256 _amountToBuy,\n        address _buyer\n    ) external view returns (uint256 totalPriceInCurrency, address asset, uint256 totalPriceUsd);\n\n    /// @notice Checks if a release is currently in its initial sale period\n    /// @param _releaseId The ID of the release\n    /// @return True if the release is in active initial sale, false otherwise\n    function isInInitialSale(uint256 _releaseId) external view returns (bool);\n\n    /// @notice Returns the app environment.\n    /// @return appEnvironment The app environment\n    function getAppEnvironment() external view returns (AppEnvironment memory);\n\n    /// @notice Gets the active marketplace asset for a release\n    /// @param _releaseId The ID of the release\n    /// @return The address of the active marketplace asset for the release\n    function getActiveMarketplaceReleaseAsset(uint256 _releaseId) external view returns (address);\n\n    /// @notice Get the fees of a specific release\n    /// @param _releaseId The ID of the release\n    /// @return An array of fee distributions for the release\n    function getReleaseFees(uint256 _releaseId) external view returns (FeeDistribution[] memory);\n\n    /// @notice Get a list of release IDs\n    /// @param _activeOnly Whether or not to only return active releases\n    /// @return activeReleases An array of release IDs\n    function getReleaseIds(bool _activeOnly) external view returns (uint256[] memory);\n\n    /// @notice Creates a listing with default slippage\n    /// @param _releaseId The ID of the release\n    /// @param _seller The address of the seller\n    /// @param _pricePerItem The price per item in USD\n    /// @param _quantity The quantity being listed\n    /// @param _fundsReceiver The address to receive funds from the sale (if address(0), defaults to seller)\n    /// @param _payoutCurrency The currency the seller wants to receive payment in\n    function createListing(\n        uint256 _releaseId,\n        address _seller,\n        uint256 _pricePerItem,\n        uint256 _quantity,\n        address _payoutCurrency,\n        address _fundsReceiver\n    ) external;\n\n    /// @notice Creates a listing with custom slippage\n    /// @param _releaseId The ID of the release\n    /// @param _seller The address of the seller\n    /// @param _pricePerItem The price per item in USD\n    /// @param _quantity The quantity being listed\n    /// @param _payoutCurrency The currency the seller wants to receive payment in\n    /// @param _fundsReceiver The address to receive funds from the sale (if address(0), defaults to seller)\n    /// @param _slippageBps Slippage tolerance in basis points\n    function createListing(\n        uint256 _releaseId,\n        address _seller,\n        uint256 _pricePerItem,\n        uint256 _quantity,\n        address _payoutCurrency,\n        address _fundsReceiver,\n        uint16 _slippageBps\n    ) external;\n\n    /// @notice Modifies a listing with default slippage\n    /// @param _listingId The ID of the listing to modify\n    /// @param _newPricePerItem The new price per item in USD\n    /// @param _newQuantity The new quantity (if 0, the listing will be removed)\n    /// @param _payoutCurrency The new payout currency\n    /// @param _fundsReceiver The address to receive funds from the sale (if address(0), defaults to seller)\n    function modifyListing(\n        uint256 _listingId,\n        uint256 _newPricePerItem,\n        uint256 _newQuantity,\n        address _payoutCurrency,\n        address _fundsReceiver\n    ) external;\n\n    /// @notice Modifies a listing with custom slippage\n    /// @param _listingId The ID of the listing to modify\n    /// @param _newPricePerItem The new price per item in USD\n    /// @param _newQuantity The new quantity (if 0, the listing will be removed)\n    /// @param _payoutCurrency The new payout currency\n    /// @param _fundsReceiver The address to receive funds from the sale (if address(0), defaults to seller)\n    /// @param _slippageBps Slippage tolerance in basis points\n    function modifyListing(\n        uint256 _listingId,\n        uint256 _newPricePerItem,\n        uint256 _newQuantity,\n        address _payoutCurrency,\n        address _fundsReceiver,\n        uint16 _slippageBps\n    ) external;\n\n    /// @notice Cancels a listing by ID\n    /// @param _listingId The ID of the listing to cancel\n    function cancelListing(uint256 _listingId) external;\n}\n"
    },
    "contracts/interfaces/marketplace/exchange/IGildiExchangeFundManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\n/// @title Gildi Exchange Fund Manager Interface\n/// @notice Interface for the Gildi Exchange Fund Manager contract.\n/// @custom:security-contact security@gildi.io\n/// @author Patrick Fischer (Pathin) > https://pathin.me\ninterface IGildiExchangeFundManager {\n    // ========== Structs ==========\n\n    /// @notice Represents an fund entry storing the buyer, operator, fundParticipant, and value in Marketplace Currency.\n    struct Fund {\n        /// @dev Entity receiving the tokens (beneficiary)\n        address buyer;\n        /// @dev Entity that executed the transaction\n        address operator;\n        /// @dev Entity with funds in fund (seller or fee recipient)\n        address fundParticipant;\n        /// @dev Whether this was executed through a proxy\n        bool isProxyOperation;\n        /// @dev Amount in Marketplace Currency\n        FundAmount amount;\n        /// @dev Payout currency\n        address payoutCurrency;\n    }\n\n    /// @notice Represents an amount of tokens in a specific currency\n    struct FundAmount {\n        /// @dev The amount of tokens\n        uint256 value;\n        /// @dev The address of the currency token\n        address currencyAddress;\n    }\n\n    // ========== View Functions ==========\n\n    /// @notice Checks if a release has any funds\n    /// @param _releaseId The ID of the release\n    /// @return True if the release has funds, false otherwise\n    function releaseHasFunds(uint256 _releaseId) external view returns (bool);\n\n    // ========== Non-View Functions ==========\n\n    /// @notice Adds funds to fund for a participant\n    /// @param _releaseId The ID of the release\n    /// @param _participant The address of the fund participant\n    /// @param _buyer The address of the buyer\n    /// @param _operator The address of the operator\n    /// @param _isProxyOperation Whether this is a proxy operation\n    /// @param _amount The amount to add to fund\n    /// @param _amountCurrency The currency of the fund amount\n    /// @param _payoutCurrency The currency to payout in\n    function handleAddToFund(\n        uint256 _releaseId,\n        address _participant,\n        address _buyer,\n        address _operator,\n        bool _isProxyOperation,\n        uint256 _amount,\n        address _amountCurrency,\n        address _payoutCurrency\n    ) external;\n\n    /// @notice Cancels funds for a release in batches\n    /// @param _releaseId The ID of the release\n    /// @param _batchSize The number of funds to process in this batch\n    /// @return processed The number of funds processed\n    function handleCancelReleaseFunds(uint256 _releaseId, uint256 _batchSize) external returns (uint256 processed);\n\n    /// @notice Claims funds for a participant of a release with custom slippage\n    /// @param _releaseId The ID of the release\n    /// @param _fundParticipant The address of the fund participant\n    /// @param _slippageBps Slippage tolerance in basis points (100 = 1%, 500 = 5%)\n    function claimFunds(uint256 _releaseId, address _fundParticipant, uint16 _slippageBps) external;\n\n    /// @notice Claims funds for a participant of a release with default slippage (5%)\n    /// @param _releaseId The ID of the release\n    /// @param _fundParticipant The address of the fund participant\n    function claimFunds(uint256 _releaseId, address _fundParticipant) external;\n\n    /// @notice Claims all funds for a participant across all releases with custom slippage\n    /// @param _fundParticipant The address of the fund participant\n    /// @param _slippageBps Slippage tolerance in basis points (100 = 1%, 500 = 5%)\n    function claimAllFunds(address _fundParticipant, uint16 _slippageBps) external;\n\n    /// @notice Claims all funds for a participant across all releases with default slippage (5%)\n    /// @param _fundParticipant The address of the fund participant\n    function claimAllFunds(address _fundParticipant) external;\n}\n"
    },
    "contracts/interfaces/marketplace/exchange/IGildiExchangeOrderBook.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\n/// @title IGildiExchangeOrderBook\n/// @notice Interface for the Gildi Exchange Order Book, which manages listings and provides order book functionality for the marketplace.\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\ninterface IGildiExchangeOrderBook {\n    /// @notice Represents a listing in the order book for a specific token release.\n    struct Listing {\n        /// @dev A unique identifier for the listing.\n        uint256 id;\n        /// @dev The ID of the token release being listed.\n        uint256 releaseId;\n        /// @dev The address of the seller who created the listing.\n        address seller;\n        /// @dev The price per item in USD.\n        uint256 pricePerItem;\n        /// @dev The currency in which the seller wants to receive payment (if different from the active release marketplace currency, a swap will be performed).\n        address payoutCurrency;\n        /// @dev The quantity of tokens being listed.\n        uint256 quantity;\n        /// @dev Slippage protection in basis points (100 = 1%, 500 = 5%), 0 means no slippage allowed.\n        uint16 slippageBps;\n        /// @dev The block timestamp when the listing was created (UNIX timestamp).\n        uint256 createdAt;\n        /// @dev The block timestamp when the listing was last modified (UNIX timestamp).\n        uint256 modifiedAt;\n        /// @dev The ID of the next listing in the linked list (ordered by price).\n        uint256 nextListingId;\n        /// @dev The ID of the previous listing in the linked list (ordered by price).\n        uint256 prevListingId;\n        /// @dev Optional address to receive funds from the sale.\n        address fundsReceiver; // If address(0), defaults to seller\n    }\n\n    /// @notice Contains preview information for a potential purchase.\n    struct PurchasePreview {\n        /// @dev The total quantity available for purchase.\n        uint256 totalQuantityAvailable;\n        /// @dev The total price in marketplace currency.\n        uint256 totalPriceInCurrency;\n        /// @dev The address of the currency used for the purchase.\n        address currency;\n        /// @dev The total price in USD (using exchange's priceAskDecimals).\n        uint256 totalPriceUsd;\n    }\n\n    // ========== View Functions ==========\n\n    /// @notice Gets a listing by ID\n    /// @param _listingId The listing ID\n    /// @return The listing\n    function getListing(uint256 _listingId) external view returns (Listing memory);\n\n    /// @notice Gets all the listings of a specific seller\n    /// @param _seller The address of the seller\n    /// @return An array of listings for the seller\n    function getListingsOfSeller(address _seller) external view returns (Listing[] memory);\n\n    /// @notice Gets all the listings of a specific release, ordered by price\n    /// @param _releaseId The ID of the release\n    /// @param _cursor The cursor to start from\n    /// @param _limit The limit of listings to return\n    /// @return orderedListings An array of listings for the release\n    /// @return cursor The cursor to continue from\n    function getOrderedListings(\n        uint256 _releaseId,\n        uint256 _cursor,\n        uint256 _limit\n    ) external view returns (Listing[] memory orderedListings, uint256 cursor);\n\n    /// @notice Gets the available buy quantity for a user\n    /// @param _releaseId The release ID\n    /// @param _user The user address\n    /// @return The available quantity to buy\n    function getAvailableBuyQuantity(uint256 _releaseId, address _user) external view returns (uint256);\n\n    /// @notice Preview a purchase\n    /// @param _releaseId The ID of the release to purchase\n    /// @param _buyer The address of the buyer\n    /// @param _amountToBuy The amount of tokens to buy\n    /// @return Preview information for the purchase\n    function previewPurchase(\n        uint256 _releaseId,\n        address _buyer,\n        uint256 _amountToBuy\n    ) external view returns (PurchasePreview memory);\n\n    /// @notice Gets the first listing ID (with lowest price) for a specific release\n    /// @param _releaseId The ID of the release\n    /// @return The ID of the listing with the lowest price for this release\n    function getHeadListingId(uint256 _releaseId) external view returns (uint256);\n\n    /// @notice Gets the next listing ID in the price-ordered linked list\n    /// @param _listingId The current listing ID\n    /// @return The ID of the next listing with a higher price, or 0 if none exists\n    function getNextListingId(uint256 _listingId) external view returns (uint256);\n\n    /// @notice Gets the total quantity listed for a specific release\n    /// @param _releaseId The ID of the release\n    /// @return The total quantity listed\n    function listedQuantities(uint256 _releaseId) external view returns (uint256);\n\n    // ========== Non-View Functions ==========\n\n    /// @notice Creates a listing\n    /// @param _releaseId The ID of the release\n    /// @param _seller The address of the seller\n    /// @param _pricePerItem The price per item\n    /// @param _quantity The quantity being listed\n    /// @param _payoutCurrency The payout currency of the listing\n    /// @param _slippageBps Optional slippage protection in basis points (100 = 1%, 500 = 5%)\n    /// @dev Takes the slippage setting literally, 0 = no slippage, 10000 = 100%, does not make assumptions about the default, caller must know what they are doing\n    function handleCreateListing(\n        uint256 _releaseId,\n        address _seller,\n        uint256 _pricePerItem,\n        uint256 _quantity,\n        address _payoutCurrency,\n        address _fundsReceiver,\n        uint16 _slippageBps\n    ) external;\n\n    /// @notice Modifies an existing listing's price, quantity, and slippage settings\n    /// @param _listingId The ID of the listing to modify\n    /// @param _pricePerItem The new price per item\n    /// @param _quantity The new quantity (if 0, the listing will be removed)\n    /// @param _payoutCurrency The new payout currency\n    /// @param _slippageBps Slippage protection in basis points (100 = 1%, 500 = 5%)\n    /// @dev Takes the slippage setting literally, 0 = no slippage, 10000 = 100%, does not make assumptions about the default, caller must know what they are doing\n    function handleModifyListing(\n        uint256 _listingId,\n        uint256 _pricePerItem,\n        uint256 _quantity,\n        address _payoutCurrency,\n        address _fundsReceiver,\n        uint16 _slippageBps\n    ) external;\n\n    /// @notice Removes a listing\n    /// @param _listingId The ID of the listing to cancel\n    function handleRemoveListing(uint256 _listingId) external;\n\n    /// @notice Decreases a listing's quantity after a purchase\n    /// @param _listingId The ID of the listing\n    /// @param _quantityToBuy The amount to reduce from the listing's quantity (if this reduces quantity to 0, the listing will be removed)\n    function handleDecreaseListingQuantity(uint256 _listingId, uint256 _quantityToBuy) external;\n\n    /// @notice Unlists all listings of a release in batches.\n    /// @param _releaseId The ID of the release\n    /// @param _batchSize The batch size\n    /// @return processedListings The number of listings processed\n    function handleUnlistReleaseListings(\n        uint256 _releaseId,\n        uint256 _batchSize\n    ) external returns (uint256 processedListings);\n}\n"
    },
    "contracts/interfaces/marketplace/exchange/IGildiExchangePaymentAggregator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport './IGildiExchangeSwapAdapter.sol';\nimport './IGildiExchange.sol';\n\n/// @title IGildiExchangePaymentAggregator\n/// @notice Interface for marketplace payment operations including swap functionality\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\ninterface IGildiExchangePaymentAggregator {\n    /// @notice Executes a swap out operation to convert source tokens to a target token.\n    /// @param _amount The amount of source tokens to swap.\n    /// @param _sourceCurrency The address of the source token.\n    /// @param _targetToken The token to swap to.\n    /// @param _minTargetAmount The minimum amount of target tokens to receive (slippage protection).\n    /// @param _recipient The recipient of the target tokens.\n    /// @return targetReceived The amount of target tokens received.\n    function swapOut(\n        uint256 _amount,\n        address _sourceCurrency,\n        address _targetToken,\n        uint256 _minTargetAmount,\n        address _recipient\n    ) external returns (uint256 targetReceived);\n\n    /// @notice Previews a swap out operation to check if there's a valid route and estimate the output amount.\n    /// @param _amount The amount of source tokens to swap.\n    /// @param _sourceCurrency The address of the source token.\n    /// @param _targetToken The token to swap to.\n    /// @return hasValidRoute Whether there's a valid route for the swap.\n    /// @return expectedTargetAmount The expected amount of target tokens to receive.\n    /// @return bestRoute The best route for the swap.\n    function previewSwapOut(\n        uint256 _amount,\n        address _sourceCurrency,\n        address _targetToken\n    )\n        external\n        view\n        returns (\n            bool hasValidRoute,\n            uint256 expectedTargetAmount,\n            IGildiExchangeSwapAdapter.QuoteRoute memory bestRoute\n        );\n\n    /// @notice Executes the purchase payment flow.\n    /// @param _releaseId The release ID.\n    /// @param _amount The amount to purchase.\n    /// @param _sourceToken The token used for payment (address(0) means native).\n    /// @param _sourceMaxAmount Maximum amount of _sourceToken to spend.\n    /// @return amountUsdSpent The amount spent in USD\n    function purchase(\n        uint256 _releaseId,\n        uint256 _amount,\n        address _sourceToken,\n        uint256 _sourceMaxAmount\n    ) external payable returns (uint256 amountUsdSpent);\n\n    /// @notice Estimates the amount of `_sourceToken` required to get `_amount` of `_releaseId` for `_buyer` of the marketplace token and returns the current best route.\n    /// @param _releaseId The release ID.\n    /// @param _amount The amount of the release.\n    /// @param _buyer The buyer of the release.\n    /// @param _sourceToken The token to swap from.\n    /// @return sourceNeeded The amount of `_sourceToken` required.\n    /// @return releaseCurrency The active martketplace currency of the release.\n    /// @return quoteRoute The route of the quote.\n    /// @return totalPriceUsd The total price in USD (using exchange's priceAskDecimals).\n    function estimatePurchase(\n        uint256 _releaseId,\n        uint256 _amount,\n        address _buyer,\n        address _sourceToken\n    )\n        external\n        view\n        returns (\n            uint256 sourceNeeded,\n            address releaseCurrency,\n            IGildiExchangeSwapAdapter.QuoteRoute memory quoteRoute,\n            uint256 totalPriceUsd\n        );\n\n    /// @notice Returns the GildiExchange contract instance.\n    /// @return The GildiExchange contract.\n    function getGildiExchange() external view returns (IGildiExchange);\n}\n"
    },
    "contracts/interfaces/marketplace/exchange/IGildiExchangePaymentProcessor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport {IGildiExchange} from './IGildiExchange.sol';\n\n/// @title IGildiExchangePaymentProcessor\n/// @notice Interface for the Gildi Exchange Payment Processor.\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\ninterface IGildiExchangePaymentProcessor {\n    /// @notice Gets the price feed ID for a currency\n    /// @param _currency The currency address\n    /// @return The price feed ID\n    function getPriceFeedId(address _currency) external view returns (bytes32);\n\n    /// @notice Converts a price in USD to the equivalent amount in the specified currency\n    /// @param _priceInUSD The price in USD to convert\n    /// @param _currency The address of the currency to convert to\n    /// @return The equivalent amount in the specified currency\n    function quoteInCurrency(uint256 _priceInUSD, address _currency) external view returns (uint256);\n\n    /// @notice Processes payment with fees.\n    ///      Calculates fees, transfers funds to fee recipients, and optionally creates funds\n    /// @param _releaseId The ID of the release\n    /// @param _buyer The address of the buyer\n    /// @param _seller The address of the seller\n    /// @param _value The value to process fees for\n    /// @param _amountCurrency The currency of the amount\n    /// @param _createFund Whether to create an fund\n    /// @param _operator The address of the operator\n    /// @param _listingId The ID of the listing\n    /// @param _isProxyOperation Whether this is a proxy operation\n    /// @param _listingPayoutCurrency The currency to payout in from the listing\n    function handleProcessPaymentWithFees(\n        uint256 _releaseId,\n        address _buyer,\n        address _seller,\n        uint256 _value,\n        address _amountCurrency,\n        bool _createFund,\n        address _operator,\n        bool _isProxyOperation,\n        uint256 _listingId,\n        address _listingPayoutCurrency,\n        uint16 _slippageBps\n    ) external;\n}\n"
    },
    "contracts/interfaces/marketplace/exchange/IGildiExchangeSwapAdapter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\n/// @title IGildiExchangeSwapAdapter\n/// @notice Interface for a DEX/aggregator adapter that can\n///         quote & swap from a user’s source token -> marketplace token\n///         in an \"exact out\" fashion.\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\ninterface IGildiExchangeSwapAdapter {\n    /// @notice The route of the quote\n    /// @param marketplaceAdapter The address of the marketplace adapter\n    /// @param route The path of the quote\n    /// @param fees The fees of the quote\n    /// @param amounts The amounts of the quote\n    /// @param virtualAmountsWithoutSlippage The virtual amounts of the quote without slippage\n    struct QuoteRoute {\n        address marketplaceAdapter;\n        address[] route;\n        uint128[] fees;\n        uint128[] amounts;\n        uint128[] virtualAmountsWithoutSlippage;\n    }\n\n    /// @notice The quote for a swap in\n    /// @param sourceTokenRequired The amount of source token required\n    /// @param rawQuoteData The raw quote data\n    /// @param quoteRoute The quote route\n    /// @param validRoute Whether the route is valid\n    struct SwapInQuote {\n        uint256 sourceTokenRequired;\n        bytes rawQuoteData;\n        QuoteRoute quoteRoute;\n        bool validRoute;\n    }\n\n    /// @notice The quote for a swap out\n    /// @param targetTokenOut The target token\n    /// @param rawQuoteData The raw quote data\n    /// @param quoteRoute The quote route\n    /// @param validRoute Whether the route is valid\n    struct SwapOutQuote {\n        uint256 targetTokenOut;\n        bytes rawQuoteData;\n        QuoteRoute quoteRoute;\n        bool validRoute;\n    }\n\n    /// @notice Quotes the amount of `_sourceToken` required to get `_marketplaceAmountDesired` of `_marketplaceToken`.\n    /// @param _sourceToken The token to swap from.\n    /// @param _marketplaceToken The token to swap to.\n    /// @param _marketplaceAmountDesired The amount of `_marketplaceToken` desired.\n    /// @return quote The swap in quote containing required source token amount, quote data and route information\n    function quoteSwapIn(\n        address _sourceToken,\n        address _marketplaceToken,\n        uint256 _marketplaceAmountDesired\n    ) external view returns (SwapInQuote memory quote);\n\n    /// @notice Performs an \"exact out\" swap to get `_marketplaceAmount` of `_marketplaceToken`.\n    /// @param _sourceToken The token to swap from.\n    /// @param _marketplaceToken The token to swap to.\n    /// @param _sourceAmountMax The max `_sourceToken` we can spend (slippage buffer).\n    /// @param _marketplaceAmount The exact marketplace tokens we want out.\n    /// @param _to The recipient of the marketplace tokens.\n    /// @param _quoteData The data previously returned by `quoteSwapIn`.\n    function swapIn(\n        address _sourceToken,\n        address _marketplaceToken,\n        uint256 _sourceAmountMax,\n        uint256 _marketplaceAmount,\n        address _to,\n        bytes calldata _quoteData\n    ) external returns (uint256 sourceSpent);\n\n    /// @notice Quotes the amount of `_targetToken` you can get by providing `_sourceAmount` of `_sourceToken`.\n    /// @param _sourceToken The token to swap from.\n    /// @param _targetToken The token to swap to.\n    /// @param _sourceAmount The amount of `_sourceToken` available.\n    /// @return quote The quote.\n    function quoteSwapOut(\n        address _sourceToken,\n        address _targetToken,\n        uint256 _sourceAmount\n    ) external view returns (SwapOutQuote memory quote);\n\n    /// @notice Performs an \"exact in\" swap to convert `_sourceAmount` of `_sourceToken` into `_targetToken`.\n    /// @param _sourceToken The token to swap from.\n    /// @param _targetToken The token to swap to.\n    /// @param _sourceAmount The exact amount of `_sourceToken` to swap.\n    /// @param _minTargetAmount The minimum amount of `_targetToken` to receive (slippage protection).\n    /// @param _to The recipient of the target tokens.\n    /// @param _quoteData The data previously returned by `quoteSwapOut`.\n    function swapOut(\n        address _sourceToken,\n        address _targetToken,\n        uint256 _sourceAmount,\n        uint256 _minTargetAmount,\n        address _to,\n        bytes calldata _quoteData\n    ) external returns (uint256 targetReceived);\n}\n"
    },
    "contracts/interfaces/marketplace/vault/IGildiExchangePurchaseVault.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\n/// @title IGildiExchangePurchaseVault\n/// @notice Interface for USD Treasury Purchase Vault operations\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\ninterface IGildiExchangePurchaseVault {\n    /// @notice Execution context used for intent execution with marketplace purchase parameters.\n    /// @param releaseId represents the marketplace token identifier (e.g., releaseId).\n    /// @param amount is the quantity intended to purchase.\n    /// @param buyer is the wallet that will perform the purchase on the marketplace.\n    struct ExecutionContext {\n        uint256 releaseId;\n        uint256 amount;\n        address buyer;\n    }\n\n    /// @notice Gets remaining USD value for an intent\n    /// @param _intentId The intent to query\n    /// @return remaining The remaining USD value in cents\n    function remainingUsd(bytes32 _intentId) external view returns (uint256 remaining);\n\n    /// @notice Executes a purchase intent by sending tokens to beneficiary\n    /// @param _intentId The intent to execute\n    /// @param _tokenHint Preferred token address (optional)\n    /// @param _ctx Execution context including releaseId, amount and buyer for optimal selection\n    /// @return token The token that was sent\n    /// @return tokenAmount The amount of tokens sent\n    function executeIntent(\n        bytes32 _intentId,\n        address _tokenHint,\n        ExecutionContext calldata _ctx\n    ) external returns (address token, uint256 tokenAmount);\n\n    /// @notice Settles a funded intent with actual USD spent and handles token refunds\n    /// @param _intentId The intent to settle\n    /// @param _actualUsdSpentCents Actual USD spent in vault cents (2 decimals)\n    /// @param _refundToken Token address for refunds (address(0) if no refund)\n    /// @param _refundTokenAmount Amount of tokens being refunded\n    function settleIntent(\n        bytes32 _intentId,\n        uint256 _actualUsdSpentCents,\n        address _refundToken,\n        uint256 _refundTokenAmount\n    ) external;\n\n    /// @notice Checks if vault can fund a purchase with current token balances\n    /// @param _intentValueUsdCents Intent value in USD cents\n    /// @param _releaseId Release ID for purchase estimation\n    /// @param _amount Amount of tokens to purchase\n    /// @param _buyer Buyer address for estimation\n    /// @return canFund True if purchase can be funded\n    /// @return bestToken Address of the most cost-effective token (zero if can't fund)\n    /// @return estimatedCost Estimated cost in best token (zero if can't fund)\n    function canFundPurchase(\n        uint256 _intentValueUsdCents,\n        uint256 _releaseId,\n        uint256 _amount,\n        address _buyer\n    ) external view returns (bool canFund, address bestToken, uint256 estimatedCost);\n}\n"
    },
    "contracts/interfaces/oracles/price/IGildiPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\n\npragma solidity 0.8.24;\n\nimport './IGildiPriceResolver.sol';\n\n/// @title Gildi Price Oracle Interface\n/// @notice Interface for the consumer-facing Gildi Price Oracle\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\ninterface IGildiPriceOracle is IGildiPriceResolver {\n    /// @notice Represents an asset in the system\n    struct Asset {\n        /// @dev Unique identifier for the asset\n        uint256 id;\n        /// @dev The asset's symbol (e.g., BTC, ETH)\n        string symbol;\n        /// @dev The asset's full name\n        string name;\n    }\n\n    /// @notice Information about a trading pair\n    struct PairInfo {\n        /// @dev Unique identifier for the pair\n        bytes32 pairId;\n        /// @dev The base asset in the pair\n        Asset baseAsset;\n        /// @dev The quote asset in the pair\n        Asset quoteAsset;\n    }\n\n    /// @dev Thrown when an invalid pair ID is provided\n    error InvalidPairId();\n\n    /// @notice Adds a pair using asset IDs\n    /// @param _baseAssetId The ID of the base asset\n    /// @param _quoteAssetId The ID of the quote asset\n    /// @param _resolver The resolver contract for the asset pair\n    function addPair(uint256 _baseAssetId, uint256 _quoteAssetId, IGildiPriceResolver _resolver) external;\n\n    /// @notice Retrieves the resolver for a specific asset pair\n    /// @param _pairId The identifier of the asset pair\n    function getResolver(bytes32 _pairId) external view returns (IGildiPriceResolver resolver);\n\n    /// @notice Fetches a list of all registered pairs in \"BASE/QUOTE\" string form\n    /// @return An array of registered pairs\n    function getPairs() external view returns (PairInfo[] memory);\n\n    /// @notice Adds a new asset\n    /// @param _symbol The symbol of the asset\n    /// @param _name The name of the asset\n    /// @return The ID of the newly added asset\n    function addAsset(string memory _symbol, string memory _name) external returns (uint256);\n\n    /// @notice Returns all registered assets\n    /// @return An array of registered assets\n    function getAssets() external view returns (Asset[] memory);\n\n    /// @notice Returns an asset by ID\n    /// @param _assetId The ID of the asset\n    /// @return The asset details\n    function getAssetById(uint256 _assetId) external view returns (Asset memory);\n\n    /// @notice Returns pairs that use the specified asset ID as quote\n    /// @param _quoteAssetId The ID of the quote asset\n    /// @return An array of registered pairs\n    function getPairsByQuoteAsset(uint256 _quoteAssetId) external view returns (string[] memory);\n\n    /// @notice Retrieves price data by numeric IDs\n    /// @param _baseAssetId The ID of the base asset\n    /// @param _quoteAssetId The ID of the quote asset\n    /// @return The price data for the asset pair\n    function getPriceById(uint256 _baseAssetId, uint256 _quoteAssetId) external view returns (PriceData memory);\n\n    /// @notice Checks if a pair with the given ID exists\n    /// @param _pairId The identifier of the asset pair\n    /// @return True if the pair exists\n    function pairExistsById(bytes32 _pairId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/oracles/price/IGildiPriceResolver.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\n\npragma solidity 0.8.24;\n\n/// @title Gildi Price Resolver Interface\n/// @notice Interface that all price resolvers must implement\n/// @custom:security-contact security@gildi.io\n/// @author Patrick Fischer\ninterface IGildiPriceResolver {\n    /// @notice Price data struct\n    struct PriceData {\n        /// @notice The price of the base asset in terms of the quote asset\n        uint256 price;\n        /// @notice The number of decimals for the price\n        uint8 decimals;\n        /// @notice The UNIX timestamp when the price was last updated\n        uint256 timestamp;\n    }\n\n    /// @notice Retrieves the price data for a given pair ID\n    /// @param pairId The identifier of the asset pair\n    /// @return price The price data for the asset pair\n    function getPrice(bytes32 pairId) external view returns (PriceData memory price);\n\n    /// @notice Retrieves the price data for a given pair ID, with a maximum age\n    /// @param pairId The identifier of the asset pair\n    /// @param age The maximum age of the price data in seconds\n    function getPriceNoOlderThan(bytes32 pairId, uint256 age) external view returns (PriceData memory priceData);\n}\n"
    },
    "contracts/interfaces/token/IERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\n\npragma solidity 0.8.24;\n\n/// @title IERC20Burnable\n/// @notice Interface for openzeppelin ERC20Burnable\n/// @custom:security-contact security@gildi.io\n/// @author Patrick Fischer (Pathin) > https://pathin.me\ninterface IERC20Burnable {\n    /// @notice Destroys a `value` amount of tokens from the caller.\n    /// @param value The amount of tokens to destroy.\n    function burn(uint256 value) external;\n\n    /// @notice Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance.\n    /// @param account The account to destroy the tokens from.\n    /// @param value The amount of tokens to destroy.\n    function burnFrom(address account, uint256 value) external;\n}\n"
    },
    "contracts/interfaces/wallet/IGildiWalletConfigRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\n/// @title IGildiWalletConfigRegistry\n/// @notice Interface for centralized configuration registry for all wallet instances\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\ninterface IGildiWalletConfigRegistry {\n    /// @notice Wallet configuration for marketplace integration\n    struct WalletConfig {\n        /// @dev Address of the GildiExchange contract\n        address gildiExchangeV2;\n        /// @dev Address of the RoyaltyDistributor contract\n        address royaltyDistributor;\n        /// @dev Address of the GildiManager contract\n        address gildiManager;\n        /// @dev Address of the PaymentAggregator contract for marketplace operations\n        address paymentAggregator;\n        /// @dev Address of the GildiExchangePurchaseVault contract for USD treasury operations\n        address purchaseVault;\n    }\n\n    /// @dev Emitted when global configuration is updated\n    event GlobalConfigUpdated(uint256 indexed version, WalletConfig config);\n\n    /// @notice Sets configuration for a specific logic contract version\n    /// @dev Only callable by accounts with CONFIG_MANAGER_ROLE. Version 0 is the default config.\n    /// @param _version The logic contract version this config applies to (0 = default)\n    /// @param _config The configuration for this version\n    function setConfigForVersion(uint256 _version, WalletConfig calldata _config) external;\n\n    /// @notice Gets configuration for a specific logic contract version\n    /// @dev Returns the config for the specified version, or version 0 (default) if not found\n    /// @param _version The logic contract version to get config for\n    /// @return The configuration for this version\n    function getConfigForVersion(uint256 _version) external view returns (WalletConfig memory);\n\n    /// @notice Gets the default global configuration (version 0)\n    /// @return config The default global configuration\n    function getDefaultConfig() external view returns (WalletConfig memory config);\n\n    /// @notice Checks if a configuration exists for a specific version\n    /// @param _version The version to check\n    /// @return exists Whether configuration exists for this version\n    function hasConfigForVersion(uint256 _version) external view returns (bool exists);\n}\n"
    },
    "contracts/libraries/marketplace/exchange/SharedErrors.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\n/// @title SharedErrors\n/// @notice Common error definitions shared across Gildi Exchange contracts\n/// @dev This library consolidates error definitions to avoid duplication\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\nlibrary SharedErrors {\n    /// @dev Emitted when a function parameter is invalid or out-of-range (e.g. zero batchSize, zero price, etc.)\n    error ParamError();\n\n    /// @dev Emitted when an operation is not allowed for the caller\n    error NotAllowed();\n\n    /// @dev Emitted when the caller is invalid\n    error InvalidCaller();\n\n    /// @dev Emitted when a listing ID is invalid or does not match storage data\n    /// @param listingId The ID that caused the error\n    error ListingError(uint256 listingId);\n}\n"
    },
    "contracts/marketplace/exchange/GildiExchange.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport '../../interfaces/marketplace/exchange/IGildiExchange.sol';\nimport {SharedErrors} from '../../libraries/marketplace/exchange/SharedErrors.sol';\nimport {IERC20Burnable} from '../../interfaces/token/IERC20Burnable.sol';\nimport {IGildiPriceResolver} from '../../interfaces/oracles/price/IGildiPriceOracle.sol';\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport {PausableUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol';\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\nimport {ReentrancyGuardUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol';\nimport {Math} from '@openzeppelin/contracts/utils/math/Math.sol';\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\n/// @title Gildi Exchange\n/// @notice Marketplace of the Gildi platform.\n/// @custom:security-contact security@gildi.to\n/// @author Gildi Digital LLC\ncontract GildiExchange is\n    Initializable,\n    PausableUpgradeable,\n    AccessControlUpgradeable,\n    ReentrancyGuardUpgradeable,\n    IGildiExchange\n{\n    using SafeERC20 for IERC20;\n\n    // ========== Constants ==========\n    /// @notice Role identifier for admin access\n    bytes32 private constant ADMIN_ROLE = keccak256('ADMIN_ROLE');\n\n    /// @notice Role identifier for marketplace manager access\n    bytes32 private constant MARKETPLACE_MANAGER_ROLE = keccak256('MARKETPLACE_MANAGER_ROLE');\n\n    /// @notice Role identifier for fund claimer access\n    bytes32 private constant CLAIMER_ROLE = keccak256('CLAIMER_ROLE');\n\n    /// @notice Basis points denominator for percentage calculations (100% = 10000)\n    uint16 private constant BASIS_POINTS = 10000;\n\n    /// @notice Default slippage tolerance in basis points (5%)\n    uint16 public constant DEFAULT_SLIPPAGE_BPS = 500;\n\n    // ========== Storage Variables ==========\n    /// @notice Application settings for the exchange\n    AppSettings private appSettings;\n\n    /// @notice Array of all release IDs in the exchange\n    uint256[] private releaseIds;\n    /// @notice Mapping from release ID to Release struct\n    mapping(uint256 => Release) public releases;\n\n    /// @notice Mapping from release ID to InitialSale struct\n    mapping(uint256 => InitialSale) private initialSales;\n    /// @notice Mapping from release ID to array of whitelist buyer addresses\n    mapping(uint256 => address[]) private initialSaleWhitelistBuyers;\n    /// @notice Mapping from release ID to buyer address to whitelist status\n    mapping(uint256 => mapping(address => bool)) public isInitialSaleWhitelistBuyer;\n    /// @notice Mapping from release ID to buyer address to maximum buy count\n    mapping(uint256 => mapping(address => uint256)) private initialSaleMaxBuyCounts;\n    /// @notice Mapping from release ID to total quantity listed in initial sale\n    mapping(uint256 => uint256) private initialSaleListedQuantities;\n\n    // ========== Structs ==========\n\n    /// @notice Parameters for creating an initial sale\n    struct InitialSaleParams {\n        /// @dev The ID of the release\n        uint256 releaseId;\n        /// @dev The quantities of the asset\n        uint256[] assetQuantities;\n        /// @dev The prices of the asset for the quantity bracket\n        uint256[] assetPrices;\n        /// @dev The address of the seller (owner of the shares)\n        address seller;\n        /// @dev The maximum amount of tokens a buyer can buy in the initial sale\n        uint256 maxBuy;\n        /// @dev The start time of the initial sale\n        uint256 start;\n        /// @dev The duration of the initial sale (default 1 week)\n        uint256 duration;\n        /// @dev If the initial sale is a whitelist sale\n        bool whitelist;\n        /// @dev The addresses of the whitelist\n        address[] whitelistAddresses;\n        /// @dev The duration the whitelist is enforced (default 0 = forever)\n        uint256 whitelistDuration;\n        /// @dev Overrides the marketplace currency for the initial sale\n        address initialSaleCurrency;\n        /// @dev The currency to pay out in\n        address payoutCurrency;\n        /// @dev The address to receive funds from the sale (if address(0), defaults to seller)\n        address fundsReceiver;\n        /// @dev The fee distribution structure for the initial sale\n        FeeDistribution[] fees;\n    }\n\n    /// @notice A marketplace release\n    struct Release {\n        /// @dev The ID of the release\n        uint256 releaseId;\n        /// @dev If the release is initialized (set)\n        bool initialized;\n        /// @dev Additional fees for this release\n        FeeDistribution[] additionalFees;\n        /// @dev If the release is active = can be traded\n        bool active;\n        /// @dev If the release is in the process of being cancelled\n        bool isCancelling;\n    }\n\n    /// @notice Initial sale related data\n    struct InitialSale {\n        /// @dev If the release is in initial sale state\n        bool active;\n        /// @dev When the initial sale starts\n        uint256 startTime;\n        /// @dev When the initial sale ends\n        uint256 endTime;\n        /// @dev If the initial sale is a whitelist sale\n        bool whitelist;\n        /// @dev Until when the whitelist is enforced (0 = unlimited)\n        uint256 whitelistUntil;\n        /// @dev Maximum amount of tokens a buyer can buy in the initial sale\n        uint256 maxBuy;\n        /// @dev The sale currency of the initial sale\n        address saleCurrency;\n        /// @dev The fee distribution structure for the initial sale\n        FeeDistribution[] fees;\n    }\n\n    // ========== Events ==========\n\n    /// @notice Emitted when a purchase is made\n    /// @param releaseId The ID of the release being purchased\n    /// @param buyer The address of the buyer\n    /// @param seller The address of the seller\n    /// @param operator The address of the operator\n    /// @param listingId The ID of the listing\n    /// @param priceInUSD The price per item in USD\n    /// @param quantity The quantity of the release being purchased\n    event Purchased(\n        uint256 indexed releaseId,\n        address indexed buyer,\n        address indexed seller,\n        address operator,\n        uint256 listingId,\n        uint256 priceInUSD,\n        uint256 quantity,\n        uint256 priceInAsset,\n        address asset\n    );\n\n    /// @notice Emitted when a release cancellation is started\n    /// @param releaseId The ID of the release being cancelled\n    event ReleaseCancellationStarted(uint256 indexed releaseId);\n\n    /// @notice Emitted when a release is fully cancelled\n    /// @param releaseId The ID of the release being cancelled\n    event ReleaseCancelled(uint256 indexed releaseId);\n\n    /// @notice Emitted when an initial sale is created\n    /// @param releaseId The ID of the release\n    /// @param seller The address of the seller\n    /// @param assetQuantities The quantities of the asset\n    /// @param assetPrices The prices of the asset for the quantity bracket\n    /// @param maxBuy The maximum amount of tokens a buyer can buy in the initial sale\n    /// @param startTime The start time of the initial sale\n    /// @param duration The duration of the initial sale\n    /// @param whitelistEnabled If the initial sale is a whitelist sale\n    /// @param whitelistDuration The duration the whitelist is enforced\n    /// @param saleCurrency The currency of the initial sale\n    /// @param payoutCurrency The currency of the payout\n    /// @param saleFees The fees for the initial sale\n    event InitialSaleCreated(\n        uint256 indexed releaseId,\n        address indexed seller,\n        uint256[] assetQuantities,\n        uint256[] assetPrices,\n        uint256 maxBuy,\n        uint256 startTime,\n        uint256 duration,\n        bool whitelistEnabled,\n        uint256 whitelistDuration,\n        address saleCurrency,\n        address payoutCurrency,\n        FeeDistribution[] saleFees\n    );\n\n    /// @notice Emitted when the initial sale ends\n    /// @param releaseId The ID of the release\n    event InitialSaleEnded(uint256 indexed releaseId);\n\n    /// @notice Emitted when a release is initialized\n    /// @param releaseId The ID of the release\n    event ReleaseInitialized(uint256 indexed releaseId);\n\n    /// @notice Emitted when a release's active state is changed\n    /// @param releaseId The ID of the release\n    /// @param isActive The new active state\n    event ReleaseActiveStateChanged(uint256 indexed releaseId, bool isActive);\n\n    /// @notice Emitted when a release's fees are updated\n    /// @param releaseId The ID of the release\n    event FeesUpdated(uint256 indexed releaseId);\n\n    /// @notice Emitted when the ask decimals are set\n    /// @param askDecimals The new ask decimals\n    event AskDecimalsSet(uint8 askDecimals);\n\n    /// @notice Emitted when the marketplace currency is set\n    /// @param marketplaceCurrency The new marketplace currency\n    event MarketplaceCurrencySet(address marketplaceCurrency);\n\n    // ========== Errors ==========\n\n    /// @dev Emitted when the requested quantity exceeds available inventory.\n    /// @dev The quantity that was requested.\n    /// @dev The quantity that was available.\n    error InsufficientQuantity(uint256 requested, uint256 available);\n\n    /// @dev Emitted when a purchase cannot proceed (e.g. buyer not whitelisted, amount exceeds max buy, not enough tokens).\n    error PurchaseError();\n\n    /// @dev Emitted when there is a setup/configuration issue (e.g. oracle decimals not set, invalid fee distribution).\n    error SetupError();\n\n    /// @dev Emitted when a release is not found in the manager (e.g. gildiManager.releaseExists(...) fails).\n    /// @dev The ID that could not be found.\n    error ReleaseNotFound(uint256 releaseId);\n\n    /// @dev Emitted when the requested number of tokens to buy cannot be fulfilled by the available listings.\n    /// @dev The total amount of tokens requested\n    /// @dev The amount of tokens actually found in listings\n    error NotEnoughTokensInListings(uint256 requested, uint256 available);\n\n    /// @dev Emitted when a release is in a wrong state (e.g. uninitialized, cancelling when it should not be, or active/inactive mismatch).\n    /// @dev The ID of the release in question.\n    error ReleaseStateError(uint256 releaseId);\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    // ========== Constructor and Initializer ==========\n\n    /// @notice Initializes the contract\n    /// @param _initialDefaultAdmin The address of the initial default admin\n    /// @param _initialAdmin The address of the initial admin\n    /// @param _initialMarketplaceManager The address of the initial marketplace manager\n    /// @param _gildiManager The address of the Gildi Manager\n    /// @param _marketplaceCurrency The address of the marketplace currency\n    function initialize(\n        address _initialDefaultAdmin,\n        address _initialAdmin,\n        address _initialMarketplaceManager,\n        IGildiManager _gildiManager,\n        IERC20 _marketplaceCurrency\n    ) public initializer {\n        AppSettings storage $ = appSettings;\n\n        __Pausable_init();\n        __AccessControl_init();\n        __ReentrancyGuard_init();\n\n        if (_initialDefaultAdmin == address(0)) {\n            _initialDefaultAdmin = _msgSender();\n        }\n        _grantRole(DEFAULT_ADMIN_ROLE, _initialDefaultAdmin);\n\n        if (_initialAdmin != address(0)) {\n            _grantRole(ADMIN_ROLE, _initialAdmin);\n        }\n\n        if (_initialMarketplaceManager != address(0)) {\n            _grantRole(MARKETPLACE_MANAGER_ROLE, _initialMarketplaceManager);\n        }\n\n        $.maxBuyPerTransaction = 15;\n\n        $.gildiManager = _gildiManager;\n        _setMarketplaceCurrency(address(_marketplaceCurrency));\n    }\n\n    // ========== Main Marketplace Logic ==========\n\n    /// @notice Creates an initial sale.\n    /// @param _params The parameters for creating the initial sale\n    function createInitialSale(\n        InitialSaleParams calldata _params\n    ) external whenNotPaused onlyRole(MARKETPLACE_MANAGER_ROLE) {\n        AppSettings storage $ = appSettings;\n\n        // Validate release state - combine multiple checks\n        Release storage release = releases[_params.releaseId];\n        if (\n            !release.initialized ||\n            release.active ||\n            release.isCancelling ||\n            !$.gildiManager.isLocked(_params.releaseId) ||\n            $.gildiManager.isInInitialSale(_params.releaseId) ||\n            isInInitialSale(_params.releaseId)\n        ) {\n            revert ReleaseStateError(_params.releaseId);\n        }\n\n        // Validate function parameters\n        if (\n            _params.assetQuantities.length != _params.assetPrices.length ||\n            (_params.whitelist && _params.whitelistAddresses.length == 0) ||\n            (!_params.whitelist && _params.whitelistAddresses.length > 0)\n        ) {\n            revert SharedErrors.ParamError();\n        }\n\n        // Check if we have a feed for the initial sale currency\n        if (\n            _params.initialSaleCurrency != address(0) &&\n            $.paymentProcessor.getPriceFeedId(_params.initialSaleCurrency) == bytes32(0)\n        ) {\n            revert SharedErrors.ParamError();\n        }\n\n        // Adjust start time and duration if needed\n        uint256 startTime = _params.start < block.timestamp ? block.timestamp : _params.start;\n        uint256 duration = _params.duration == 0 ? 1 weeks : _params.duration;\n\n        // Calculate whitelist end time\n        uint256 whitelistUntil = (_params.whitelist && _params.whitelistDuration != 0)\n            ? startTime + _params.whitelistDuration\n            : 0;\n\n        // Setup initial sale\n        InitialSale storage initialSale = initialSales[_params.releaseId];\n        initialSale.whitelist = _params.whitelist;\n        initialSale.whitelistUntil = whitelistUntil;\n        initialSale.maxBuy = _params.maxBuy;\n        initialSale.saleCurrency = _params.initialSaleCurrency;\n\n        _enforceValidFeeDistribution(_params.fees);\n        initialSale.fees = _params.fees;\n\n        // Process whitelist addresses in a single loop\n        uint256 whitelistLength = _params.whitelistAddresses.length;\n        for (uint256 i = 0; i < whitelistLength; i++) {\n            address buyer = _params.whitelistAddresses[i];\n            if (!isInitialSaleWhitelistBuyer[_params.releaseId][buyer]) {\n                isInitialSaleWhitelistBuyer[_params.releaseId][buyer] = true;\n                initialSaleWhitelistBuyers[_params.releaseId].push(buyer);\n            }\n        }\n\n        release.active = true;\n        initialSale.active = true;\n        initialSale.startTime = startTime;\n        initialSale.endTime = startTime + duration;\n\n        $.gildiManager.startInitialSale(_params.releaseId);\n\n        for (uint256 i = 0; i < _params.assetQuantities.length; i++) {\n            initialSaleListedQuantities[_params.releaseId] += _params.assetQuantities[i];\n\n            // Use the orderBook to create the listing\n            $.orderBook.handleCreateListing(\n                _params.releaseId,\n                _params.seller,\n                _params.assetPrices[i],\n                _params.assetQuantities[i],\n                _params.payoutCurrency,\n                _params.fundsReceiver,\n                DEFAULT_SLIPPAGE_BPS\n            );\n        }\n\n        emit InitialSaleCreated(\n            _params.releaseId,\n            _params.seller,\n            _params.assetQuantities,\n            _params.assetPrices,\n            _params.maxBuy,\n            _params.start,\n            _params.duration,\n            _params.whitelist,\n            _params.whitelistDuration,\n            _params.initialSaleCurrency,\n            _params.payoutCurrency,\n            _params.fees\n        );\n    }\n\n    /// @notice Cancels a release in batches.\n    /// @param _releaseId The ID of the release\n    /// @param _batchSize The batch size (min 1, max 100)\n    function cancelRelease(uint256 _releaseId, uint256 _batchSize) external onlyRole(MARKETPLACE_MANAGER_ROLE) {\n        AppSettings storage $ = appSettings;\n\n        if (_batchSize > 100 || _batchSize == 0) {\n            revert SharedErrors.ParamError();\n        }\n\n        Release storage release = releases[_releaseId];\n        InitialSale storage initialSale = initialSales[_releaseId];\n\n        if (!release.initialized) {\n            revert ReleaseStateError(_releaseId);\n        }\n\n        if (release.active) {\n            revert ReleaseStateError(_releaseId);\n        }\n\n        if (!release.isCancelling) {\n            release.isCancelling = true;\n            emit ReleaseCancellationStarted(_releaseId);\n        }\n\n        if (initialSale.active) {\n            $.gildiManager.cancelInitialSale(_releaseId);\n        }\n\n        uint256 i = 0;\n\n        // Process batch of listings\n        uint256 batchToProcess = _batchSize > 100 ? 100 : _batchSize;\n\n        try $.orderBook.handleUnlistReleaseListings(_releaseId, batchToProcess) returns (uint256 processedCount) {\n            i += processedCount;\n        } catch {}\n        // Process funds using the fund manager\n        uint256 fundsProcessed = 0;\n        if (i < _batchSize) {\n            try $.fundManager.handleCancelReleaseFunds(_releaseId, _batchSize - i) returns (uint256 processedCount) {\n                fundsProcessed = processedCount;\n                i += fundsProcessed;\n            } catch {}\n        } else {\n            return;\n        }\n\n        if ($.orderBook.listedQuantities(_releaseId) == 0 && !$.fundManager.releaseHasFunds(_releaseId)) {\n            // Clean up initial sale mappings in batch constraints\n            if (initialSale.active) {\n                for (; i < initialSaleWhitelistBuyers[_releaseId].length && i < _batchSize; i++) {\n                    address buyer = initialSaleWhitelistBuyers[_releaseId][i];\n                    delete isInitialSaleWhitelistBuyer[_releaseId][buyer];\n                    delete initialSaleMaxBuyCounts[_releaseId][buyer];\n                }\n                if (initialSaleWhitelistBuyers[_releaseId].length > 0) {\n                    return;\n                }\n\n                delete initialSaleWhitelistBuyers[_releaseId];\n                delete initialSaleListedQuantities[_releaseId];\n            }\n\n            delete releases[_releaseId];\n            delete initialSales[_releaseId];\n\n            for (uint256 j = 0; j < releaseIds.length; j++) {\n                if (releaseIds[j] == _releaseId) {\n                    releaseIds[j] = releaseIds[releaseIds.length - 1];\n                    releaseIds.pop();\n                    break;\n                }\n            }\n            emit ReleaseCancelled(_releaseId);\n        }\n    }\n\n    /// @inheritdoc IGildiExchange\n    function createListing(\n        uint256 _releaseId,\n        address _seller,\n        uint256 _pricePerItem,\n        uint256 _quantity,\n        address _payoutCurrency,\n        address _fundsReceiver\n    ) external whenNotPaused {\n        _createListing(\n            _releaseId,\n            _seller,\n            _pricePerItem,\n            _quantity,\n            _payoutCurrency,\n            _fundsReceiver,\n            DEFAULT_SLIPPAGE_BPS\n        );\n    }\n\n    /// @inheritdoc IGildiExchange\n    function createListing(\n        uint256 _releaseId,\n        address _seller,\n        uint256 _pricePerItem,\n        uint256 _quantity,\n        address _payoutCurrency,\n        address _fundsReceiver,\n        uint16 _slippageBps\n    ) external whenNotPaused {\n        _createListing(_releaseId, _seller, _pricePerItem, _quantity, _payoutCurrency, _fundsReceiver, _slippageBps);\n    }\n\n    /// @inheritdoc IGildiExchange\n    function modifyListing(\n        uint256 _listingId,\n        uint256 _newPricePerItem,\n        uint256 _newQuantity,\n        address _payoutCurrency,\n        address _fundsReceiver\n    ) external whenNotPaused {\n        _modifyListing(\n            _listingId,\n            _newPricePerItem,\n            _newQuantity,\n            _payoutCurrency,\n            _fundsReceiver,\n            DEFAULT_SLIPPAGE_BPS\n        );\n    }\n\n    /// @inheritdoc IGildiExchange\n    function modifyListing(\n        uint256 _listingId,\n        uint256 _newPricePerItem,\n        uint256 _newQuantity,\n        address _payoutCurrency,\n        address _fundsReceiver,\n        uint16 _slippageBps\n    ) external whenNotPaused {\n        _modifyListing(_listingId, _newPricePerItem, _newQuantity, _payoutCurrency, _fundsReceiver, _slippageBps);\n    }\n\n    /// @notice Cancels a listing by ID\n    /// @param _listingId The ID of the listing\n    function cancelListing(uint256 _listingId) external nonReentrant whenNotPaused {\n        AppSettings storage $ = appSettings;\n\n        // Get the listing from the order book\n        IGildiExchangeOrderBook.Listing memory listing = $.orderBook.getListing(_listingId);\n\n        // Only the listing owner or someone with ADMIN_ROLE can cancel a listing\n        if (listing.seller != _msgSender() && !hasRole(ADMIN_ROLE, _msgSender())) {\n            revert SharedErrors.NotAllowed();\n        }\n\n        if ($.gildiManager.isInInitialSale(listing.releaseId) && isInInitialSale(listing.releaseId)) {\n            revert ReleaseStateError(listing.releaseId);\n        }\n\n        // Delegate to the order book to remove the listing\n        $.orderBook.handleRemoveListing(_listingId);\n    }\n\n    /// @notice Unlists all listings of a release in batches.\n    /// @param _releaseId The ID of the release (0 = all)\n    /// @param _batchSize The batch size (0 = unlimited)\n    function unlistAllListings(uint256 _releaseId, uint256 _batchSize) external onlyRole(ADMIN_ROLE) {\n        AppSettings storage $ = appSettings;\n\n        if (_batchSize == 0) {\n            _batchSize = type(uint256).max;\n        }\n\n        uint256 totalProcessed = 0;\n\n        // For each release\n        for (uint256 i = 0; i < releaseIds.length && totalProcessed < _batchSize; i++) {\n            uint256 releaseId = releaseIds[i];\n\n            if (releaseId != _releaseId && _releaseId != 0) {\n                continue;\n            }\n\n            uint256 remaining = _batchSize - totalProcessed;\n            uint256 batchToProcess = remaining > 100 ? 100 : remaining; // Process in chunks of max 100\n\n            // Delegate to the order book\n            uint256 processed = $.orderBook.handleUnlistReleaseListings(releaseId, batchToProcess);\n\n            totalProcessed += processed;\n\n            // If we processed less than the batch size, we're done with this release\n            if (processed < batchToProcess) {\n                break;\n            }\n        }\n    }\n\n    /// @inheritdoc IGildiExchange\n    function purchase(\n        uint256 _releaseId,\n        uint256 _amount,\n        uint256 _maxTotalPrice,\n        address _beneficiary,\n        bool _isProxyOperation\n    ) external override nonReentrant whenNotPaused returns (uint256 amountSpent, uint256 amountUsdSpent) {\n        address beneficiary = _beneficiary == address(0) ? _msgSender() : _beneficiary;\n        (bool buyAllowed, uint256 maxBuy) = canBuy(_releaseId, beneficiary);\n        if (!buyAllowed) {\n            revert PurchaseError();\n        }\n\n        if (maxBuy != 0 && _amount > maxBuy) {\n            revert PurchaseError();\n        }\n\n        // Default to non-proxy operation when called directly\n        (amountSpent, amountUsdSpent) = _performPurchase(\n            _releaseId,\n            _msgSender(),\n            _maxTotalPrice,\n            _amount,\n            beneficiary,\n            _isProxyOperation\n        );\n    }\n\n    // ========== Admin Functions ==========\n\n    /// @notice Sets the max buy per transaction\n    /// @param _maxBuyPerTransaction The maximum buy per transaction (0 = unlimited)\n    function setMaxBuyPerTransaction(uint256 _maxBuyPerTransaction) external onlyRole(ADMIN_ROLE) {\n        appSettings.maxBuyPerTransaction = _maxBuyPerTransaction;\n    }\n\n    /// @notice Pauses the contract\n    function pause() external onlyRole(ADMIN_ROLE) {\n        _pause();\n    }\n\n    /// @notice Unpauses the contract\n    function unpause() external onlyRole(ADMIN_ROLE) {\n        _unpause();\n    }\n\n    /// @notice Initializes the release\n    /// @param _tokenId The ID of the release\n    /// @param _additionalFees Additional fees for the release\n    function initializeRelease(\n        uint256 _tokenId,\n        FeeDistribution[] calldata _additionalFees\n    ) external onlyRole(ADMIN_ROLE) {\n        AppSettings storage $ = appSettings;\n        if (releases[_tokenId].initialized) {\n            revert ReleaseStateError(_tokenId);\n        }\n\n        if (!$.gildiManager.releaseExists(_tokenId)) {\n            revert ReleaseNotFound(_tokenId);\n        }\n\n        FeeDistribution[] memory feesToCheck = new FeeDistribution[]($.fees.length + _additionalFees.length);\n        uint256 toCheckIndex = 0;\n\n        for (uint256 i = 0; i < $.fees.length; i++) {\n            feesToCheck[toCheckIndex] = $.fees[i];\n            toCheckIndex++;\n        }\n\n        for (uint256 i = 0; i < _additionalFees.length; i++) {\n            feesToCheck[toCheckIndex] = _additionalFees[i];\n            toCheckIndex++;\n        }\n\n        _enforceValidFeeDistribution(feesToCheck);\n\n        releases[_tokenId] = Release({\n            releaseId: _tokenId,\n            initialized: true,\n            additionalFees: _additionalFees,\n            active: false,\n            isCancelling: false\n        });\n\n        releaseIds.push(_tokenId);\n\n        emit ReleaseInitialized(_tokenId);\n    }\n\n    /// @notice Sets the active state of a release\n    /// @param _releaseId The ID of the release\n    /// @param _active The active state\n    function setReleaseActive(uint256 _releaseId, bool _active) external onlyRole(ADMIN_ROLE) {\n        Release storage release = releases[_releaseId];\n\n        if (!release.initialized) {\n            revert ReleaseStateError(_releaseId);\n        }\n\n        if (_active && release.isCancelling) {\n            revert ReleaseStateError(_releaseId);\n        }\n\n        release.active = _active;\n\n        emit ReleaseActiveStateChanged(_releaseId, _active);\n    }\n\n    /// @notice Sets the fees for a specific release\n    /// @param _releaseId The ID of the release\n    /// @param _additionalFees The additional fees for the release\n    function setReleaseFees(\n        uint256 _releaseId,\n        FeeDistribution[] calldata _additionalFees\n    ) external onlyRole(ADMIN_ROLE) {\n        AppSettings storage $ = appSettings;\n        Release storage release = releases[_releaseId];\n\n        if (!release.initialized) {\n            revert ReleaseStateError(_releaseId);\n        }\n\n        FeeDistribution[] memory feesToCheck = new FeeDistribution[]($.fees.length + _additionalFees.length);\n        uint256 toCheckIndex = 0;\n\n        for (uint256 i = 0; i < $.fees.length; i++) {\n            feesToCheck[toCheckIndex] = $.fees[i];\n            toCheckIndex++;\n        }\n\n        for (uint256 i = 0; i < _additionalFees.length; i++) {\n            feesToCheck[toCheckIndex] = _additionalFees[i];\n            toCheckIndex++;\n        }\n\n        _enforceValidFeeDistribution(feesToCheck);\n        release.additionalFees = _additionalFees;\n\n        emit FeesUpdated(_releaseId);\n    }\n\n    /// @notice Sets the marketplace fees\n    function setFees(FeeDistribution[] calldata _fees) external onlyRole(ADMIN_ROLE) {\n        AppSettings storage $ = appSettings;\n\n        _enforceValidFeeDistribution(_fees);\n        $.fees = _fees;\n\n        emit FeesUpdated(0);\n    }\n\n    /// @notice Sets the number of decimals for price asks\n    /// @param _askDecimals The number of decimals for price asks (max 8)\n    function setAskDecimals(uint8 _askDecimals) public onlyRole(ADMIN_ROLE) {\n        AppSettings storage $ = appSettings;\n        if (_askDecimals == $.priceAskDecimals) {\n            return;\n        }\n\n        if (_askDecimals > 8) {\n            revert SharedErrors.ParamError();\n        }\n\n        // If the decimals changed, we need to make sure there are no listings, if there are, throw error\n        for (uint256 i = 0; i < releaseIds.length; i++) {\n            uint256 releaseId = releaseIds[i];\n            // Check if there are any listings for this release using the OrderBook\n            if ($.orderBook.listedQuantities(releaseId) > 0) {\n                revert SetupError();\n            }\n        }\n\n        $.priceAskDecimals = _askDecimals;\n        emit AskDecimalsSet(_askDecimals);\n    }\n\n    /// @notice Sets the marketplace currency\n    /// @param _marketplaceCurrency The address of the marketplace currency\n    function setMarketplaceCurrency(address _marketplaceCurrency) public onlyRole(ADMIN_ROLE) {\n        _setMarketplaceCurrency(_marketplaceCurrency);\n    }\n\n    /// @inheritdoc IGildiExchange\n    function transferTokenInContext(\n        address _from,\n        address _to,\n        uint256 _value,\n        address _amountCurrency\n    ) external override {\n        AppSettings storage $ = appSettings;\n\n        if (_amountCurrency == address(0) || _from == address(0) || _to == address(0)) {\n            revert SharedErrors.ParamError();\n        }\n\n        // Make sure caller is payment processor or fund manager\n        if (_msgSender() != address($.paymentProcessor) && _msgSender() != address($.fundManager)) {\n            revert SharedErrors.InvalidCaller();\n        }\n\n        if (_from == _to || _value == 0) {\n            return;\n        }\n\n        IERC20 token = IERC20(_amountCurrency);\n        if (_from == address(this)) {\n            token.safeTransfer(_to, _value);\n        } else {\n            token.safeTransferFrom(_from, _to, _value);\n        }\n    }\n\n    /// @inheritdoc IGildiExchange\n    function tryBurnTokenInContext(\n        address _from,\n        uint256 _value,\n        address _amountCurrency\n    ) external override returns (bool) {\n        AppSettings storage $ = appSettings;\n\n        if (_amountCurrency == address(0) || _from == address(0)) {\n            revert SharedErrors.ParamError();\n        }\n\n        // Make sure caller is payment processor\n        if (_msgSender() != address($.paymentProcessor)) {\n            revert SharedErrors.InvalidCaller();\n        }\n\n        IERC20Burnable burnable = IERC20Burnable(_amountCurrency);\n\n        // Try to burn based on source of funds\n        try burnable.burnFrom(_from, _value) {\n            return true;\n        } catch {}\n        return false;\n    }\n\n    /// @notice Sets up the exchange with required dependencies\n    /// @param _gildiPriceOracle The price oracle for currency conversions\n    /// @param _askDecimals The number of decimals for price asks\n    /// @param _orderBook The order book contract for managing listings\n    /// @param _fundManager The fund manager contract for handling funds\n    /// @param _paymentAggregator The payment aggregator for handling payments\n    function setup(\n        IGildiPriceOracle _gildiPriceOracle,\n        uint8 _askDecimals,\n        IGildiExchangeOrderBook _orderBook,\n        IGildiExchangeFundManager _fundManager,\n        IGildiExchangePaymentProcessor _paymentProcessor,\n        IGildiExchangePaymentAggregator _paymentAggregator\n    ) external onlyRole(ADMIN_ROLE) {\n        AppSettings storage $ = appSettings;\n        setAskDecimals(_askDecimals);\n\n        if (\n            address(_gildiPriceOracle) == address(0) ||\n            address(_orderBook) == address(0) ||\n            address(_fundManager) == address(0) ||\n            address(_paymentAggregator) == address(0) ||\n            address(_paymentProcessor) == address(0)\n        ) {\n            revert SharedErrors.ParamError();\n        }\n\n        $.gildiPriceOracle = _gildiPriceOracle;\n        $.orderBook = _orderBook;\n        $.fundManager = _fundManager;\n        $.paymentProcessor = _paymentProcessor;\n        $.paymentAggregator = _paymentAggregator;\n    }\n\n    // ========== View Functions ==========\n\n    /// @notice Gets the whitelist of a release.\n    /// @param _releaseId The ID of the release\n    /// @return whitelist The whitelist of the release\n    function getWhitelist(uint256 _releaseId) external view returns (address[] memory) {\n        return initialSaleWhitelistBuyers[_releaseId];\n    }\n\n    /// @inheritdoc IGildiExchange\n    function quotePricePreview(\n        uint256 _releaseId,\n        uint256 _amountToBuy,\n        address _buyer\n    ) external view override returns (uint256, address, uint256) {\n        AppSettings storage $ = appSettings;\n        Release storage release = releases[_releaseId];\n\n        // Combine multiple state checks into a single condition\n        if ((initialSales[_releaseId].active && !release.initialized) || release.isCancelling || !release.active) {\n            revert ReleaseStateError(_releaseId);\n        }\n\n        // Get the preview information from the OrderBook\n        IGildiExchangeOrderBook.PurchasePreview memory preview = $.orderBook.previewPurchase(\n            _releaseId,\n            _buyer,\n            _amountToBuy\n        );\n\n        // Check if there are enough tokens available\n        if (preview.totalQuantityAvailable < _amountToBuy) {\n            revert InsufficientQuantity(_amountToBuy, preview.totalQuantityAvailable);\n        }\n\n        // Use USD price from OrderBook's extended PurchasePreview\n        return (preview.totalPriceInCurrency, preview.currency, preview.totalPriceUsd);\n    }\n\n    /// @inheritdoc IGildiExchange\n    function getReleaseFees(uint256 _releaseId) public view override returns (FeeDistribution[] memory) {\n        AppSettings storage $ = appSettings;\n        Release storage release = releases[_releaseId];\n\n        // If initial sale is active, return initial sale fees\n        if (initialSales[_releaseId].active) {\n            return initialSales[_releaseId].fees;\n        }\n\n        // If no additional fees, just return global fees\n        if (release.additionalFees.length == 0) {\n            return $.fees;\n        }\n\n        uint256 globalLength = $.fees.length;\n        uint256 additionalLength = release.additionalFees.length;\n        FeeDistribution[] memory combinedFees = new FeeDistribution[](globalLength + additionalLength);\n\n        // Copy global fees first\n        for (uint256 i = 0; i < globalLength; i++) {\n            combinedFees[i] = $.fees[i];\n        }\n\n        // Copy additional fees at offset\n        for (uint256 i = 0; i < additionalLength; i++) {\n            combinedFees[globalLength + i] = release.additionalFees[i];\n        }\n\n        return combinedFees;\n    }\n\n    /// @inheritdoc IGildiExchange\n    function isInInitialSale(uint256 _releaseId) public view override returns (bool) {\n        InitialSale storage initialSale = initialSales[_releaseId];\n        return\n            initialSale.active && block.timestamp < initialSale.endTime && initialSaleListedQuantities[_releaseId] > 0;\n    }\n\n    /// @notice Whether or not the release is in a whitelist sale state\n    /// @param _releaseId The ID of the release\n    function isWhitelistSale(uint256 _releaseId) public view returns (bool) {\n        // First check if it's in initial sale at all\n        if (!isInInitialSale(_releaseId)) {\n            return false;\n        }\n\n        // Check whitelist settings\n        InitialSale storage initialSale = initialSales[_releaseId];\n        if (!initialSale.whitelist) {\n            return false;\n        }\n\n        // Check whitelist timing\n        return initialSale.whitelistUntil == 0 || block.timestamp < initialSale.whitelistUntil;\n    }\n\n    /// @notice Checks if a user can buy a release and determines the maximum amount they can buy\n    /// @dev Considers whitelist status, initial sale status, and transaction limits\n    /// @param _releaseId The ID of the release\n    /// @param _address The address of the buyer\n    /// @return buyAllowed True if the user can buy the release, false otherwise\n    /// @return maxBuyAmount The maximum amount the user can buy (0 if not allowed)\n    function canBuy(uint256 _releaseId, address _address) public view returns (bool buyAllowed, uint256 maxBuyAmount) {\n        AppSettings storage $ = appSettings;\n\n        // Check release is active\n        if (!releases[_releaseId].active) {\n            return (false, 0);\n        }\n\n        // Check whitelist requirements\n        bool isWhitelist = isWhitelistSale(_releaseId);\n        if (isWhitelist && !isInitialSaleWhitelistBuyer[_releaseId][_address]) {\n            return (false, 0);\n        }\n\n        bool inInitialSale = isInInitialSale(_releaseId);\n        if (!inInitialSale) {\n            // Regular sale case - always allowed up to transaction limit\n            return (true, $.maxBuyPerTransaction);\n        }\n\n        // Initial sale timing check\n        InitialSale storage initialSale = initialSales[_releaseId];\n        if (block.timestamp < initialSale.startTime) {\n            return (false, 0);\n        }\n\n        // Initial sale without limit\n        if (initialSale.maxBuy == 0) {\n            return (true, $.maxBuyPerTransaction);\n        }\n\n        // Check user buy limit\n        uint256 userBought = initialSaleMaxBuyCounts[_releaseId][_address];\n        if (userBought >= initialSale.maxBuy) {\n            return (false, 0);\n        }\n\n        // User can buy the remaining amount up to transaction limit\n        return (true, Math.min(initialSale.maxBuy - userBought, $.maxBuyPerTransaction));\n    }\n\n    /// @notice Checks whether or not a list of releases can be sold.\n    /// @param _releaseIds The IDs of the releases\n    /// @return result An array containing whether or not each release can be sold\n    function canSell(uint256[] calldata _releaseIds) external view returns (bool[] memory) {\n        bool[] memory result = new bool[](_releaseIds.length);\n        for (uint256 i = 0; i < _releaseIds.length; i++) {\n            uint256 releaseId = _releaseIds[i];\n            Release storage release = releases[releaseId];\n            result[i] = release.initialized && release.active && !release.isCancelling && !isInInitialSale(releaseId);\n        }\n        return result;\n    }\n\n    /// @notice Gets a release by ID\n    /// @param _releaseId The ID of the release\n    /// @return release The release\n    function getReleaseById(uint256 _releaseId) external view returns (Release memory) {\n        return releases[_releaseId];\n    }\n\n    /// @notice Gets the initial sale by release ID\n    /// @param _releaseId The ID of the release\n    /// @return initialSale The initial sale\n    function getInitialSaleByReleaseId(uint256 _releaseId) external view returns (InitialSale memory) {\n        return initialSales[_releaseId];\n    }\n\n    /// @inheritdoc IGildiExchange\n    function getReleaseIds(bool _activeOnly) external view override returns (uint256[] memory) {\n        if (!_activeOnly) {\n            return releaseIds;\n        }\n\n        // Single-pass algorithm to count and collect active releases simultaneously\n        uint256[] memory tempReleaseIds = new uint256[](releaseIds.length);\n        uint256 activeCount = 0;\n\n        // Store length to avoid multiple storage reads\n        uint256 totalLength = releaseIds.length;\n\n        for (uint256 i = 0; i < totalLength; i++) {\n            uint256 releaseId = releaseIds[i];\n            if (releases[releaseId].active || initialSales[releaseId].active) {\n                tempReleaseIds[activeCount] = releaseId;\n                activeCount++;\n            }\n        }\n\n        // Copy to exactly-sized result array\n        uint256[] memory result = new uint256[](activeCount);\n        for (uint256 i = 0; i < activeCount; i++) {\n            result[i] = tempReleaseIds[i];\n        }\n\n        return result;\n    }\n\n    /// @inheritdoc IGildiExchange\n    function getAppEnvironment() external view override returns (AppEnvironment memory) {\n        return AppEnvironment(appSettings, BASIS_POINTS, ADMIN_ROLE, MARKETPLACE_MANAGER_ROLE, CLAIMER_ROLE);\n    }\n\n    /// @inheritdoc IGildiExchange\n    function getActiveMarketplaceReleaseAsset(uint256 _releaseId) public view override returns (address) {\n        InitialSale storage initialSale = initialSales[_releaseId];\n\n        if (isInInitialSale(_releaseId) && initialSale.saleCurrency != address(0)) {\n            return initialSale.saleCurrency;\n        }\n\n        return address(appSettings.marketplaceCurrency);\n    }\n\n    /// @notice Converts a price in USD to the equivalent amount in the release's active marketplace asset\n    /// @param _releaseId The ID of the release\n    /// @param _priceInUsd The price in USD to convert\n    /// @return activeMarketplaceReleaseAsset The address of the active marketplace asset for the release\n    /// @return priceInAsset The equivalent amount in the active marketplace asset\n    function quotePrice(\n        uint256 _releaseId,\n        uint256 _priceInUsd\n    ) external view returns (address activeMarketplaceReleaseAsset, uint256 priceInAsset) {\n        AppSettings storage $ = appSettings;\n        activeMarketplaceReleaseAsset = getActiveMarketplaceReleaseAsset(_releaseId);\n        priceInAsset = $.paymentProcessor.quoteInCurrency(_priceInUsd, activeMarketplaceReleaseAsset);\n    }\n\n    // ========== Internal Functions ==========\n\n    /// @dev Validates that a release is in a valid state for operations\n    /// @dev Reverts with ReleaseStateError if the release is not initialized, is cancelling, or is not active\n    /// @param _releaseId The ID of the release to validate\n    function _validateReleaseState(uint256 _releaseId) internal view {\n        Release storage release = releases[_releaseId];\n        if (!release.initialized || release.isCancelling || !release.active) {\n            revert ReleaseStateError(_releaseId);\n        }\n    }\n\n    /// @dev Validates that a release is initialized\n    /// @dev Reverts with ReleaseStateError if the release is not initialized\n    /// @param _releaseId The ID of the release to validate\n    function _validateReleaseInitialized(uint256 _releaseId) internal view {\n        if (!releases[_releaseId].initialized) {\n            revert ReleaseStateError(_releaseId);\n        }\n    }\n\n    /// @dev Performs the purchase of tokens from a release\n    /// @dev Handles the entire purchase flow including finding listings, transferring funds, and updating state\n    /// @param _releaseId The ID of the release to purchase\n    /// @param _operator The address performing the purchase operation\n    /// @param _maxTotalPrice The maximum total price the buyer is willing to pay\n    /// @param _amount The amount of tokens to purchase\n    /// @param _buyer The address of the buyer receiving the tokens\n    /// @param _isProxyOperation Whether this is a proxy operation\n    /// @return amountSpent The total amount spent on the purchase\n    /// @return amountUsdSpent The total amount spent in USD\n    function _performPurchase(\n        uint256 _releaseId,\n        address _operator,\n        uint256 _maxTotalPrice,\n        uint256 _amount,\n        address _buyer,\n        bool _isProxyOperation\n    ) internal returns (uint256 amountSpent, uint256 amountUsdSpent) {\n        _endInitialSaleIfNecessary(_releaseId);\n\n        AppSettings storage $ = appSettings;\n        address releaseAsset = getActiveMarketplaceReleaseAsset(_releaseId);\n\n        // Validate release state\n        _validateReleaseState(_releaseId);\n\n        // Check available buy quantity using the order book\n        uint256 availableQuantity = $.orderBook.getAvailableBuyQuantity(_releaseId, _buyer);\n        if (availableQuantity < _amount) {\n            revert NotEnoughTokensInListings(_amount, availableQuantity);\n        }\n\n        bool releaseIsInInitialSale = isInInitialSale(_releaseId);\n\n        // Initialize tracking variables\n        uint256 remainingAmount = _amount;\n        uint256 totalBought = 0;\n        uint256 totalPriceInMarketplaceCurrency = 0;\n        uint256 totalPriceInUsd = 0;\n\n        // Process listings in order of price\n        uint256 current = $.orderBook.getHeadListingId(_releaseId);\n        while (current != 0 && remainingAmount > 0) {\n            // Get the listing details\n            IGildiExchangeOrderBook.Listing memory listing = $.orderBook.getListing(current);\n\n            // Skip self-listings\n            if (listing.seller == _buyer) {\n                current = $.orderBook.getNextListingId(current);\n                continue;\n            }\n\n            // Calculate quantity to buy from this listing\n            uint256 boughtQuantity = listing.quantity >= remainingAmount ? remainingAmount : listing.quantity;\n            remainingAmount -= boughtQuantity;\n\n            // Calculate price and process payment\n            uint256 marketplaceCurrencyPricePerItem = $.paymentProcessor.quoteInCurrency(\n                listing.pricePerItem,\n                releaseAsset\n            );\n            uint256 listingPrice = marketplaceCurrencyPricePerItem * boughtQuantity;\n            uint256 listingUsdPrice = listing.pricePerItem * boughtQuantity;\n            _handlePaymentFlow(\n                _operator,\n                _buyer,\n                listing.fundsReceiver == address(0) ? listing.seller : listing.fundsReceiver,\n                _releaseId,\n                listingPrice,\n                releaseAsset,\n                _isProxyOperation,\n                listing.id,\n                listing.payoutCurrency,\n                listing.slippageBps\n            );\n            totalPriceInMarketplaceCurrency += listingPrice;\n            totalPriceInUsd += listingUsdPrice;\n\n            // Unlock tokens\n            $.gildiManager.unlockTokens(listing.seller, listing.releaseId, boughtQuantity);\n\n            // Transfer ownership using appropriate method based on sale state\n            if (releaseIsInInitialSale) {\n                $.gildiManager.transferOwnershipInitialSale(_releaseId, listing.seller, _buyer, boughtQuantity);\n            } else {\n                $.gildiManager.transferOwnership(_releaseId, listing.seller, _buyer, boughtQuantity);\n            }\n\n            // Log events\n            emit Purchased(\n                _releaseId,\n                _buyer,\n                listing.seller,\n                _operator,\n                listing.id,\n                listing.pricePerItem,\n                boughtQuantity,\n                marketplaceCurrencyPricePerItem,\n                releaseAsset\n            );\n\n            // Update totals\n            totalBought += boughtQuantity;\n\n            // Get next listing before modifying current one\n            uint256 nextId = $.orderBook.getNextListingId(current);\n\n            // Update the orderbook\n            $.orderBook.handleDecreaseListingQuantity(current, boughtQuantity);\n\n            current = nextId;\n        }\n\n        // Ensure price limit wasn't exceeded\n        if (totalPriceInMarketplaceCurrency > _maxTotalPrice) {\n            revert PurchaseError();\n        }\n\n        // Ensure all requested tokens were purchased\n        if (remainingAmount > 0) {\n            revert NotEnoughTokensInListings(_amount, _amount - remainingAmount);\n        }\n\n        // Handle initial sale bookkeeping if needed\n        if (releaseIsInInitialSale) {\n            initialSaleListedQuantities[_releaseId] -= totalBought;\n            initialSaleMaxBuyCounts[_releaseId][_buyer] += _amount;\n\n            if ($.orderBook.listedQuantities(_releaseId) == 0) {\n                _endInitialSale(_releaseId);\n            }\n        }\n\n        return (totalPriceInMarketplaceCurrency, totalPriceInUsd);\n    }\n\n    /// @dev Ends the initial sale for a release\n    /// @dev Cleans up all initial sale data including whitelist information\n    /// @param _releaseId The ID of the release to end initial sale for\n    function _endInitialSale(uint256 _releaseId) internal {\n        AppSettings storage $ = appSettings;\n        address[] storage buyers = initialSaleWhitelistBuyers[_releaseId];\n        uint256 buyersLength = buyers.length;\n\n        // Reset all initial sale data in one go\n        delete initialSales[_releaseId];\n\n        // Clean up whitelist data - use single loop\n        for (uint256 i = 0; i < buyersLength; i++) {\n            address buyer = buyers[i];\n            delete isInitialSaleWhitelistBuyer[_releaseId][buyer];\n            delete initialSaleMaxBuyCounts[_releaseId][buyer];\n        }\n\n        delete initialSaleWhitelistBuyers[_releaseId];\n        delete initialSaleListedQuantities[_releaseId];\n\n        if ($.gildiManager.isInInitialSale(_releaseId)) {\n            $.gildiManager.endInitialSale(_releaseId);\n        }\n\n        emit InitialSaleEnded(_releaseId);\n    }\n\n    /// @dev Creates a new listing\n    /// @param _releaseId The ID of the release\n    /// @param _seller The address of the seller\n    /// @param _pricePerItem The price per item (in USD)\n    /// @param _quantity The quantity of the listing\n    /// @param _payoutCurrency The currency to payout in\n    /// @param _fundsReceiver The address to receive funds from the sale (if address(0), defaults to seller)\n    /// @param _slippageBps The slippage tolerance in basis points\n    function _createListing(\n        uint256 _releaseId,\n        address _seller,\n        uint256 _pricePerItem,\n        uint256 _quantity,\n        address _payoutCurrency,\n        address _fundsReceiver,\n        uint16 _slippageBps\n    ) internal nonReentrant {\n        _endInitialSaleIfNecessary(_releaseId);\n\n        AppSettings storage $ = appSettings;\n        Release storage release = releases[_releaseId];\n\n        // Only the seller or someone with ADMIN_ROLE can create a listing\n        if (_seller != _msgSender() && !hasRole(ADMIN_ROLE, _msgSender())) {\n            revert SharedErrors.NotAllowed();\n        }\n\n        // Validation\n        if (release.isCancelling || !release.active) {\n            revert ReleaseStateError(_releaseId);\n        }\n\n        if ($.gildiManager.isLocked(_releaseId)) {\n            revert ReleaseStateError(_releaseId);\n        }\n\n        if ($.gildiManager.isInInitialSale(_releaseId) && isInInitialSale(_releaseId)) {\n            revert ReleaseStateError(_releaseId);\n        }\n\n        if (_slippageBps > BASIS_POINTS) {\n            revert SharedErrors.ParamError();\n        }\n\n        // Delegate to the order book\n        $.orderBook.handleCreateListing(\n            _releaseId,\n            _seller,\n            _pricePerItem,\n            _quantity,\n            _payoutCurrency,\n            _fundsReceiver,\n            _slippageBps\n        );\n    }\n\n    /// @dev Modifies an existing listing\n    /// @param _listingId The ID of the listing\n    /// @param _newPricePerItem The new price per item (in USD)\n    /// @param _newQuantity The new quantity of the listing\n    /// @param _payoutCurrency The new payout currency\n    /// @param _fundsReceiver The new address to receive funds from the sale (if address(0), defaults to seller)\n    /// @param _slippageBps The new slippage tolerance in basis points\n    function _modifyListing(\n        uint256 _listingId,\n        uint256 _newPricePerItem,\n        uint256 _newQuantity,\n        address _payoutCurrency,\n        address _fundsReceiver,\n        uint16 _slippageBps\n    ) internal nonReentrant {\n        _endInitialSaleIfNecessary(_listingId);\n\n        AppSettings storage $ = appSettings;\n\n        // Get the listing from the order book\n        IGildiExchangeOrderBook.Listing memory listing = $.orderBook.getListing(_listingId);\n\n        // Only the listing owner or someone with ADMIN_ROLE can modify a listing\n        if (listing.seller != _msgSender() && !hasRole(ADMIN_ROLE, _msgSender())) {\n            revert SharedErrors.NotAllowed();\n        }\n\n        if ($.gildiManager.isInInitialSale(listing.releaseId) && isInInitialSale(listing.releaseId)) {\n            revert ReleaseStateError(listing.releaseId);\n        }\n\n        if (_slippageBps > BASIS_POINTS) {\n            revert SharedErrors.ParamError();\n        }\n\n        // Delegate to the order book\n        $.orderBook.handleModifyListing(\n            _listingId,\n            _newPricePerItem,\n            _newQuantity,\n            _payoutCurrency,\n            _fundsReceiver,\n            _slippageBps\n        );\n    }\n\n    /// @dev Handles currency transfers between buyers and sellers\n    /// @dev Determines whether to use fund or direct transfer based on initial sale status\n    /// @param _operator The address of the operator\n    /// @param _buyer The address of the buyer\n    /// @param _seller The address of the seller\n    /// @param _releaseId The ID of the release\n    /// @param _value The value to transfer\n    /// @param _currencyAddress The address of the currency to transfer\n    /// @param _isProxyOperation Whether this is a proxy operation\n    /// @param _listingId The ID of the listing\n    /// @param _payoutCurrency The currency to payout in\n    /// @param _slippageBps The slippage tolerance in basis points\n    function _handlePaymentFlow(\n        address _operator,\n        address _buyer,\n        address _seller,\n        uint256 _releaseId,\n        uint256 _value,\n        address _currencyAddress,\n        bool _isProxyOperation,\n        uint256 _listingId,\n        address _payoutCurrency,\n        uint16 _slippageBps\n    ) internal {\n        _validateReleaseInitialized(_releaseId);\n\n        AppSettings storage $ = appSettings;\n\n        bool isFund = isInInitialSale(_releaseId);\n\n        if (isFund) {\n            // Process fees and create funds, passing the proxy operation flag\n            $.paymentProcessor.handleProcessPaymentWithFees(\n                _releaseId,\n                _buyer,\n                _seller,\n                _value,\n                _currencyAddress,\n                true,\n                _operator,\n                _isProxyOperation,\n                _listingId,\n                _payoutCurrency,\n                _slippageBps\n            );\n        } else {\n            // Process fees and make direct transfers\n            // For direct transfers we don't need to track the proxy operation flag\n            $.paymentProcessor.handleProcessPaymentWithFees(\n                _releaseId,\n                _buyer,\n                _seller,\n                _value,\n                _currencyAddress,\n                false, // _createFund\n                _operator, // Use the actual operator, not the buyer\n                false, // _isProxyOperation\n                _listingId,\n                _payoutCurrency,\n                _slippageBps\n            );\n        }\n    }\n\n    /// @dev Validates that fee distributions are valid\n    /// @dev Ensures that fee percentages don't exceed 100% (BASIS_POINTS) for both parent and sub-fees\n    /// @param _feeDistributions Array of fee distributions to validate\n    function _enforceValidFeeDistribution(FeeDistribution[] memory _feeDistributions) internal pure {\n        uint256 sum = 0;\n        uint256 feeLength = _feeDistributions.length;\n\n        for (uint256 i = 0; i < feeLength; i++) {\n            // Add parent fee, check immediately\n            sum += _feeDistributions[i].feeReceiver.value;\n            if (sum > BASIS_POINTS) {\n                revert SetupError();\n            }\n\n            // Check sub fees in a separate loop\n            uint256 subSum = 0;\n            uint256 subLength = _feeDistributions[i].subFeeReceivers.length;\n\n            for (uint256 j = 0; j < subLength; j++) {\n                subSum += _feeDistributions[i].subFeeReceivers[j].value;\n            }\n\n            if (subSum > BASIS_POINTS) {\n                revert SetupError();\n            }\n        }\n    }\n\n    /// @dev Checks if an initial sale should be ended and ends it if necessary\n    /// @dev Ends the initial sale if it's active but no longer in the initial sale period\n    /// @param _releaseId The ID of the release to check\n    function _endInitialSaleIfNecessary(uint256 _releaseId) internal {\n        if (initialSales[_releaseId].active && !isInInitialSale(_releaseId)) {\n            _endInitialSale(_releaseId);\n        }\n    }\n\n    /// @dev Sets the marketplace currency\n    /// @param _marketplaceCurrency The address of the marketplace currency\n    function _setMarketplaceCurrency(address _marketplaceCurrency) private {\n        AppSettings storage $ = appSettings;\n        $.marketplaceCurrency = IERC20(_marketplaceCurrency);\n\n        emit MarketplaceCurrencySet(_marketplaceCurrency);\n    }\n\n    // ---------------------------------------------------------------------------\n    // End of contract logic\n    // ---------------------------------------------------------------------------\n\n    // ---------------------------------------------------------------------------\n    // Fallback functions\n    // ---------------------------------------------------------------------------\n\n    /// @notice Fallback function to prevent direct Ether transfers\n    fallback() external payable {\n        revert SharedErrors.NotAllowed();\n    }\n\n    /// @notice Fallback function to prevent direct Ether transfers\n    receive() external payable {\n        revert SharedErrors.NotAllowed();\n    }\n}\n"
    },
    "contracts/marketplace/exchange/GildiExchangeFundManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport {ReentrancyGuardUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol';\nimport {\n    IGildiExchange,\n    IGildiExchangePaymentAggregator\n} from '../../interfaces/marketplace/exchange/IGildiExchange.sol';\nimport {IGildiExchangeFundManager} from '../../interfaces/marketplace/exchange/IGildiExchangeFundManager.sol';\nimport {EnumerableSet} from '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport {SharedErrors} from '../../libraries/marketplace/exchange/SharedErrors.sol';\n\n/// @title Gildi Exchange Fund Manager\n/// @notice Manages fund functionality for the Gildi Exchange marketplace.\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\ncontract GildiExchangeFundManager is Initializable, ReentrancyGuardUpgradeable, IGildiExchangeFundManager {\n    using EnumerableSet for EnumerableSet.UintSet;\n    using SafeERC20 for IERC20;\n\n    // ========== Events ==========\n    /// @notice Emitted when a user claims funds\n    /// @param releaseId The ID of the release\n    /// @param fundParticipant The fund participant (seller or fee participant) claiming funds\n    /// @param amount The amount claimed\n    /// @param currency The currency of the fund\n    event FundClaimed(uint256 indexed releaseId, address indexed fundParticipant, uint256 amount, address currency);\n\n    /// @notice Emitted when an fund is cancelled and funds are returned\n    /// @param releaseId The ID of the release\n    /// @param fundParticipant The fund participant (seller or fee participant)\n    /// @param returnedTo The address that received the returned funds\n    /// @param amount The amount returned\n    /// @param currency The currency of the fund\n    event FundCancelled(\n        uint256 indexed releaseId,\n        address indexed fundParticipant,\n        address indexed returnedTo,\n        uint256 amount,\n        address currency\n    );\n\n    /// @notice Emitted when an fund is added\n    /// @param releaseId The ID of the release\n    /// @param fundParticipant The fund participant (seller or fee participant)\n    /// @param amount The amount added\n    /// @param amountCurrency The currency of the fund amount\n    /// @param payoutCurrency The currency to payout in\n    event FundAdded(\n        uint256 indexed releaseId,\n        address indexed fundParticipant,\n        uint256 amount,\n        address amountCurrency,\n        address payoutCurrency\n    );\n\n    /// @notice Emitted when funds are transferred to a participant\n    /// @param releaseId The ID of the release\n    /// @param from The contract address (normally this contract)\n    /// @param to The fund participant receiving the funds\n    /// @param sourceToken The source token used for payment\n    /// @param amount The amount of source token\n    /// @param payoutToken The token received by the recipient (may differ from sourceToken if swapped)\n    /// @param swapAmount The amount received after swap (if performed)\n    /// @param swapRequested Whether a token swap was requested\n    /// @param swapSuccessful Whether the swap was successful (if requested)\n    /// @param slippageBps The slippage tolerance in basis points used for swaps\n    event FundTransferred(\n        uint256 indexed releaseId,\n        address indexed from,\n        address indexed to,\n        address sourceToken,\n        uint256 amount,\n        address payoutToken,\n        uint256 swapAmount,\n        bool swapRequested,\n        bool swapSuccessful,\n        uint16 slippageBps\n    );\n\n    // ========== Errors ==========\n    /// @dev Error thrown when an incompatible currency is provided\n    error InvalidCurrency();\n\n    /// @dev Error thrown when a fund is not found\n    /// @param releaseId The ID of the release\n    /// @param participant The address of the fund participant\n    error FundNotFound(uint256 releaseId, address participant);\n\n    // ========== Structs ==========\n    /// @notice Structure to hold pending fund amounts for a release\n    struct PendingFundAmounts {\n        /// @dev The ID of the release\n        uint256 releaseId;\n        /// @dev The list of participants with funds\n        address[] participants;\n        /// @dev The fund amounts for each participant\n        FundAmount[] amounts;\n        /// @dev Whether the funds are claimable\n        bool claimable;\n    }\n\n    // ========== Constants ==========\n    /// @notice Default slippage tolerance in basis points (5%)\n    uint16 public constant DEFAULT_SLIPPAGE_BPS = 500;\n\n    // ========== Storage Variables ==========\n\n    /// @notice The GildiExchange contract that calls this contract\n    IGildiExchange public gildiExchange;\n\n    /// @notice A set of release IDs that have funds\n    EnumerableSet.UintSet private releaseIdsWithFunds;\n\n    /// @notice Maps release IDs to the funds for each participant\n    /// @dev releaseId => participant => funds[]\n    mapping(uint256 => mapping(address => Fund[])) private releaseFundsByParticipant;\n\n    /// @notice Maps release IDs to all fund participants\n    /// @dev releaseId => participants[]\n    mapping(uint256 => address[]) private releaseFundParticipants;\n\n    /// @notice Maps release IDs to the total fund amount for each participant\n    /// @dev releaseId => participant => amount\n    mapping(uint256 => mapping(address => FundAmount)) private releaseFundAmountByParticipant;\n\n    /// @notice Ensures that only the GildiExchange contract can call this function\n    modifier onlyGildiExchange() {\n        if (msg.sender != address(gildiExchange)) {\n            revert SharedErrors.InvalidCaller();\n        }\n        _;\n    }\n\n    /// @notice Ensures that only the payment processor can call this function\n    modifier onlyPaymentProcessor() {\n        IGildiExchange.AppEnvironment memory env = gildiExchange.getAppEnvironment();\n        if (msg.sender != address(env.settings.paymentProcessor)) {\n            revert SharedErrors.InvalidCaller();\n        }\n        _;\n    }\n\n    modifier onlyClaimer() {\n        IGildiExchange.AppEnvironment memory env = gildiExchange.getAppEnvironment();\n        bytes32 claimerRole = env.claimerRole;\n        if (!gildiExchange.hasRole(claimerRole, msg.sender)) {\n            revert SharedErrors.InvalidCaller();\n        }\n        _;\n    }\n\n    // ========== Constructor and Initializer ==========\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Initializes the contract\n    /// @param _gildiExchange The address of the GildiExchange contract\n    function initialize(address _gildiExchange) external initializer {\n        __ReentrancyGuard_init();\n\n        gildiExchange = IGildiExchange(_gildiExchange);\n    }\n\n    // ========== External View Functions ==========\n\n    /// @notice Gets all fund participants for a release\n    /// @param _releaseId The ID of the release\n    /// @return An array of participant addresses\n    function getReleaseFundParticipants(uint256 _releaseId) external view returns (address[] memory) {\n        return releaseFundParticipants[_releaseId];\n    }\n\n    /// @notice Gets the total fund amount for a participant of a release\n    /// @param _releaseId The ID of the release\n    /// @param _participant The address of the fund participant\n    /// @return The fund amount details\n    function getReleaseFundAmount(uint256 _releaseId, address _participant) external view returns (FundAmount memory) {\n        return releaseFundAmountByParticipant[_releaseId][_participant];\n    }\n\n    /// @notice Retrieves funds for a participant of a release\n    /// @param _releaseId The ID of the release\n    /// @param _participant The address of the fund participant\n    /// @param _cursor The starting index for pagination\n    /// @param _length The number of funds to retrieve\n    /// @return funds An array of funds\n    /// @return nextCursor The next cursor for pagination\n    function getReleaseFunds(\n        uint256 _releaseId,\n        address _participant,\n        uint256 _cursor,\n        uint256 _length\n    ) external view returns (Fund[] memory funds, uint256 nextCursor) {\n        Fund[] storage participantFunds = releaseFundsByParticipant[_releaseId][_participant];\n        if (_cursor >= participantFunds.length) {\n            return (new Fund[](0), participantFunds.length);\n        }\n\n        // Default length: 100\n        if (_length == 0) {\n            _length = 100;\n        }\n\n        // Return the funds starting from the cursor and limited by length\n        uint256 start = _cursor;\n        uint256 end = start + _length;\n        if (end > participantFunds.length) {\n            end = participantFunds.length;\n        }\n\n        // Return the funds\n        funds = new Fund[](end - start);\n        for (uint256 i = start; i < end; i++) {\n            funds[i - start] = participantFunds[i];\n        }\n\n        nextCursor = end;\n    }\n\n    /// @inheritdoc IGildiExchangeFundManager\n    function releaseHasFunds(uint256 _releaseId) external view returns (bool) {\n        return releaseIdsWithFunds.contains(_releaseId);\n    }\n\n    /// @notice Gets all release IDs that have funds\n    /// @return An array of release IDs that currently have active funds\n    function getReleaseIdsWithFunds() external view returns (uint256[] memory) {\n        uint256 length = releaseIdsWithFunds.length();\n        uint256[] memory ids = new uint256[](length);\n\n        for (uint256 i = 0; i < length; i++) {\n            ids[i] = releaseIdsWithFunds.at(i);\n        }\n\n        return ids;\n    }\n\n    // ========== External Non-View Functions ==========\n\n    /// @inheritdoc IGildiExchangeFundManager\n    function handleAddToFund(\n        uint256 _releaseId,\n        address _participant,\n        address _buyer,\n        address _operator,\n        bool _isProxyOperation,\n        uint256 _amount,\n        address _amountCurrency,\n        address _payoutCurrency\n    ) external onlyPaymentProcessor {\n        // Create or add to fund\n        if (releaseFundsByParticipant[_releaseId][_participant].length == 0) {\n            releaseFundParticipants[_releaseId].push(_participant);\n            // Add release to releaseIdsWithFunds if not already added\n            if (!releaseIdsWithFunds.contains(_releaseId)) {\n                releaseIdsWithFunds.add(_releaseId);\n            }\n        }\n\n        releaseFundsByParticipant[_releaseId][_participant].push(\n            Fund({\n                buyer: _buyer,\n                operator: _operator,\n                fundParticipant: _participant,\n                isProxyOperation: _isProxyOperation,\n                amount: FundAmount(_amount, _amountCurrency),\n                payoutCurrency: _payoutCurrency\n            })\n        );\n\n        // Update total fund amount\n        FundAmount storage fundAmount = releaseFundAmountByParticipant[_releaseId][_participant];\n        fundAmount.value += _amount;\n\n        if (fundAmount.currencyAddress == address(0)) {\n            fundAmount.currencyAddress = _amountCurrency;\n        } else if (fundAmount.currencyAddress != _amountCurrency) {\n            revert InvalidCurrency();\n        }\n\n        // Emit event for fund added\n        emit FundAdded(_releaseId, _participant, _amount, _amountCurrency, _payoutCurrency);\n    }\n\n    /// @notice Claims funds for a participant of a release\n    /// @param _releaseId The ID of the release\n    /// @param _fundParticipant The address of the fund participant\n    /// @param _slippageBps Optional slippage tolerance in basis points (100 = 1%, 500 = 5%)\n    function claimFunds(uint256 _releaseId, address _fundParticipant, uint16 _slippageBps) external nonReentrant {\n        _claimFunds(_releaseId, _fundParticipant, _slippageBps);\n    }\n\n    /// @notice Claims funds for a participant of a release with default slippage (5%)\n    /// @param _releaseId The ID of the release\n    /// @param _fundParticipant The address of the fund participant\n    function claimFunds(uint256 _releaseId, address _fundParticipant) external nonReentrant {\n        _claimFunds(_releaseId, _fundParticipant, DEFAULT_SLIPPAGE_BPS);\n    }\n\n    /// @notice Claims all funds for a participant across all releases\n    /// @param _fundParticipant The address of the fund participant\n    /// @param _slippageBps Optional slippage tolerance in basis points (100 = 1%, 500 = 5%)\n    function claimAllFunds(address _fundParticipant, uint16 _slippageBps) external nonReentrant {\n        _claimAllFunds(_fundParticipant, _slippageBps);\n    }\n\n    /// @notice Claims all funds for a participant across all releases with default slippage (5%)\n    /// @param _fundParticipant The address of the fund participant\n    function claimAllFunds(address _fundParticipant) external nonReentrant {\n        _claimAllFunds(_fundParticipant, DEFAULT_SLIPPAGE_BPS);\n    }\n\n    /// @notice Claims all funds for all participants of a specific release\n    /// @param _releaseId The ID of the release\n    function claimAllFundsByReleaseId(uint256 _releaseId) external nonReentrant {\n        if (!_isClaimable(_releaseId)) {\n            revert SharedErrors.NotAllowed();\n        }\n\n        _claimAllFundsByReleaseId(_releaseId);\n    }\n\n    /// @notice Claims all funds for all participants across all releases\n    function claimAllFunds() external nonReentrant {\n        for (uint256 i = releaseIdsWithFunds.length(); i > 0; i--) {\n            uint256 releaseId = releaseIdsWithFunds.at(i - 1);\n\n            if (_isClaimable(releaseId)) {\n                _claimAllFundsByReleaseId(releaseId);\n            }\n        }\n    }\n\n    /// @inheritdoc IGildiExchangeFundManager\n    function handleCancelReleaseFunds(\n        uint256 _releaseId,\n        uint256 _batchSize\n    ) external onlyGildiExchange returns (uint256 processed) {\n        uint256 i = 0;\n\n        // Process funds\n        while (releaseFundParticipants[_releaseId].length > 0 && i < _batchSize) {\n            uint256 length = releaseFundParticipants[_releaseId].length;\n            address fundParticipant = releaseFundParticipants[_releaseId][length - 1];\n            Fund[] storage funds = releaseFundsByParticipant[_releaseId][fundParticipant];\n\n            while (funds.length > 0 && i < _batchSize) {\n                Fund storage fund = funds[funds.length - 1];\n\n                // Determine the correct refund participant based on operation type\n                address refundParticipant = fund.isProxyOperation ? fund.buyer : fund.operator;\n\n                try IERC20(fund.amount.currencyAddress).transfer(refundParticipant, fund.amount.value) returns (\n                    bool success\n                ) {\n                    if (!success) continue; // Skip if transfer failed, silently fail, token might be locked\n                    emit FundCancelled(\n                        _releaseId,\n                        fund.fundParticipant,\n                        refundParticipant,\n                        fund.amount.value,\n                        fund.amount.currencyAddress\n                    );\n                    funds.pop();\n                } catch {}\n                i++;\n            }\n\n            if (funds.length == 0) {\n                delete releaseFundsByParticipant[_releaseId][fundParticipant];\n                delete releaseFundAmountByParticipant[_releaseId][fundParticipant];\n                releaseFundParticipants[_releaseId].pop();\n\n                // Remove release ID from set if no more participants\n                if (releaseFundParticipants[_releaseId].length == 0) {\n                    releaseIdsWithFunds.remove(_releaseId);\n                }\n            }\n        }\n\n        return i;\n    }\n\n    // ========== Public View Functions ==========\n\n    /// @notice Fetches pending fund amounts for a participant and release\n    /// @dev if releaseId is 0, fetches for all releases, if participant is 0, fetches for all participants\n    /// @param _releaseId The ID of the release\n    /// @param _participant The address of the fund participant\n    /// @return An array of pending fund amounts with claimable status\n    function fetchPendingFundAmounts(\n        uint256 _releaseId,\n        address _participant\n    ) public view returns (PendingFundAmounts[] memory) {\n        uint256[] memory releaseIds;\n\n        if (_releaseId != 0) {\n            releaseIds = new uint256[](1);\n            releaseIds[0] = _releaseId;\n        } else {\n            uint256 length = releaseIdsWithFunds.length();\n            releaseIds = new uint256[](length);\n\n            for (uint256 i = 0; i < length; i++) {\n                releaseIds[i] = releaseIdsWithFunds.at(i);\n            }\n        }\n\n        PendingFundAmounts[] memory tempPendingReleaseAmounts = new PendingFundAmounts[](releaseIds.length);\n\n        uint256 countRelease = 0;\n        for (uint256 i = 0; i < releaseIds.length; i++) {\n            uint256 releaseId = releaseIds[i];\n            address[] storage participants = releaseFundParticipants[releaseId];\n            if (participants.length == 0) {\n                // Release has no funds\n                continue;\n            }\n\n            uint256 countParticipants = 0;\n            address[] memory tempParticipants = new address[](participants.length);\n            FundAmount[] memory tempFundAmounts = new FundAmount[](participants.length);\n\n            for (uint256 j = 0; j < participants.length; j++) {\n                address participant = participants[j];\n                if (_participant != address(0) && participant != _participant) {\n                    continue;\n                }\n\n                FundAmount storage fundAmount = releaseFundAmountByParticipant[releaseId][participant];\n                if (fundAmount.value == 0) {\n                    continue;\n                }\n\n                tempParticipants[countParticipants] = participant;\n                tempFundAmounts[countParticipants] = fundAmount;\n                countParticipants++;\n            }\n\n            if (countParticipants == 0) {\n                continue;\n            }\n\n            // Resize participants and amounts arrays\n            address[] memory resizedParticipants = new address[](countParticipants);\n            FundAmount[] memory resizedFundAmounts = new FundAmount[](countParticipants);\n            for (uint256 k = 0; k < countParticipants; k++) {\n                resizedParticipants[k] = tempParticipants[k];\n                resizedFundAmounts[k] = tempFundAmounts[k];\n            }\n\n            tempPendingReleaseAmounts[countRelease] = PendingFundAmounts({\n                releaseId: releaseId,\n                participants: resizedParticipants,\n                amounts: resizedFundAmounts,\n                claimable: _isClaimable(releaseId)\n            });\n            countRelease++;\n        }\n\n        // Resize pending release amounts array\n        PendingFundAmounts[] memory pendingReleaseAmounts = new PendingFundAmounts[](countRelease);\n        for (uint256 i = 0; i < countRelease; i++) {\n            pendingReleaseAmounts[i] = tempPendingReleaseAmounts[i];\n        }\n\n        return pendingReleaseAmounts;\n    }\n\n    // ========== Internal Functions ==========\n\n    /// @dev Claims funds for a specific participant of a release\n    /// @param _releaseId The ID of the release\n    /// @param _fundParticipant The address of the fund participant\n    /// @param _slippageBps Slippage tolerance in basis points (100 = 1%, 500 = 5%)\n    function _claimFunds(uint256 _releaseId, address _fundParticipant, uint16 _slippageBps) internal {\n        if (_fundParticipant == address(0)) {\n            revert SharedErrors.ParamError();\n        }\n\n        if (gildiExchange.isInInitialSale(_releaseId)) {\n            revert SharedErrors.NotAllowed();\n        }\n\n        bytes32 claimerRole = gildiExchange.getAppEnvironment().claimerRole;\n        // If the caller does not have CLAIMER_ROLE he is only allowed to claim funds for himself\n        if (!gildiExchange.hasRole(claimerRole, msg.sender) && msg.sender != _fundParticipant) {\n            revert SharedErrors.NotAllowed();\n        }\n\n        // Check if there's an fund to claim\n        FundAmount storage fundAmount = releaseFundAmountByParticipant[_releaseId][_fundParticipant];\n        if (fundAmount.value == 0) revert FundNotFound(_releaseId, _fundParticipant);\n\n        // Get the fund details to determine the payout currency\n        Fund[] storage funds = releaseFundsByParticipant[_releaseId][_fundParticipant];\n        if (funds.length == 0) revert FundNotFound(_releaseId, _fundParticipant);\n\n        // Cache these values to reduce stack depth\n        uint256 amountValue = fundAmount.value;\n        address currencyAddress = fundAmount.currencyAddress;\n        address payoutCurrency = funds[0].payoutCurrency;\n\n        // Transfer logic\n        _handleFundTransfer(_releaseId, _fundParticipant, amountValue, currencyAddress, payoutCurrency, _slippageBps);\n\n        // Clean up fund data\n        delete releaseFundsByParticipant[_releaseId][_fundParticipant];\n        delete releaseFundAmountByParticipant[_releaseId][_fundParticipant];\n\n        // Remove fund participant from array using swap-and-pop pattern\n        address[] storage fundParticipants = releaseFundParticipants[_releaseId];\n        uint256 length = fundParticipants.length;\n\n        for (uint256 i = 0; i < length; i++) {\n            if (fundParticipants[i] == _fundParticipant) {\n                // Replace with last element and pop\n                fundParticipants[i] = fundParticipants[length - 1];\n                fundParticipants.pop();\n                break;\n            }\n        }\n\n        // Remove release ID from set if no more participants\n        if (fundParticipants.length == 0) {\n            releaseIdsWithFunds.remove(_releaseId);\n        }\n\n        emit FundClaimed(_releaseId, _fundParticipant, amountValue, currencyAddress);\n    }\n\n    /// @dev Claims all funds for a participant across all releases. Iterates backwards\n    /// over releases and participants to safely handle state modifications during claims.\n    /// @param _fundParticipant The address of the fund participant\n    /// @param _slippageBps Slippage tolerance in basis points (100 = 1%, 500 = 5%)\n    function _claimAllFunds(address _fundParticipant, uint16 _slippageBps) internal {\n        for (uint256 i = releaseIdsWithFunds.length(); i > 0; i--) {\n            uint256 releaseId = releaseIdsWithFunds.at(i - 1);\n\n            if (!_isClaimable(releaseId)) {\n                continue;\n            }\n\n            address[] storage participants = releaseFundParticipants[releaseId];\n            // Iterate backwards to avoid skipping elements on mutation\n            for (uint256 j = participants.length; j > 0; j--) {\n                if (_fundParticipant != address(0) && _fundParticipant == participants[j - 1]) {\n                    _claimFunds(releaseId, _fundParticipant, _slippageBps);\n                }\n            }\n        }\n    }\n\n    /// @dev Claims all funds for all participants of a specific release\n    /// @param _releaseId The ID of the release\n    function _claimAllFundsByReleaseId(uint256 _releaseId) internal onlyClaimer {\n        address[] storage participants = releaseFundParticipants[_releaseId];\n        for (uint256 i = participants.length; i > 0; i--) {\n            address fundParticipant = participants[i - 1];\n            _claimFunds(_releaseId, fundParticipant, DEFAULT_SLIPPAGE_BPS);\n        }\n    }\n\n    // ========== Private Functions ==========\n\n    /// @dev Checks if a release is claimable\n    /// @param _releaseId The ID of the release\n    /// @return True if the release is claimable, false otherwise\n    function _isClaimable(uint256 _releaseId) private view returns (bool) {\n        if (gildiExchange.isInInitialSale(_releaseId) || !releaseIdsWithFunds.contains(_releaseId)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /// @dev Handles the transfer logic for a fund claim\n    /// @param _fundParticipant The address of the fund participant\n    /// @param _amount The amount to transfer\n    /// @param _currencyAddress The currency address of the fund\n    /// @param _payoutCurrency The preferred payout currency\n    /// @param _slippageBps Slippage tolerance in basis points\n    function _handleFundTransfer(\n        uint256 _releaseId,\n        address _fundParticipant,\n        uint256 _amount,\n        address _currencyAddress,\n        address _payoutCurrency,\n        uint16 _slippageBps\n    ) private {\n        uint16 basisPoints = gildiExchange.getAppEnvironment().basisPoints;\n\n        if (_slippageBps > basisPoints) {\n            revert SharedErrors.ParamError();\n        }\n\n        bool swapRequested = false;\n        bool swapSuccessful = false;\n        address finalPayoutCurrency = _payoutCurrency;\n        uint256 finalAmount = _amount; // Initialize to original amount, will be updated if swap is successful\n\n        // If payout currency is the same as the fund currency or not specified, direct transfer\n        if (_payoutCurrency == address(0) || _payoutCurrency == _currencyAddress) {\n            IERC20(_currencyAddress).safeTransfer(_fundParticipant, _amount);\n            finalPayoutCurrency = _currencyAddress;\n        } else {\n            swapRequested = true;\n\n            // Get the payment aggregator from the exchange\n            IGildiExchangePaymentAggregator paymentAggregator = gildiExchange\n                .getAppEnvironment()\n                .settings\n                .paymentAggregator;\n\n            // If payment aggregator is not set, fallback to direct transfer\n            if (address(paymentAggregator) == address(0)) {\n                IERC20(_currencyAddress).safeTransfer(_fundParticipant, _amount);\n                finalPayoutCurrency = _currencyAddress;\n            } else {\n                // Approve the payment aggregator to spend the tokens\n                IERC20 sourceToken = IERC20(_currencyAddress);\n                uint256 allowance = sourceToken.allowance(address(this), address(paymentAggregator));\n                if (allowance < _amount) {\n                    sourceToken.forceApprove(address(paymentAggregator), type(uint256).max);\n                }\n\n                // Preview the swap to get expected amount\n                (bool hasValidRoute, uint256 expectedAmount, ) = paymentAggregator.previewSwapOut(\n                    _amount,\n                    _currencyAddress,\n                    _payoutCurrency\n                );\n                if (hasValidRoute && expectedAmount > 0) {\n                    // Calculate minimum amount based on slippage (10000 - slippageBps) / 10000\n                    uint256 minAmount = (expectedAmount * (basisPoints - _slippageBps)) / basisPoints;\n                    try\n                        paymentAggregator.swapOut(\n                            _amount,\n                            _currencyAddress,\n                            _payoutCurrency,\n                            minAmount,\n                            _fundParticipant\n                        )\n                    returns (uint256 swapAmount) {\n                        // Swap successful\n                        swapSuccessful = true;\n                        finalPayoutCurrency = _payoutCurrency;\n                        finalAmount = swapAmount;\n                    } catch {\n                        // Swap failed, fallback to direct transfer\n                        sourceToken.safeTransfer(_fundParticipant, _amount);\n                        finalPayoutCurrency = _currencyAddress;\n                    }\n                } else {\n                    // No valid route, fallback to direct transfer\n                    sourceToken.safeTransfer(_fundParticipant, _amount);\n                    finalPayoutCurrency = _currencyAddress;\n                }\n            }\n        }\n\n        // Emit fund transferred event\n        emit FundTransferred(\n            _releaseId,\n            address(this),\n            _fundParticipant,\n            _currencyAddress,\n            _amount,\n            finalPayoutCurrency,\n            finalAmount,\n            swapRequested,\n            swapSuccessful,\n            _slippageBps\n        );\n    }\n\n    // ---------------------------------------------------------------------------\n    // Fallback functions\n    // ---------------------------------------------------------------------------\n\n    /// @notice Fallback function to prevent direct Ether transfers\n    fallback() external payable {\n        revert SharedErrors.NotAllowed();\n    }\n\n    /// @notice Fallback function to prevent direct Ether transfers\n    receive() external payable {\n        revert SharedErrors.NotAllowed();\n    }\n}\n"
    },
    "contracts/marketplace/exchange/GildiExchangeOrderBook.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport {IGildiExchange} from '../../interfaces/marketplace/exchange/IGildiExchange.sol';\nimport {IGildiExchangeOrderBook} from '../../interfaces/marketplace/exchange/IGildiExchangeOrderBook.sol';\nimport {IGildiManager} from '../../interfaces/manager/IGildiManager.sol';\nimport {Context} from '@openzeppelin/contracts/utils/Context.sol';\nimport {SharedErrors} from '../../libraries/marketplace/exchange/SharedErrors.sol';\n\n/// @title Gildi Exchange Order Book\n/// @notice Manages listings and order book functionality for the Gildi Exchange marketplace.\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\ncontract GildiExchangeOrderBook is Initializable, Context, IGildiExchangeOrderBook {\n    // ========== Events ==========\n    /// @notice Emitted when a new listing is created\n    /// @param listingId The ID of the listing\n    /// @param releaseId The ID of the release\n    /// @param seller The address of the seller\n    /// @param price The price per item\n    /// @param quantity The quantity listed\n    event Listed(\n        uint256 indexed listingId,\n        uint256 indexed releaseId,\n        address indexed seller,\n        uint256 price,\n        uint256 quantity\n    );\n\n    /// @notice Emitted when a listing is removed\n    /// @param listingId The ID of the listing\n    /// @param releaseId The ID of the release\n    /// @param seller The address of the seller\n    /// @param quantity The quantity unlisted\n    event Unlisted(uint256 indexed listingId, uint256 indexed releaseId, address indexed seller, uint256 quantity);\n\n    /// @notice Emitted when a listing is modified\n    /// @param listingId The ID of the listing\n    /// @param releaseId The ID of the release\n    /// @param seller The address of the seller\n    /// @param price The new price per item\n    /// @param quantity The new quantity\n    event Modified(\n        uint256 indexed listingId,\n        uint256 indexed releaseId,\n        address indexed seller,\n        uint256 price,\n        uint256 quantity\n    );\n\n    // ========== Errors ==========\n    /// @dev Error thrown when the caller is not the GildiExchange\n    error NotGildiExchange();\n\n    // ========== Storage Variables ==========\n    /// @notice The GildiExchange contract that this order book is associated with\n    IGildiExchange public gildiExchange;\n    /// @notice The GildiManager contract used for token management\n    IGildiManager public gildiManager;\n\n    /// @dev The next available listing ID to assign\n    uint256 private nextListingId;\n    /// @dev Mapping from listing ID to Listing struct\n    mapping(uint256 => Listing) private listings;\n    /// @dev Mapping from release ID to an array of listing IDs for that release\n    mapping(uint256 => uint256[]) private tokenListings;\n    /// @dev Mapping from seller address to an array of their listing IDs\n    mapping(address => uint256[]) private sellerListings;\n    /// @dev Mapping from release ID to the ID of the listing with the lowest price for that release\n    mapping(uint256 => uint256) private headListingIds;\n    /// @dev Mapping from release ID to the ID of the listing with the highest price for that release\n    mapping(uint256 => uint256) private tailListingIds;\n    /// @dev Mapping from release ID to the total quantity of tokens listed for that release\n    mapping(uint256 => uint256) private listedQuantitiesMap;\n\n    /// @notice Ensures that only the GildiExchange contract can call this function\n    modifier onlyGildiExchange() {\n        if (msg.sender != address(gildiExchange)) {\n            revert NotGildiExchange();\n        }\n        _;\n    }\n\n    // ========== Constructor and Initializer ==========\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Initializes the contract\n    /// @param _gildiExchange The address of the GildiExchange contract\n    /// @param _gildiManager The address of the GildiManager contract\n    function initialize(address _gildiExchange, address _gildiManager) external initializer {\n        gildiExchange = IGildiExchange(_gildiExchange);\n        gildiManager = IGildiManager(_gildiManager);\n        nextListingId = 1;\n    }\n\n    // ========== External View Functions ==========\n\n    /// @inheritdoc IGildiExchangeOrderBook\n    function getListing(uint256 _listingId) external view override returns (Listing memory) {\n        return listings[_listingId];\n    }\n\n    /// @inheritdoc IGildiExchangeOrderBook\n    function getListingsOfSeller(address _seller) external view override returns (Listing[] memory) {\n        uint256[] storage listingIds = sellerListings[_seller];\n        Listing[] memory result = new Listing[](listingIds.length);\n\n        for (uint256 i = 0; i < listingIds.length; i++) {\n            result[i] = listings[listingIds[i]];\n        }\n\n        return result;\n    }\n\n    /// @inheritdoc IGildiExchangeOrderBook\n    function getOrderedListings(\n        uint256 _releaseId,\n        uint256 _cursor,\n        uint256 _limit\n    ) external view override returns (Listing[] memory orderedListings, uint256 cursor) {\n        // 1. Sort the listings\n        uint256[] memory sortedListingIds = new uint256[](tokenListings[_releaseId].length);\n        uint256 count = 0;\n        uint256 currentId = headListingIds[_releaseId];\n\n        while (currentId != 0) {\n            sortedListingIds[count] = currentId;\n            count++;\n            currentId = listings[currentId].nextListingId;\n        }\n\n        // 2. Determine the number of listings to return\n        uint256 remaining = (count > _cursor) ? count - _cursor : 0;\n        uint256 resultSize = remaining < _limit ? remaining : _limit;\n\n        // 3. Get the listings\n        Listing[] memory result = new Listing[](resultSize);\n        uint256 resultIndex = 0;\n\n        for (uint256 i = _cursor; i < count && resultIndex < resultSize; i++) {\n            result[resultIndex] = listings[sortedListingIds[i]];\n            resultIndex++;\n        }\n\n        // If all listings are retrieved, set nextCursor to the sortedIndex\n        uint256 nextCursor = _cursor + resultSize;\n        if (nextCursor >= count) {\n            nextCursor = count;\n        }\n\n        return (result, nextCursor);\n    }\n\n    /// @inheritdoc IGildiExchangeOrderBook\n    function getAvailableBuyQuantity(uint256 _releaseId, address _user) external view override returns (uint256) {\n        // Subtract user's listed tokens from the total available to avoid self-purchases\n        uint256 qty = listedQuantitiesMap[_releaseId];\n\n        for (uint256 i = 0; i < sellerListings[_user].length; i++) {\n            if (listings[sellerListings[_user][i]].releaseId == _releaseId) {\n                qty -= listings[sellerListings[_user][i]].quantity;\n            }\n        }\n\n        return qty;\n    }\n\n    /// @inheritdoc IGildiExchangeOrderBook\n    function previewPurchase(\n        uint256 _releaseId,\n        address _buyer,\n        uint256 _amountToBuy\n    ) external view override returns (PurchasePreview memory) {\n        IGildiExchange.AppEnvironment memory $ = gildiExchange.getAppEnvironment();\n\n        uint256 remainingToBuy = _amountToBuy;\n        uint256 totalPriceInMarketplaceCurrency = 0;\n        uint256 totalPriceUsd = 0;\n        uint256 totalAvailable = 0;\n\n        uint256 current = headListingIds[_releaseId];\n\n        address releaseAsset = gildiExchange.getActiveMarketplaceReleaseAsset(_releaseId);\n        while (current != 0 && remainingToBuy > 0) {\n            Listing storage listing = listings[current];\n\n            // Skip listing if the seller *is* the buyer\n            if (listing.seller == _buyer) {\n                current = listing.nextListingId;\n                continue;\n            }\n\n            // Take as many tokens from this listing as we can\n            uint256 localQty = listing.quantity;\n            if (localQty == 0) {\n                // listing is empty; move on\n                current = listing.nextListingId;\n                continue;\n            }\n\n            // chunk = min(remainingToBuy, localQty)\n            uint256 chunk = (localQty >= remainingToBuy) ? remainingToBuy : localQty;\n\n            uint256 mcPricePerItem = $.settings.paymentProcessor.quoteInCurrency(listing.pricePerItem, releaseAsset);\n\n            // add this chunk's cost to totals\n            totalPriceInMarketplaceCurrency += (mcPricePerItem * chunk);\n            totalPriceUsd += (listing.pricePerItem * chunk); // pricePerItem is in USD with priceAskDecimals\n            totalAvailable += chunk;\n\n            // reduce remaining\n            remainingToBuy -= chunk;\n\n            // Move on to next listing\n            current = listing.nextListingId;\n        }\n\n        return\n            PurchasePreview({\n                totalQuantityAvailable: totalAvailable,\n                totalPriceInCurrency: totalPriceInMarketplaceCurrency,\n                currency: releaseAsset,\n                totalPriceUsd: totalPriceUsd\n            });\n    }\n\n    /// @inheritdoc IGildiExchangeOrderBook\n    function getHeadListingId(uint256 _releaseId) external view override returns (uint256) {\n        return headListingIds[_releaseId];\n    }\n\n    /// @inheritdoc IGildiExchangeOrderBook\n    function getNextListingId(uint256 _listingId) external view override returns (uint256) {\n        return listings[_listingId].nextListingId;\n    }\n\n    /// @inheritdoc IGildiExchangeOrderBook\n    function listedQuantities(uint256 _releaseId) external view override returns (uint256) {\n        return listedQuantitiesMap[_releaseId];\n    }\n\n    // ========== External Non-View Functions ==========\n\n    /// @inheritdoc IGildiExchangeOrderBook\n    function handleCreateListing(\n        uint256 _releaseId,\n        address _seller,\n        uint256 _pricePerItem,\n        uint256 _quantity,\n        address _payoutCurrency,\n        address _fundsReceiver,\n        uint16 _slippageBps\n    ) external override onlyGildiExchange {\n        if (_quantity == 0) {\n            revert SharedErrors.ParamError();\n        }\n\n        gildiManager.lockTokens(_seller, _releaseId, _quantity);\n\n        uint256 listingId = nextListingId;\n        nextListingId++;\n\n        Listing memory newListing = Listing({\n            id: listingId,\n            releaseId: _releaseId,\n            seller: _seller,\n            pricePerItem: _pricePerItem,\n            payoutCurrency: _payoutCurrency,\n            quantity: _quantity,\n            createdAt: block.timestamp,\n            modifiedAt: block.timestamp,\n            nextListingId: 0,\n            prevListingId: 0,\n            slippageBps: _slippageBps,\n            fundsReceiver: _fundsReceiver\n        });\n\n        listings[listingId] = newListing;\n\n        // Insert the listing into the correct position based on price\n        _insertListingInOrder(_releaseId, listingId, _pricePerItem);\n\n        listedQuantitiesMap[_releaseId] += newListing.quantity;\n        sellerListings[_seller].push(listingId);\n        tokenListings[_releaseId].push(listingId);\n\n        emit Listed(listingId, _releaseId, _seller, _pricePerItem, _quantity);\n    }\n\n    /// @inheritdoc IGildiExchangeOrderBook\n    function handleModifyListing(\n        uint256 _listingId,\n        uint256 _pricePerItem,\n        uint256 _quantity,\n        address _payoutCurrency,\n        address _fundsReceiver,\n        uint16 _slippageBps\n    ) external override onlyGildiExchange {\n        Listing storage listing = listings[_listingId];\n\n        if (listing.id != _listingId) {\n            revert SharedErrors.ListingError(_listingId);\n        }\n\n        if (_quantity == 0) {\n            handleRemoveListing(_listingId);\n            return;\n        }\n\n        uint256 oldQuantity = listing.quantity;\n        uint256 newQuantity = _quantity;\n\n        if (newQuantity < oldQuantity) {\n            uint256 difference = oldQuantity - newQuantity;\n            gildiManager.unlockTokens(listing.seller, listing.releaseId, difference);\n            listedQuantitiesMap[listing.releaseId] -= difference;\n        } else if (newQuantity > oldQuantity) {\n            uint256 difference = newQuantity - oldQuantity;\n\n            gildiManager.lockTokens(listing.seller, listing.releaseId, difference);\n            listedQuantitiesMap[listing.releaseId] += difference;\n        }\n\n        // Remove the listing from the linked list\n        _clearListingFromLinkedList(_listingId);\n\n        // Update the listing with new price and quantity\n        listing.pricePerItem = _pricePerItem;\n        listing.quantity = newQuantity;\n        listing.modifiedAt = block.timestamp;\n        listing.slippageBps = _slippageBps;\n        listing.payoutCurrency = _payoutCurrency;\n        listing.fundsReceiver = _fundsReceiver;\n\n        // Re-insert into the correct position based on new price\n        _insertListingInOrder(listing.releaseId, listing.id, listing.pricePerItem);\n\n        emit Modified(_listingId, listing.releaseId, listing.seller, _pricePerItem, _quantity);\n    }\n\n    /// @inheritdoc IGildiExchangeOrderBook\n    function handleRemoveListing(uint256 _listingId) public override onlyGildiExchange {\n        Listing memory listing = listings[_listingId];\n        if (listing.id != _listingId) {\n            revert SharedErrors.ListingError(_listingId);\n        }\n\n        if (listing.quantity > 0) {\n            gildiManager.unlockTokens(listing.seller, listing.releaseId, listing.quantity);\n        }\n\n        _clearListingFromLinkedList(_listingId);\n\n        uint256[] storage sellerArray = sellerListings[listing.seller];\n        for (uint256 i = 0; i < sellerArray.length; i++) {\n            if (sellerArray[i] == _listingId) {\n                sellerArray[i] = sellerArray[sellerArray.length - 1];\n                sellerArray.pop();\n                break;\n            }\n        }\n\n        listedQuantitiesMap[listing.releaseId] -= listing.quantity;\n\n        uint256[] storage listingArray = tokenListings[listing.releaseId];\n        for (uint256 i = 0; i < listingArray.length; i++) {\n            if (listingArray[i] == _listingId) {\n                listingArray[i] = listingArray[listingArray.length - 1];\n                listingArray.pop();\n                break;\n            }\n        }\n\n        emit Unlisted(listing.id, listing.releaseId, listing.seller, listing.quantity);\n\n        delete listings[_listingId];\n    }\n\n    /// @inheritdoc IGildiExchangeOrderBook\n    function handleDecreaseListingQuantity(\n        uint256 _listingId,\n        uint256 _quantityToBuy\n    ) external override onlyGildiExchange {\n        Listing storage listing = listings[_listingId];\n\n        if (listing.id != _listingId) {\n            revert SharedErrors.ListingError(_listingId);\n        }\n\n        if (_quantityToBuy > listing.quantity) {\n            revert SharedErrors.ParamError();\n        }\n\n        listing.quantity -= _quantityToBuy;\n        listedQuantitiesMap[listing.releaseId] -= _quantityToBuy;\n        listing.modifiedAt = block.timestamp;\n\n        if (listing.quantity == 0) {\n            handleRemoveListing(_listingId);\n        }\n    }\n\n    /// @inheritdoc IGildiExchangeOrderBook\n    function handleUnlistReleaseListings(\n        uint256 _releaseId,\n        uint256 _batchSize\n    ) external override onlyGildiExchange returns (uint256 processedListings) {\n        uint256[] storage listingIds = tokenListings[_releaseId];\n        while (processedListings < _batchSize && listingIds.length > 0) {\n            // Process from the end of listings to avoid shifting elements\n            uint256 listingId = listingIds[listingIds.length - 1];\n            handleRemoveListing(listingId); // This will also emit the event and handle book-keeping\n            processedListings++;\n        }\n\n        return (processedListings);\n    }\n\n    // ========== Internal Functions ==========\n\n    /// @dev Clear a listing from the linked list\n    /// @param _listingId The ID of the listing to clear\n    function _clearListingFromLinkedList(uint256 _listingId) internal {\n        Listing storage listing = listings[_listingId];\n\n        // If the listing is the head\n        if (headListingIds[listing.releaseId] == _listingId) {\n            headListingIds[listing.releaseId] = listing.nextListingId;\n        }\n\n        // If the listing is the tail\n        if (tailListingIds[listing.releaseId] == _listingId) {\n            tailListingIds[listing.releaseId] = listing.prevListingId;\n        }\n\n        // Update neighbors\n        if (listing.prevListingId != 0) {\n            listings[listing.prevListingId].nextListingId = listing.nextListingId;\n        }\n\n        if (listing.nextListingId != 0) {\n            listings[listing.nextListingId].prevListingId = listing.prevListingId;\n        }\n\n        listing.nextListingId = 0;\n        listing.prevListingId = 0;\n    }\n\n    /// @dev Insert a listing into the correct position in the linked list based on price\n    /// @param _releaseId The ID of the release\n    /// @param _listingId The ID of the listing\n    /// @param _pricePerItem The price per item\n    function _insertListingInOrder(uint256 _releaseId, uint256 _listingId, uint256 _pricePerItem) internal {\n        if (headListingIds[_releaseId] == 0) {\n            headListingIds[_releaseId] = _listingId;\n            tailListingIds[_releaseId] = _listingId;\n            return;\n        }\n\n        if (_pricePerItem < listings[headListingIds[_releaseId]].pricePerItem) {\n            listings[_listingId].nextListingId = headListingIds[_releaseId];\n            listings[headListingIds[_releaseId]].prevListingId = _listingId;\n            headListingIds[_releaseId] = _listingId;\n        } else if (_pricePerItem >= listings[tailListingIds[_releaseId]].pricePerItem) {\n            listings[_listingId].prevListingId = tailListingIds[_releaseId];\n            listings[tailListingIds[_releaseId]].nextListingId = _listingId;\n            tailListingIds[_releaseId] = _listingId;\n        } else {\n            uint256 current = headListingIds[_releaseId];\n            while (current != 0) {\n                if (listings[current].pricePerItem > _pricePerItem) {\n                    listings[_listingId].nextListingId = current;\n                    listings[_listingId].prevListingId = listings[current].prevListingId;\n                    listings[listings[current].prevListingId].nextListingId = _listingId;\n                    listings[current].prevListingId = _listingId;\n                    break;\n                }\n                current = listings[current].nextListingId;\n            }\n        }\n    }\n\n    // ---------------------------------------------------------------------------\n    // Fallback functions\n    // ---------------------------------------------------------------------------\n\n    /// @notice Fallback function to prevent direct Ether transfers\n    fallback() external payable {\n        revert SharedErrors.NotAllowed();\n    }\n\n    /// @notice Fallback function to prevent direct Ether transfers\n    receive() external payable {\n        revert SharedErrors.NotAllowed();\n    }\n}\n"
    },
    "contracts/marketplace/exchange/GildiExchangePaymentAggregator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport './GildiExchangePaymentBaseUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\n\n/// @title GildiExchangePaymentAggregator\n/// @notice A generic payment adapter that aggregates multiple DEX/aggregator adapters.\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\ncontract GildiExchangePaymentAggregator is GildiExchangePaymentBaseUpgradeable {\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Initializes the aggregator with the exchange, marketplace token, and wrapped native token.\n    /// @param _gildiExchange The address of the Gildi Exchange.\n    /// @param _wNativeAddress The address of the wrapped native token.\n    /// @param _initialDefaultAdmin The address of the initial default admin.\n    /// @param _initialContractAdmin The address of the initial contract admin.\n    function initialize(\n        address _gildiExchange,\n        address _wNativeAddress,\n        address _initialDefaultAdmin,\n        address _initialContractAdmin\n    ) public initializer {\n        __GildiExchangePaymentBase_init(_gildiExchange, _initialDefaultAdmin, _initialContractAdmin);\n        _setPurchaseAllowNative(true);\n        _setWrappedNative(_wNativeAddress);\n    }\n}\n"
    },
    "contracts/marketplace/exchange/GildiExchangePaymentBase.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport '../../interfaces/external/IWNative.sol';\nimport '../../interfaces/marketplace/exchange/IGildiExchange.sol';\nimport '../../interfaces/marketplace/exchange/IGildiExchangePaymentAggregator.sol';\nimport './GildiExchangePaymentBaseCore.sol';\n\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport {AccessControl} from '@openzeppelin/contracts/access/AccessControl.sol';\nimport {Context} from '@openzeppelin/contracts/utils/Context.sol';\nimport {ReentrancyGuard} from '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\n\n/// @title GildiExchangePaymentBase\n/// @notice Abstract base contract (non-upgradeable) implementing the payment flow for the marketplace.\n/// @dev Inherits from Ownable and ReentrancyGuard.\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\nabstract contract GildiExchangePaymentBase is GildiExchangePaymentBaseCore, Context, AccessControl, ReentrancyGuard {\n    // Regular storage variable for holding state.\n    GildiExchangePaymentBaseStorage private $;\n\n    /// @notice Constructor initializing the Gildi Exchange and Marketplace Token.\n    /// @param _gildiExchange The address of the Gildi Exchange.\n    /// @param _initialDefaultAdmin The address of the initial default admin.\n    /// @param _initialContractAdmin The address of the initial contract admin.\n    constructor(address _gildiExchange, address _initialDefaultAdmin, address _initialContractAdmin) {\n        $.gildiExchange = IGildiExchange(_gildiExchange);\n\n        _grantRole(DEFAULT_ADMIN_ROLE, _initialDefaultAdmin);\n        _grantRole(ADMIN_ROLE, _initialContractAdmin);\n    }\n\n    //----- Admin Functions -----\n\n    /// @notice Sets whether native payments are allowed for purchases.\n    /// @param _allow True if native payments should be enabled.\n    function setPurchaseAllowNative(bool _allow) public onlyRole(ADMIN_ROLE) {\n        super._setPurchaseAllowNative(_allow);\n    }\n\n    /// @notice Sets the allowed purchase status for a given source token.\n    /// @param _token The address of the token.\n    /// @param _allowed True to allow the token.\n    function setAllowedPurchaseToken(address _token, bool _allowed) external onlyRole(ADMIN_ROLE) {\n        super._setAllowedPurchaseToken(_token, _allowed);\n    }\n\n    /// @notice Adds a new aggregator/DEX adapter.\n    /// @param _adapter The adapter to add.\n    function addAdapter(IGildiExchangeSwapAdapter _adapter) external onlyRole(ADMIN_ROLE) {\n        super._addAdapter(_adapter);\n    }\n\n    /// @notice Removes an adapter by instance.\n    /// @param adapter The adapter instance to remove.\n    function removeAdapter(IGildiExchangeSwapAdapter adapter) external onlyRole(ADMIN_ROLE) {\n        super._removeAdapter(adapter);\n    }\n\n    /// @notice Sets the wrapped native token address.\n    /// @param _wnative The address of the wrapped native token.\n    function setWrappedNative(address _wnative) external onlyRole(ADMIN_ROLE) {\n        super._setWrappedNative(_wnative);\n    }\n\n    /// @notice Removes an adapter by its index.\n    /// @param index The index of the adapter to remove.\n    function removeAdapter(uint256 index) external onlyRole(ADMIN_ROLE) {\n        super._removeAdapter(index);\n    }\n\n    //----- Internal Storage Getter -----\n\n    /// @dev Returns the storage pointer for this contract.\n    function _getStorage() internal view override returns (GildiExchangePaymentBaseStorage storage) {\n        return $;\n    }\n\n    function _msgSender() internal view override(GildiExchangePaymentBaseCore, Context) returns (address sender) {\n        return super._msgSender();\n    }\n}\n"
    },
    "contracts/marketplace/exchange/GildiExchangePaymentBaseCore.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport '../../interfaces/external/IWNative.sol';\nimport '../../interfaces/marketplace/exchange/IGildiExchange.sol';\nimport '../../interfaces/marketplace/exchange/IGildiExchangePaymentAggregator.sol';\nimport '../../interfaces/marketplace/exchange/IGildiExchangeSwapAdapter.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\n/// @title GildiExchangePaymentBaseCore\n/// @notice Core contract holding shared logic and storage definitions for the purchase flow.\n/// This contract is completely agnostic to access control and reentrancy protection;\n/// it just provides internal helper functions and defines a storage struct along with internal getters.\n/// Derived contracts must implement _getStorage().\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\nabstract contract GildiExchangePaymentBaseCore is IGildiExchangePaymentAggregator {\n    using SafeERC20 for IERC20;\n    bytes32 public constant ADMIN_ROLE = keccak256('ADMIN_ROLE');\n\n    // --- Storage Struct (shared by both implementations) ---\n    /// @dev Storage struct for the Gildi Marketplace.\n    /// @param gildiExchange The Gildi Exchange contract.\n    /// @param marketplaceToken DEPRECATED: The marketplace token address. Use gildiExchange.getActiveMarketplaceReleaseAsset() instead.\n    /// @param allowNative If native payments are allowed.\n    /// @param wrappedNative The wrapped native token address.\n    /// @param adapters The list of aggregator/DEX adapters.\n    /// @param allowedPurchaseTokens The allowed purchase tokens.\n    /// @param isPurchaseTokenAllowed Mapping of allowed purchase tokens.\n    struct GildiExchangePaymentBaseStorage {\n        IGildiExchange gildiExchange;\n        bool purchaseAllowNative;\n        address wrappedNative;\n        IGildiExchangeSwapAdapter[] adapters;\n        address[] allowedPurchaseTokens;\n        mapping(address => bool) isPurchaseTokenAllowed;\n    }\n\n    /// @dev Emitted when an index is out of bounds.\n    error IndexOutOfRange();\n\n    /// @dev Emitted when there are not enough source tokens for the best route.\n    error NotEnoughSourceTokensForBestRoute();\n\n    /// @dev Emitted when slippage exceeds the limit.\n    error SlippageExceeded();\n\n    /// @dev Emitted when a token is not allowed for purchase.\n    /// @param token The token that is not allowed.\n    error PurchaseTokenNotAllowed(address token);\n\n    /// @dev Emitted when native currency is not allowed for purchase.\n    error NativeNotAllowed();\n\n    /// @dev Emitted when the msg.value does not match the expected amount.\n    error IncorrectMsgValue();\n\n    /// @dev Emitted when there are no swap adapters configured.\n    error NoAdapters();\n\n    /// @dev Emitted when no valid route is found for a swap.\n    error NoValidRoute();\n\n    /// @dev Emitted when there is insufficient liquidity for a swap.\n    error InsufficientLiquidity();\n\n    /// @dev Emitted when the received amount is less than the required minimum.\n    error InsufficientReceiveAmount();\n\n    /// @dev Emitted when a swap operation fails.\n    error SwapOutFailed();\n\n    /// @notice Emitted when a new swap adapter is added.\n    /// @param adapter The adapter that was added.\n    event AdapterAdded(IGildiExchangeSwapAdapter adapter);\n\n    /// @notice Emitted when a swap adapter is removed.\n    /// @param adapter The adapter that was removed.\n    event AdapterRemoved(IGildiExchangeSwapAdapter adapter);\n\n    /// @notice Emitted when a token's swap-in status is changed.\n    /// @param token The token address.\n    /// @param allowed Whether the token is allowed for swap-in.\n    event AllowedSwapInTokenSet(address token, bool allowed);\n\n    /// @notice Emitted when the wrapped native token address is set.\n    /// @param wnative The wrapped native token address.\n    event WrappedNativeSet(address wnative);\n\n    /// @notice Emitted when the native payment allowance is changed.\n    /// @param allow Whether native payments are allowed.\n    event PurchaseAllowNativeSet(bool allow);\n\n    /// @notice Emitted when a token's source status is changed.\n    /// @param token The token address.\n    /// @param allowed Whether the token is allowed as a source.\n    event SourceTokenSet(address token, bool allowed);\n\n    /// @notice Emitted when a marketplace token leftover is returned.\n    event MarketplaceLeftoverReturned(\n        address indexed marketplaceToken,\n        address recipient,\n        uint256 sourceAmount,\n        bool swapped,\n        address targetToken,\n        uint256 targetAmount\n    );\n\n    /// @notice Emitted when a swap operation is executed.\n    /// @param sourceToken The address of the source token.\n    /// @param targetToken The address of the target token.\n    /// @param sourceAmount The amount of source tokens swapped.\n    /// @param targetAmount The amount of target tokens received.\n    /// @param recipient The address that received the target tokens.\n    /// @param adapter The adapter used for the swap.\n    /// @param route The detailed routing information used for the swap.\n    event SwapExecuted(\n        address indexed sourceToken,\n        address indexed targetToken,\n        uint256 sourceAmount,\n        uint256 targetAmount,\n        address recipient,\n        address adapter,\n        IGildiExchangeSwapAdapter.QuoteRoute route\n    );\n\n    /// @notice Emitted when a swap route is selected for a transaction.\n    /// @param sourceToken The starting token for the swap.\n    /// @param targetToken The desired output token.\n    /// @param amount The amount to be swapped.\n    /// @param expectedOutput The expected output amount.\n    /// @param selectedAdapter The address of the selected adapter for the route.\n    event SwapRouteSelected(\n        address indexed sourceToken,\n        address indexed targetToken,\n        uint256 amount,\n        uint256 expectedOutput,\n        address selectedAdapter\n    );\n\n    /// @notice The best adapter quote for a swap out\n    /// @param bestAdapter The best adapter\n    /// @param bestTargetAmount The best target amount\n    /// @param bestQuoteData The best quote data\n    /// @param bestQuoteRoute The best quote route\n    /// @param hasValidRoute Whether there is any valid route.\n    struct BestAdapterSwapOutQuote {\n        address bestAdapter;\n        uint256 bestTargetAmount;\n        bytes bestQuoteData;\n        IGildiExchangeSwapAdapter.QuoteRoute bestQuoteRoute;\n        bool hasValidRoute;\n    }\n\n    // --- Abstract function: must return the storage pointer ---\n    function _getStorage() internal view virtual returns (GildiExchangePaymentBaseStorage storage);\n\n    /// @dev Returns the message sender.\n    /// @return The address of the message sender.\n    function _msgSender() internal view virtual returns (address);\n\n    // --- Internal Setters ---\n    function _setPurchaseAllowNative(bool _allow) internal virtual {\n        if (_allow == getPurchaseAllowNative()) {\n            return;\n        }\n\n        _getStorage().purchaseAllowNative = _allow;\n        emit PurchaseAllowNativeSet(_allow);\n    }\n\n    function _setAllowedPurchaseToken(address _token, bool _allowed) internal virtual {\n        GildiExchangePaymentBaseStorage storage $ = _getStorage();\n        if (_allowed) {\n            if (!$.isPurchaseTokenAllowed[_token]) {\n                $.allowedPurchaseTokens.push(_token);\n                $.isPurchaseTokenAllowed[_token] = true;\n            }\n        } else {\n            if ($.isPurchaseTokenAllowed[_token]) {\n                delete $.isPurchaseTokenAllowed[_token];\n                uint256 len = $.allowedPurchaseTokens.length;\n                for (uint256 i = 0; i < len; i++) {\n                    if (_token == $.allowedPurchaseTokens[i]) {\n                        $.allowedPurchaseTokens[i] = $.allowedPurchaseTokens[len - 1];\n                        $.allowedPurchaseTokens.pop();\n                        break;\n                    }\n                }\n            }\n        }\n        emit AllowedSwapInTokenSet(_token, _allowed);\n    }\n\n    function _addAdapter(IGildiExchangeSwapAdapter _adapter) internal virtual {\n        for (uint256 i = 0; i < getAdapters().length; i++) {\n            if (address(_adapter) == address(getAdapters()[i])) {\n                return;\n            }\n        }\n\n        GildiExchangePaymentBaseStorage storage $ = _getStorage();\n        $.adapters.push(_adapter);\n        emit AdapterAdded(_adapter);\n    }\n\n    function _setWrappedNative(address _wnative) internal virtual {\n        if (_wnative == getWrappedNative()) {\n            return;\n        }\n\n        _getStorage().wrappedNative = _wnative;\n        emit WrappedNativeSet(_wnative);\n    }\n\n    function _removeAdapter(uint256 index) internal virtual {\n        GildiExchangePaymentBaseStorage storage $ = _getStorage();\n        IGildiExchangeSwapAdapter[] storage adapters = $.adapters;\n        if (index >= adapters.length) {\n            revert IndexOutOfRange();\n        }\n        emit AdapterRemoved(adapters[index]);\n        adapters[index] = adapters[adapters.length - 1];\n        adapters.pop();\n    }\n\n    function _removeAdapter(IGildiExchangeSwapAdapter _adapter) internal virtual {\n        GildiExchangePaymentBaseStorage storage $ = _getStorage();\n        uint256 len = $.adapters.length;\n        for (uint256 i = 0; i < len; i++) {\n            if (address(_adapter) == address($.adapters[i])) {\n                emit AdapterRemoved(_adapter);\n                if (i != len - 1) {\n                    $.adapters[i] = $.adapters[len - 1];\n                }\n                $.adapters.pop();\n                break;\n            }\n        }\n    }\n\n    // --- Internal Logic ---\n    function _approveMarketplaceIfNeeded(address _marketplaceToken, uint256 _requiredAmount) internal {\n        uint256 allowanceNow = IERC20(_marketplaceToken).allowance(address(this), address(getGildiExchange()));\n        if (allowanceNow < _requiredAmount) {\n            IERC20(_marketplaceToken).forceApprove(address(getGildiExchange()), type(uint256).max);\n        }\n    }\n\n    function _collectPurchaseToken(address _sourceToken, uint256 _sourceMaxAmount) internal {\n        if (!isPurchaseTokenAllowed(_sourceToken)) {\n            revert PurchaseTokenNotAllowed(_sourceToken);\n        }\n        IERC20(_sourceToken).safeTransferFrom(msg.sender, address(this), _sourceMaxAmount);\n    }\n\n    function _approveFundsToAdapter(address _adapter, address _sourceToken, uint256 _amount) internal {\n        IERC20(_sourceToken).forceApprove(_adapter, _amount);\n    }\n\n    /// @notice Executes a swap out operation, converting source tokens to a target token\n    /// @param _amount The amount of source tokens to swap\n    /// @param _sourceCurrency The source currency to swap from\n    /// @param _targetToken The token to swap to\n    /// @param _minTargetAmount The minimum amount of target tokens to receive\n    /// @param _recipient The recipient of the target tokens\n    /// @return targetReceived The amount of target tokens received\n    function _executeSwapOut(\n        uint256 _amount,\n        address _sourceCurrency,\n        address _targetToken,\n        uint256 _minTargetAmount,\n        address _recipient\n    ) internal returns (uint256 targetReceived) {\n        // No swap needed if the target token is the source token\n        if (_targetToken == _sourceCurrency) {\n            IERC20(_sourceCurrency).safeTransfer(_recipient, _amount);\n            return _amount;\n        }\n\n        // Find the best adapter for the swap\n        BestAdapterSwapOutQuote memory quote = _swapOutQuoteAndPickAdapter(_amount, _targetToken, _sourceCurrency);\n\n        if (!quote.hasValidRoute) {\n            revert NoValidRoute();\n        }\n\n        if (quote.bestTargetAmount == 0) {\n            revert InsufficientLiquidity();\n        }\n\n        if (quote.bestTargetAmount < _minTargetAmount) {\n            revert InsufficientReceiveAmount();\n        }\n\n        _approveFundsToAdapter(quote.bestAdapter, _sourceCurrency, _amount);\n\n        // Emit event for selected route before execution\n        emit SwapRouteSelected(_sourceCurrency, _targetToken, _amount, quote.bestTargetAmount, quote.bestAdapter);\n\n        // Execute the swap\n        targetReceived = IGildiExchangeSwapAdapter(quote.bestAdapter).swapOut(\n            _sourceCurrency,\n            _targetToken,\n            _amount,\n            _minTargetAmount,\n            _recipient,\n            quote.bestQuoteData\n        );\n\n        if (targetReceived < _minTargetAmount) {\n            revert SwapOutFailed();\n        }\n\n        // Emit event for successful swap execution\n        emit SwapExecuted(\n            _sourceCurrency,\n            _targetToken,\n            _amount,\n            targetReceived,\n            _recipient,\n            quote.bestAdapter,\n            quote.bestQuoteRoute\n        );\n\n        return targetReceived;\n    }\n\n    function _returnLeftoverPurchaseSource(address _sourceToken, uint256 _amount, bool _isNative) internal {\n        if (_isNative) {\n            _unwrapNative(_amount);\n            Address.sendValue(payable(msg.sender), _amount);\n        } else {\n            IERC20(_sourceToken).safeTransfer(msg.sender, _amount);\n        }\n    }\n\n    function _collectAndWrapNative(uint256 _sourceMaxAmount) internal {\n        if (!getPurchaseAllowNative() || getWrappedNative() == address(0)) {\n            revert NativeNotAllowed();\n        }\n        if (msg.value != _sourceMaxAmount) {\n            revert IncorrectMsgValue();\n        }\n        IWNative(getWrappedNative()).deposit{value: _sourceMaxAmount}();\n    }\n\n    function _unwrapNative(uint256 _amount) internal {\n        IWNative(getWrappedNative()).withdraw(_amount);\n    }\n\n    /// @dev Must pick the best aggregator adapter among available ones.\n    ///      Can be overriden to implement custom logic.\n    /// @param _sourceToken The token to swap from.\n    /// @param _marketplaceAmount The amount of marketplace tokens needed.\n    /// @return bestAdapter The chosen adapter.\n    /// @return sourceNeeded The amount of _sourceToken required.\n    /// @return quoteData The data to pass to bestAdapter.swapIn(...).\n    function _swapInQuoteAndPickAdapter(\n        address _sourceToken,\n        uint256 _marketplaceAmount,\n        uint256 _releaseId\n    )\n        internal\n        view\n        virtual\n        returns (\n            IGildiExchangeSwapAdapter bestAdapter,\n            uint256 sourceNeeded,\n            bytes memory quoteData,\n            IGildiExchangeSwapAdapter.QuoteRoute memory quoteRoute\n        )\n    {\n        IGildiExchangeSwapAdapter[] memory adapters = getAdapters();\n        address marketplaceToken = getMarketplaceToken(_releaseId);\n\n        if (adapters.length == 0) {\n            revert NoAdapters();\n        }\n\n        uint256 bestNeeded = type(uint256).max;\n        bytes memory bestData;\n        IGildiExchangeSwapAdapter.QuoteRoute memory bestQuoteRoute;\n        bool anyValidRouteExists = false;\n        bool insufficientLiquidity = false;\n\n        for (uint256 i = 0; i < adapters.length; i++) {\n            IGildiExchangeSwapAdapter.SwapInQuote memory quote = adapters[i].quoteSwapIn(\n                _sourceToken,\n                marketplaceToken,\n                _marketplaceAmount\n            );\n\n            if (quote.validRoute) {\n                anyValidRouteExists = true;\n\n                if (quote.sourceTokenRequired == 0) {\n                    // Valid route exists but has insufficient liquidity\n                    insufficientLiquidity = true;\n                } else if (quote.sourceTokenRequired < bestNeeded) {\n                    // Found a better route with sufficient liquidity\n                    bestNeeded = quote.sourceTokenRequired;\n                    bestAdapter = adapters[i];\n                    bestData = quote.rawQuoteData;\n                    bestQuoteRoute = quote.quoteRoute;\n                }\n            }\n        }\n\n        if (address(bestAdapter) == address(0)) {\n            // No adapter found with sufficient liquidity\n            if (anyValidRouteExists && insufficientLiquidity) {\n                // Valid routes exist but all have insufficient liquidity\n                revert InsufficientLiquidity();\n            } else {\n                // No valid route exists between these tokens\n                revert NoValidRoute();\n            }\n        }\n        return (bestAdapter, bestNeeded, bestData, bestQuoteRoute);\n    }\n\n    /// @dev Estimates the amount of `_sourceToken` required to get `_amount` of `_targetToken` and returns the current best route.\n    /// @param _amount The amount of the target token.\n    /// @param _targetToken The target token.\n    /// @param _sourceToken The source token.\n    /// @return quote The quote.\n    function _swapOutQuoteAndPickAdapter(\n        uint256 _amount,\n        address _targetToken,\n        address _sourceToken\n    ) internal view virtual returns (BestAdapterSwapOutQuote memory quote) {\n        IGildiExchangeSwapAdapter[] memory adapters = getAdapters();\n\n        quote.bestTargetAmount = 0;\n\n        /* uint256 targetTokenOut;\n        bytes rawQuoteData;\n        QuoteRoute quoteRoute;\n        bool validRoute;*/\n        for (uint256 i = 0; i < adapters.length; i++) {\n            try adapters[i].quoteSwapOut(_sourceToken, _targetToken, _amount) returns (\n                IGildiExchangeSwapAdapter.SwapOutQuote memory swapOutQuote\n            ) {\n                if (swapOutQuote.validRoute) {\n                    if (swapOutQuote.targetTokenOut > quote.bestTargetAmount || !quote.hasValidRoute) {\n                        // Better route found with non-zero output\n                        quote.bestTargetAmount = swapOutQuote.targetTokenOut;\n                        quote.bestAdapter = address(adapters[i]);\n                        quote.bestQuoteData = swapOutQuote.rawQuoteData;\n                        quote.bestQuoteRoute = swapOutQuote.quoteRoute;\n                        quote.hasValidRoute = true;\n                    }\n                }\n            } catch {\n                // Skip this adapter if it reverts\n                continue;\n            }\n        }\n    }\n\n    /// @dev Attempts to refund leftover marketplace tokens by swapping them back to the original source token\n    /// @dev Falls back to direct transfer of marketplace token if the swap fails\n    /// @param _sourceToken The marketplace token address\n    /// @param _amount The amount of marketplace tokens to refund\n    /// @param _targetToken The destination token (original source token)\n    /// @param _recipient The recipient address who will receive the tokens\n    function _refundReleaseMarketplaceToken(\n        address _sourceToken,\n        uint256 _amount,\n        address _targetToken,\n        address _recipient\n    ) internal {\n        IERC20 sourceToken = IERC20(_sourceToken);\n\n        if (_targetToken == _sourceToken) {\n            sourceToken.safeTransfer(_recipient, _amount);\n            return;\n        }\n\n        // Try swap out\n        BestAdapterSwapOutQuote memory quote = _swapOutQuoteAndPickAdapter(_amount, _targetToken, _sourceToken);\n\n        bool swapExecuted = false;\n\n        if (quote.hasValidRoute && quote.bestTargetAmount > 0) {\n            // Emit event for selected route before execution\n            emit SwapRouteSelected(_sourceToken, _targetToken, _amount, quote.bestTargetAmount, quote.bestAdapter);\n\n            _approveFundsToAdapter(quote.bestAdapter, _sourceToken, _amount);\n            try\n                IGildiExchangeSwapAdapter(quote.bestAdapter).swapOut(\n                    _sourceToken,\n                    _targetToken,\n                    _amount,\n                    0,\n                    _recipient,\n                    quote.bestQuoteData\n                )\n            returns (uint256 targetReceived) {\n                if (targetReceived > 0) {\n                    // Emit events for successful swap\n                    emit SwapExecuted(\n                        _sourceToken,\n                        _targetToken,\n                        _amount,\n                        targetReceived,\n                        _recipient,\n                        quote.bestAdapter,\n                        quote.bestQuoteRoute\n                    );\n                    swapExecuted = true;\n                }\n            } catch {\n                _approveFundsToAdapter(quote.bestAdapter, _sourceToken, 0);\n            }\n        }\n\n        if (!swapExecuted) {\n            sourceToken.safeTransfer(_recipient, _amount);\n            emit MarketplaceLeftoverReturned(_sourceToken, _recipient, _amount, false, address(0), 0);\n        }\n    }\n\n    // --- Public Functions ---\n\n    // --- Getters ---\n    function getGildiExchange() public view returns (IGildiExchange) {\n        return _getStorage().gildiExchange;\n    }\n\n    /// @notice Returns the active marketplace token address for a given release or the default marketplace token.\n    /// @param _releaseId Optional release ID to get the specific token for, or 0 for default\n    /// @return The marketplace token address to use for the specified release\n    function getMarketplaceToken(uint256 _releaseId) public view returns (address) {\n        IGildiExchange exchange = getGildiExchange();\n        return exchange.getActiveMarketplaceReleaseAsset(_releaseId);\n    }\n\n    function getPurchaseAllowNative() public view returns (bool) {\n        return _getStorage().purchaseAllowNative;\n    }\n\n    function getWrappedNative() public view returns (address) {\n        return _getStorage().wrappedNative;\n    }\n\n    function getAdapters() public view returns (IGildiExchangeSwapAdapter[] memory) {\n        return _getStorage().adapters;\n    }\n\n    function isPurchaseTokenAllowed(address _token) public view returns (bool) {\n        return _getStorage().isPurchaseTokenAllowed[_token];\n    }\n\n    function getAllowedPurchaseTokens() public view returns (address[] memory) {\n        return _getStorage().allowedPurchaseTokens;\n    }\n\n    /// @inheritdoc IGildiExchangePaymentAggregator\n    function swapOut(\n        uint256 _amount,\n        address _sourceCurrency,\n        address _targetToken,\n        uint256 _minTargetAmount,\n        address _recipient\n    ) public virtual returns (uint256 targetReceived) {\n        // First, validate if we have a valid route\n        (bool hasValidRoute, uint256 expectedAmount, ) = previewSwapOut(_amount, _sourceCurrency, _targetToken);\n        if (!hasValidRoute || expectedAmount < _minTargetAmount) {\n            revert NoValidRoute();\n        }\n\n        // Transfer source tokens from the sender to this contract\n        IERC20(_sourceCurrency).safeTransferFrom(_msgSender(), address(this), _amount);\n\n        // Execute the swap out\n        return _executeSwapOut(_amount, _sourceCurrency, _targetToken, _minTargetAmount, _recipient);\n    }\n\n    /// @inheritdoc IGildiExchangePaymentAggregator\n    function purchase(\n        uint256 _releaseId,\n        uint256 _amount,\n        address _sourceToken,\n        uint256 _sourceMaxAmount\n    ) public payable returns (uint256 amountUsdSpent) {\n        // 1) Get required marketplace token amount.\n        (uint256 requiredSourceAmount, address releaseCurrency, ) = getGildiExchange().quotePricePreview(\n            _releaseId,\n            _amount,\n            msg.sender\n        );\n\n        // 2) Collect user’s source tokens.\n        bool isNative = _sourceToken == address(0);\n        if (isNative) {\n            _collectAndWrapNative(_sourceMaxAmount);\n            _sourceToken = getWrappedNative();\n        } else {\n            _collectPurchaseToken(_sourceToken, _sourceMaxAmount);\n        }\n\n        uint256 sourceSpent = 0;\n\n        if (_sourceToken != releaseCurrency) {\n            // 3) Pick the best adapter.\n            (\n                IGildiExchangeSwapAdapter bestAdapter,\n                uint256 sourceNeeded,\n                bytes memory quoteData,\n\n            ) = _swapInQuoteAndPickAdapter(_sourceToken, requiredSourceAmount, _releaseId);\n            if (sourceNeeded > _sourceMaxAmount) {\n                revert NotEnoughSourceTokensForBestRoute();\n            }\n\n            // 4) Transfer funds to the adapter.\n            _approveFundsToAdapter(address(bestAdapter), _sourceToken, _sourceMaxAmount);\n\n            // 5) Execute the swap.\n            sourceSpent = bestAdapter.swapIn(\n                _sourceToken,\n                releaseCurrency,\n                _sourceMaxAmount,\n                requiredSourceAmount,\n                address(this),\n                quoteData\n            );\n            if (sourceSpent > _sourceMaxAmount) {\n                revert SlippageExceeded();\n            }\n        }\n\n        // 6) Approve and call purchase.\n        _approveMarketplaceIfNeeded(releaseCurrency, requiredSourceAmount);\n        (uint256 releaseMarketplaceTokenSpent, uint256 actualUsdSpent) = getGildiExchange().purchase(\n            _releaseId,\n            _amount,\n            requiredSourceAmount,\n            _msgSender(),\n            true\n        );\n        if (_sourceToken == releaseCurrency) {\n            sourceSpent = releaseMarketplaceTokenSpent;\n        }\n\n        // 7) Refund leftover tokens.\n        if (sourceSpent < _sourceMaxAmount) {\n            _returnLeftoverPurchaseSource(_sourceToken, _sourceMaxAmount - sourceSpent, isNative);\n        }\n\n        // 8) Try swap back unspent release marketplace token\n        if (releaseMarketplaceTokenSpent < requiredSourceAmount && _sourceToken != releaseCurrency) {\n            _refundReleaseMarketplaceToken(\n                releaseCurrency,\n                requiredSourceAmount - releaseMarketplaceTokenSpent,\n                _sourceToken,\n                msg.sender\n            );\n        }\n\n        return actualUsdSpent;\n    }\n\n    /// @inheritdoc IGildiExchangePaymentAggregator\n    function estimatePurchase(\n        uint256 _releaseId,\n        uint256 _amount,\n        address _buyer,\n        address _sourceToken\n    )\n        public\n        view\n        virtual\n        returns (\n            uint256 sourceNeeded,\n            address releaseCurrency,\n            IGildiExchangeSwapAdapter.QuoteRoute memory quoteRoute,\n            uint256 totalPriceUsd\n        )\n    {\n        if (_sourceToken == address(0)) {\n            _sourceToken = getWrappedNative();\n        }\n\n        IGildiExchange gildiExchange = getGildiExchange();\n        (uint256 requiredAmount, address requiredAmountCurrency, uint256 usdPrice) = gildiExchange.quotePricePreview(\n            _releaseId,\n            _amount,\n            _buyer\n        );\n\n        if (_sourceToken == requiredAmountCurrency) {\n            return (\n                requiredAmount,\n                requiredAmountCurrency,\n                IGildiExchangeSwapAdapter.QuoteRoute({\n                    marketplaceAdapter: address(0),\n                    route: new address[](0),\n                    fees: new uint128[](0),\n                    amounts: new uint128[](0),\n                    virtualAmountsWithoutSlippage: new uint128[](0)\n                }),\n                usdPrice\n            );\n        }\n\n        (, sourceNeeded, , quoteRoute) = _swapInQuoteAndPickAdapter(_sourceToken, requiredAmount, _releaseId);\n\n        return (sourceNeeded, requiredAmountCurrency, quoteRoute, usdPrice);\n    }\n\n    /// @notice Previews a swap out operation to check if there's a valid route and estimate the output amount.\n    /// @param _amount The amount of source tokens to swap.\n    /// @param _sourceCurrency The address of the source token.\n    /// @param _targetToken The token to swap to.\n    /// @return hasValidRoute Whether there's a valid route for the swap.\n    /// @return expectedTargetAmount The expected amount of target tokens to receive.\n    /// @return bestRoute The best route for the swap.\n    function previewSwapOut(\n        uint256 _amount,\n        address _sourceCurrency,\n        address _targetToken\n    )\n        public\n        view\n        virtual\n        returns (\n            bool hasValidRoute,\n            uint256 expectedTargetAmount,\n            IGildiExchangeSwapAdapter.QuoteRoute memory bestRoute\n        )\n    {\n        // No swap needed if the target token is the source token\n        if (_targetToken == _sourceCurrency) {\n            return (\n                false,\n                _amount,\n                IGildiExchangeSwapAdapter.QuoteRoute({\n                    marketplaceAdapter: address(0),\n                    route: new address[](0),\n                    fees: new uint128[](0),\n                    amounts: new uint128[](0),\n                    virtualAmountsWithoutSlippage: new uint128[](0)\n                })\n            );\n        }\n\n        // Check for adapters\n        IGildiExchangeSwapAdapter[] memory adapters = getAdapters();\n        if (adapters.length == 0) {\n            return (\n                false,\n                0,\n                IGildiExchangeSwapAdapter.QuoteRoute({\n                    marketplaceAdapter: address(0),\n                    route: new address[](0),\n                    fees: new uint128[](0),\n                    amounts: new uint128[](0),\n                    virtualAmountsWithoutSlippage: new uint128[](0)\n                })\n            );\n        }\n\n        BestAdapterSwapOutQuote memory quote = _swapOutQuoteAndPickAdapter(_amount, _targetToken, _sourceCurrency);\n        expectedTargetAmount = quote.bestTargetAmount;\n        bestRoute = quote.bestQuoteRoute;\n        hasValidRoute = quote.hasValidRoute;\n    }\n}\n"
    },
    "contracts/marketplace/exchange/GildiExchangePaymentBaseUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport '../../interfaces/external/IWNative.sol';\nimport '../../interfaces/marketplace/exchange/IGildiExchange.sol';\nimport '../../interfaces/marketplace/exchange/IGildiExchangeSwapAdapter.sol';\nimport './GildiExchangePaymentBaseCore.sol';\n\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\nimport {ReentrancyGuardUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol';\nimport {ContextUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\n\n/// @title GildiExchangePaymentBaseUpgradeable\n/// @notice Abstract upgradeable base contract implementing the payment flow for the marketplace.\n/// @dev Inherits from Initializable, ContextUpgradeable, OwnableUpgradeable, and ReentrancyGuardUpgradeable.\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\nabstract contract GildiExchangePaymentBaseUpgradeable is\n    GildiExchangePaymentBaseCore,\n    Initializable,\n    ContextUpgradeable,\n    AccessControlUpgradeable,\n    ReentrancyGuardUpgradeable\n{\n    // keccak256(abi.encode(uint256(keccak256(\"gildi.storage.GildiExchangePaymentBase\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant GildiExchangePaymentBaseStorageLocation =\n        0x29b67bb007a31b15dbc8250e7a602c4b79c971e992017fd3dae3b054f8ae4e00;\n\n    /// @notice Initializes the upgradeable contract.\n    /// @param _gildiExchange The address of the Gildi Exchange.\n    /// @param _initialDefaultAdmin The address of the initial default admin.\n    /// @param _initialContractAdmin The address of the initial contract admin.\n    function __GildiExchangePaymentBase_init(\n        address _gildiExchange,\n        address _initialDefaultAdmin,\n        address _initialContractAdmin\n    ) internal onlyInitializing {\n        __GildiExchangePaymentBase_init_unchained(_gildiExchange, _initialDefaultAdmin, _initialContractAdmin);\n    }\n\n    /// @notice Performs unchained initialization for the upgradeable contract.\n    /// @param _gildiExchange The address of the Gildi Exchange.\n    /// @param _initialDefaultAdmin The address of the initial default admin.\n    /// @param _initialContractAdmin The address of the initial contract admin.\n    function __GildiExchangePaymentBase_init_unchained(\n        address _gildiExchange,\n        address _initialDefaultAdmin,\n        address _initialContractAdmin\n    ) internal onlyInitializing {\n        __ReentrancyGuard_init();\n        __AccessControl_init();\n        GildiExchangePaymentBaseStorage storage s = _getGildiExchangePaymentBaseStorage();\n        s.gildiExchange = IGildiExchange(_gildiExchange);\n\n        _grantRole(DEFAULT_ADMIN_ROLE, _initialDefaultAdmin);\n        _grantRole(ADMIN_ROLE, _initialContractAdmin);\n    }\n\n    //----- Admin Functions -----\n\n    /// @notice Sets whether native payments are allowed for purchases.\n    /// @param _allow True if native payments are enabled.\n    function setPurchaseAllowNative(bool _allow) public onlyRole(ADMIN_ROLE) {\n        super._setPurchaseAllowNative(_allow);\n    }\n\n    /// @notice Sets the allowed purchase status for a given source token.\n    /// @param _token The address of the token.\n    /// @param _allowed True to allow the token.\n    function setAllowedPurchaseToken(address _token, bool _allowed) external onlyRole(ADMIN_ROLE) {\n        super._setAllowedPurchaseToken(_token, _allowed);\n    }\n\n    /// @notice Adds a new aggregator/DEX adapter.\n    /// @param _adapter The adapter to add.\n    function addAdapter(IGildiExchangeSwapAdapter _adapter) external onlyRole(ADMIN_ROLE) {\n        super._addAdapter(_adapter);\n    }\n\n    /// @notice Removes an adapter by instance.\n    /// @param adapter The adapter instance to remove.\n    function removeAdapter(IGildiExchangeSwapAdapter adapter) external onlyRole(ADMIN_ROLE) {\n        super._removeAdapter(adapter);\n    }\n\n    /// @notice Sets the wrapped native token address.\n    /// @param _wnative The address of the wrapped native token.\n    function setWrappedNative(address _wnative) external onlyRole(ADMIN_ROLE) {\n        super._setWrappedNative(_wnative);\n    }\n\n    /// @notice Removes an adapter by its index.\n    /// @param index The index of the adapter to remove.\n    function removeAdapter(uint256 index) external onlyRole(ADMIN_ROLE) {\n        super._removeAdapter(index);\n    }\n\n    //----- Internal Storage Getter -----\n\n    /// @dev Returns the storage pointer for unstructured storage.\n    function _getStorage() internal pure override returns (GildiExchangePaymentBaseStorage storage) {\n        return _getGildiExchangePaymentBaseStorage();\n    }\n\n    function _msgSender()\n        internal\n        view\n        override(GildiExchangePaymentBaseCore, ContextUpgradeable)\n        returns (address sender)\n    {\n        return super._msgSender();\n    }\n\n    /// @dev Internal function to retrieve the storage struct from a fixed slot.\n    /// @return $ The storage pointer.\n    function _getGildiExchangePaymentBaseStorage() private pure returns (GildiExchangePaymentBaseStorage storage $) {\n        assembly {\n            $.slot := GildiExchangePaymentBaseStorageLocation\n        }\n    }\n}\n"
    },
    "contracts/marketplace/exchange/GildiExchangePaymentProcessor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport {IGildiExchange} from '../../interfaces/marketplace/exchange/IGildiExchange.sol';\nimport {IGildiExchangePaymentProcessor} from '../../interfaces/marketplace/exchange/IGildiExchangePaymentProcessor.sol';\nimport {IGildiPriceResolver} from '../../interfaces/oracles/price/IGildiPriceOracle.sol';\nimport {IGildiExchangePaymentAggregator} from '../../interfaces/marketplace/exchange/IGildiExchangePaymentAggregator.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport {IERC20Metadata} from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport {IERC20Burnable} from '../../interfaces/token/IERC20Burnable.sol';\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport {SharedErrors} from '../../libraries/marketplace/exchange/SharedErrors.sol';\nimport '@openzeppelin/contracts/utils/structs/EnumerableMap.sol';\n\n/// @title Gildi Exchange Payment Processor\n/// @notice Handles payment processing, fee calculation, and currency conversions for the Gildi Exchange\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\ncontract GildiExchangePaymentProcessor is Initializable, IGildiExchangePaymentProcessor {\n    using SafeERC20 for IERC20;\n    using EnumerableMap for EnumerableMap.AddressToBytes32Map;\n\n    // ========== Constants ==========\n    /// @dev Dead address for burning tokens\n    address private constant DEAD_ADDRESS = address(0x000000000000000000000000000000000000dEaD);\n\n    /// @dev Default slippage tolerance in basis points (5%)\n    uint16 private constant DEFAULT_SLIPPAGE_BPS = 500;\n\n    // ========== Storage Variables ==========\n    /// @notice The GildiExchange contract that calls this contract\n    IGildiExchange public gildiExchange;\n\n    /// @dev Mapping from currency address to price feed ID\n    EnumerableMap.AddressToBytes32Map private priceFeedIds;\n\n    // ========== Events ==========\n    /// @notice Emitted when a price feed is set\n    /// @param currency The currency address\n    /// @param feedId The price feed ID\n    event PriceFeedSet(address indexed currency, bytes32 feedId);\n\n    /// @notice Emitted when a price feed is removed\n    /// @param currency The currency address\n    event PriceFeedRemoved(address indexed currency);\n\n    /// @notice Emitted when a payment is processed for a listing purchase or fee transfer\n    /// @param listingId The ID of the listing being purchased\n    /// @param from The address sending the payment\n    /// @param to The address receiving the payment\n    /// @param sourceToken The source token used for payment\n    /// @param amount The amount of source token\n    /// @param payoutToken The token received by the recipient (may differ from sourceToken if swapped)\n    /// @param swapAmount The amount received after swap (if performed)\n    /// @param isFee Whether this payment is a fee transfer\n    /// @param swapRequested Whether a token swap was requested\n    /// @param swapSuccessful Whether the swap was successful (if requested)\n    /// @param slippageBps The slippage tolerance in basis points used for swaps\n    event PaymentProcessed(\n        uint256 indexed listingId,\n        address indexed from,\n        address indexed to,\n        address sourceToken,\n        uint256 amount,\n        address payoutToken,\n        uint256 swapAmount,\n        bool isFee,\n        bool swapRequested,\n        bool swapSuccessful,\n        uint16 slippageBps\n    );\n\n    // ========== Structs ==========\n    struct PriceFeedInfo {\n        address currency;\n        bytes32 feedId;\n    }\n\n    /// @dev Struct for transfer parameters to reduce stack usage\n    struct TransferParams {\n        uint256 listingId;\n        address from;\n        address to;\n        uint256 amount;\n        address amountCurrency;\n        address payoutCurrency;\n        uint16 slippageBps;\n        bool isFee;\n    }\n\n    // ========== Modifiers ==========\n\n    /// @notice Ensures that only the GildiExchange contract can call this function\n    modifier onlyGildiExchange() {\n        if (msg.sender != address(gildiExchange)) {\n            revert SharedErrors.InvalidCaller();\n        }\n        _;\n    }\n\n    /// @notice Ensures that only admins can call this function (checks with GildiExchange)\n    modifier onlyAdmin() {\n        bytes32 adminRole = gildiExchange.getAppEnvironment().adminRole;\n        if (!gildiExchange.hasRole(adminRole, msg.sender)) {\n            revert SharedErrors.InvalidCaller();\n        }\n        _;\n    }\n\n    // ========== Constructor and Initializer ==========\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Initializes the contract\n    /// @param _gildiExchange The address of the GildiExchange contract\n    function initialize(address _gildiExchange) external initializer {\n        gildiExchange = IGildiExchange(_gildiExchange);\n    }\n\n    // ========== Price Oracle Functions ==========\n\n    /// @notice Sets a price feed ID for a currency\n    /// @param _currency The currency address\n    /// @param _feedId The price feed ID\n    function setPriceFeedId(address _currency, bytes32 _feedId) external onlyAdmin {\n        (, bytes32 priceFeedId) = priceFeedIds.tryGet(_currency);\n        if (priceFeedId != _feedId) {\n            priceFeedIds.set(_currency, _feedId);\n            emit PriceFeedSet(_currency, _feedId);\n        }\n    }\n\n    /// @notice Removes a price feed for a currency\n    /// @param _currency The currency address\n    function removePriceFeedId(address _currency) external onlyAdmin {\n        if (priceFeedIds.contains(_currency)) {\n            priceFeedIds.remove(_currency);\n            emit PriceFeedRemoved(_currency);\n        }\n    }\n\n    /// @inheritdoc IGildiExchangePaymentProcessor\n    function getPriceFeedId(address _currency) public view returns (bytes32) {\n        (, bytes32 priceFeedId) = priceFeedIds.tryGet(_currency);\n        return priceFeedId;\n    }\n\n    /// @notice Returns all price feeds\n    /// @return priceFeedInfos Array of price feed information\n    function getPriceFeeds() public view returns (PriceFeedInfo[] memory priceFeedInfos) {\n        address[] memory keys = priceFeedIds.keys();\n        priceFeedInfos = new PriceFeedInfo[](keys.length);\n        for (uint256 i = 0; i < keys.length; i++) {\n            priceFeedInfos[i] = PriceFeedInfo(keys[i], priceFeedIds.get(keys[i]));\n        }\n    }\n\n    /// @inheritdoc IGildiExchangePaymentProcessor\n    function quoteInCurrency(uint256 _priceInUSD, address _currency) external view returns (uint256) {\n        IGildiExchange.AppEnvironment memory $ = _getAppEnvironment();\n        bytes32 priceFeedId = getPriceFeedId(_currency);\n        uint256 priceAskDecimals = $.settings.priceAskDecimals; // Cache storage read\n\n        IGildiPriceResolver.PriceData memory priceData = $.settings.gildiPriceOracle.getPriceNoOlderThan(\n            priceFeedId,\n            300\n        );\n        uint8 currencyDecimals = IERC20Metadata(_currency).decimals();\n        uint256 quoteScaled;\n\n        // Simplified calculation with ternary operator\n        quoteScaled = priceData.decimals >= priceAskDecimals\n            ? _priceInUSD * 10 ** (priceData.decimals - priceAskDecimals)\n            : _priceInUSD / 10 ** (priceAskDecimals - priceData.decimals);\n\n        return (quoteScaled * 10 ** currencyDecimals) / priceData.price;\n    }\n\n    /// @inheritdoc IGildiExchangePaymentProcessor\n    function handleProcessPaymentWithFees(\n        uint256 _releaseId,\n        address _buyer,\n        address _seller,\n        uint256 _value,\n        address _amountCurrency,\n        bool _createFund,\n        address _operator,\n        bool _isProxyOperation,\n        uint256 _listingId,\n        address _listingPayoutCurrency,\n        uint16 _slippageBps\n    ) external onlyGildiExchange {\n        // Skip self-transfers\n        if (_buyer == _seller) return;\n\n        IGildiExchange.AppEnvironment memory $ = _getAppEnvironment();\n\n        // Calculate fees\n        uint256 totalFeeAmount;\n        IGildiExchange.Receiver[] memory feeReceivers;\n        (totalFeeAmount, feeReceivers) = _calculateFees(_releaseId, _value);\n\n        if (_createFund) {\n            // Transfer tokens from operator to fund manager in context\n            gildiExchange.transferTokenInContext(_operator, address($.settings.fundManager), _value, _amountCurrency);\n        }\n\n        // Process fees - either transfer or create funds\n        uint256 receiversLength = feeReceivers.length;\n        for (uint256 i = 0; i < receiversLength; i++) {\n            address receiver = feeReceivers[i].receiverAddress;\n            uint256 feeAmount = feeReceivers[i].value;\n            address payoutCurrency = feeReceivers[i].payoutCurrency;\n\n            if (feeAmount > 0) {\n                if (_createFund) {\n                    // Use helper function to create or add to fund\n                    _addToFund(\n                        _releaseId,\n                        receiver,\n                        _buyer,\n                        _operator,\n                        _isProxyOperation,\n                        feeAmount,\n                        _amountCurrency,\n                        payoutCurrency\n                    );\n                } else {\n                    // Direct transfer for regular sales - use default slippage for fee receivers\n                    _executeTransfer(\n                        TransferParams({\n                            listingId: _listingId,\n                            from: _operator,\n                            to: receiver,\n                            amount: feeAmount,\n                            amountCurrency: _amountCurrency,\n                            payoutCurrency: payoutCurrency,\n                            slippageBps: DEFAULT_SLIPPAGE_BPS,\n                            isFee: true\n                        })\n                    );\n                }\n            }\n        }\n\n        // Handle the remaining amount for the receiver\n        uint256 remainingAmount = _value - totalFeeAmount;\n        if (remainingAmount > 0) {\n            if (_createFund) {\n                // Use helper function to create or add to fund\n                _addToFund(\n                    _releaseId,\n                    _seller,\n                    _buyer,\n                    _operator,\n                    _isProxyOperation,\n                    remainingAmount,\n                    _amountCurrency,\n                    _listingPayoutCurrency\n                );\n            } else {\n                // Direct transfer for regular sales\n                _executeTransfer(\n                    TransferParams({\n                        listingId: _listingId,\n                        from: _operator,\n                        to: _seller,\n                        amount: remainingAmount,\n                        amountCurrency: _amountCurrency,\n                        payoutCurrency: _listingPayoutCurrency,\n                        slippageBps: _slippageBps,\n                        isFee: false\n                    })\n                );\n            }\n        }\n    }\n\n    /// @dev Calculates fees for a purchase based on global and release-specific fee distributions\n    /// @param _releaseId The ID of the release\n    /// @param _amount The amount to calculate fees for\n    /// @return Total fees amount\n    /// @return Array of fee receivers with their respective amounts\n    function _calculateFees(\n        uint256 _releaseId,\n        uint256 _amount\n    ) internal view returns (uint256, IGildiExchange.Receiver[] memory) {\n        IGildiExchange.AppEnvironment memory env = _getAppEnvironment();\n\n        // Get fees for this release\n        IGildiExchange.FeeDistribution[] memory releaseFees = gildiExchange.getReleaseFees(_releaseId);\n        uint256 feeDistCount = releaseFees.length;\n\n        // Count total receivers\n        uint256 totalReceivers = 0;\n        for (uint256 i = 0; i < feeDistCount; i++) {\n            totalReceivers += releaseFees[i].subFeeReceivers.length + 1; // +1 for parent\n        }\n\n        // Initialize result arrays\n        IGildiExchange.Receiver[] memory receivers = new IGildiExchange.Receiver[](totalReceivers);\n        uint256 totalFees = 0;\n        uint256 receiverIndex = 0;\n\n        // Process each fee distribution\n        for (uint256 i = 0; i < feeDistCount; i++) {\n            IGildiExchange.FeeDistribution memory dist = releaseFees[i];\n\n            // Calculate parent fee amount\n            uint256 parentFee = (_amount * dist.feeReceiver.value) / env.basisPoints;\n            uint256 remainingParentFee = parentFee;\n            totalFees += parentFee;\n\n            // Calculate & store sub-receiver fees\n            uint256 subCount = dist.subFeeReceivers.length;\n            uint256 startIndex = receiverIndex + 1; // Skip parent index for now\n\n            for (uint256 j = 0; j < subCount; j++) {\n                uint256 subFee = (parentFee * dist.subFeeReceivers[j].value) / env.basisPoints;\n                receivers[startIndex + j] = IGildiExchange.Receiver({\n                    receiverAddress: dist.subFeeReceivers[j].receiverAddress,\n                    value: uint16(subFee),\n                    payoutCurrency: dist.subFeeReceivers[j].payoutCurrency\n                });\n                remainingParentFee -= subFee;\n            }\n\n            // Store parent data after calculating all sub-fees\n            receivers[receiverIndex] = IGildiExchange.Receiver({\n                receiverAddress: dist.feeReceiver.receiverAddress,\n                value: uint16(remainingParentFee),\n                payoutCurrency: dist.feeReceiver.payoutCurrency\n            });\n\n            // Move index for next distribution\n            receiverIndex += subCount + 1;\n        }\n\n        return (totalFees, receivers);\n    }\n\n    /// @dev Adds funds to fund for a participant\n    ///      Delegates to the fund manager contract\n    /// @param _releaseId The ID of the release\n    /// @param _fundParticipant The address of the fund participant\n    /// @param _buyer The address of the buyer\n    /// @param _operator The address of the operator\n    /// @param _isProxyOperation Whether this is a proxy operation\n    /// @param _amount The amount to add to fund\n    /// @param _amountCurrency The currency of the fund amount\n    /// @param _payoutCurrency The currency to payout in\n    function _addToFund(\n        uint256 _releaseId,\n        address _fundParticipant,\n        address _buyer,\n        address _operator,\n        bool _isProxyOperation,\n        uint256 _amount,\n        address _amountCurrency,\n        address _payoutCurrency\n    ) internal {\n        IGildiExchange.AppEnvironment memory env = _getAppEnvironment();\n\n        // Delegate to the fund manager\n        env.settings.fundManager.handleAddToFund(\n            _releaseId,\n            _fundParticipant,\n            _buyer,\n            _operator,\n            _isProxyOperation,\n            _amount,\n            _amountCurrency,\n            _payoutCurrency\n        );\n    }\n\n    /// @dev Executes a transfer between addresses, potentially with currency conversion\n    /// @param _params Transfer parameters struct containing all transfer details\n    function _executeTransfer(TransferParams memory _params) internal {\n        if (_params.from == address(this)) {\n            revert SharedErrors.ParamError();\n        }\n\n        IGildiExchange.AppEnvironment memory env = _getAppEnvironment();\n        // Try to burn if destination is zero address or dead address\n        if (_params.to == address(0) || _params.to == DEAD_ADDRESS) {\n            // Check if we need to swap before burning (currencies differ and payout currency specified)\n            if (\n                _params.payoutCurrency != address(0) &&\n                _params.amountCurrency != _params.payoutCurrency &&\n                address(env.settings.paymentAggregator) != address(0)\n            ) {\n                // Need to swap first, then burn the swapped amount\n                IERC20 sourceToken = IERC20(_params.amountCurrency);\n                gildiExchange.transferTokenInContext(\n                    _params.from,\n                    address(this),\n                    _params.amount,\n                    _params.amountCurrency\n                );\n\n                // Check if there's a valid swap route\n                (bool hasValidRoute, uint256 expectedAmount, ) = env.settings.paymentAggregator.previewSwapOut(\n                    _params.amount,\n                    _params.amountCurrency,\n                    _params.payoutCurrency\n                );\n\n                if (hasValidRoute && expectedAmount > 0) {\n                    // Approve the payment aggregator to spend the tokens\n                    uint256 allowance = sourceToken.allowance(address(this), address(env.settings.paymentAggregator));\n                    if (allowance < _params.amount) {\n                        sourceToken.forceApprove(address(env.settings.paymentAggregator), type(uint256).max);\n                    }\n\n                    // Calculate minimum amount based on slippage\n                    uint256 minAmount = (expectedAmount * (env.basisPoints - _params.slippageBps)) / env.basisPoints;\n\n                    // Execute swap to this contract, then try to burn the swapped amount\n                    try\n                        env.settings.paymentAggregator.swapOut(\n                            _params.amount,\n                            _params.amountCurrency,\n                            _params.payoutCurrency,\n                            minAmount,\n                            address(this)\n                        )\n                    returns (uint256 swapAmount) {\n                        // Swap successful, now try to burn the swapped amount in payout currency\n                        // First, approve the exchange contract to burn the swapped tokens\n                        IERC20(_params.payoutCurrency).forceApprove(address(gildiExchange), swapAmount);\n\n                        if (gildiExchange.tryBurnTokenInContext(address(this), swapAmount, _params.payoutCurrency)) {\n                            // Burning succeeded, emit event and return\n                            emit PaymentProcessed(\n                                _params.listingId,\n                                _params.from,\n                                address(0), // to: burned tokens go to zero address\n                                _params.amountCurrency, // sourceToken\n                                _params.amount, // amount\n                                _params.payoutCurrency, // payoutToken (swapped currency)\n                                swapAmount, // swapAmount\n                                _params.isFee,\n                                true, // swapRequested\n                                true, // swapSuccessful\n                                _params.slippageBps\n                            );\n                            return;\n                        } else {\n                            // Burning failed, send swapped tokens to dead address\n                            IERC20(_params.payoutCurrency).safeTransfer(DEAD_ADDRESS, swapAmount);\n                            emit PaymentProcessed(\n                                _params.listingId,\n                                _params.from,\n                                DEAD_ADDRESS,\n                                _params.amountCurrency, // sourceToken\n                                _params.amount, // amount\n                                _params.payoutCurrency, // payoutToken (swapped currency)\n                                swapAmount, // swapAmount\n                                _params.isFee,\n                                true, // swapRequested\n                                true, // swapSuccessful\n                                _params.slippageBps\n                            );\n                            return;\n                        }\n                    } catch {\n                        // Swap failed, fall through to original burn logic\n                    }\n                }\n                // If no valid route or swap failed, fall through to original burn logic\n            }\n\n            // Original burn logic: try to burn in original currency\n            if (gildiExchange.tryBurnTokenInContext(_params.from, _params.amount, _params.amountCurrency)) {\n                // Burning succeeded, emit event and return\n                emit PaymentProcessed(\n                    _params.listingId,\n                    _params.from,\n                    address(0), // to: burned tokens go to zero address\n                    _params.amountCurrency, // sourceToken\n                    _params.amount, // amount\n                    _params.amountCurrency, // payoutToken (same as source for direct burns)\n                    _params.amount, // swapAmount (no swap, same amount)\n                    _params.isFee,\n                    false, // swapRequested (no swap for direct burns)\n                    false, // swapSuccessful (no swap for direct burns)\n                    0\n                );\n                return;\n            } else {\n                // Burning failed, redirect to dead address\n                _params.to = DEAD_ADDRESS;\n            }\n        }\n\n        bool swapRequested = false;\n        bool swapSuccessful = false;\n        address finalPayoutCurrency = _params.payoutCurrency;\n        uint256 finalAmount = _params.amount; // Initialize to original amount, will be updated if swap is successful\n\n        // If amount currency and payout currency are the same or payout currency is not specified or destination is DEAD_ADDRESS, do direct transfer\n        if (\n            _params.payoutCurrency == address(0) ||\n            _params.amountCurrency == _params.payoutCurrency ||\n            _params.to == DEAD_ADDRESS ||\n            address(env.settings.paymentAggregator) == address(0)\n        ) {\n            gildiExchange.transferTokenInContext(_params.from, _params.to, _params.amount, _params.amountCurrency);\n            // In this case, the payout currency is the same as the amount currency\n            finalPayoutCurrency = _params.amountCurrency;\n        } else {\n            swapRequested = true;\n\n            // First, get the tokens to this contract if they're not already here\n            IERC20 sourceToken = IERC20(_params.amountCurrency);\n            gildiExchange.transferTokenInContext(_params.from, address(this), _params.amount, _params.amountCurrency);\n\n            // Check if there's a valid swap route\n            (bool hasValidRoute, uint256 expectedAmount, ) = env.settings.paymentAggregator.previewSwapOut(\n                _params.amount,\n                _params.amountCurrency,\n                _params.payoutCurrency\n            );\n\n            if (hasValidRoute && expectedAmount > 0) {\n                // Approve the payment aggregator to spend the tokens\n                uint256 allowance = sourceToken.allowance(address(this), address(env.settings.paymentAggregator));\n                if (allowance < _params.amount) {\n                    sourceToken.forceApprove(address(env.settings.paymentAggregator), type(uint256).max);\n                }\n\n                // Calculate minimum amount based on slippage (10000 - slippageBps) / 10000\n                uint256 minAmount = (expectedAmount * (env.basisPoints - _params.slippageBps)) / env.basisPoints;\n\n                // Execute the swap\n                try\n                    env.settings.paymentAggregator.swapOut(\n                        _params.amount,\n                        _params.amountCurrency,\n                        _params.payoutCurrency,\n                        minAmount,\n                        _params.to\n                    )\n                returns (uint256 swapAmount) {\n                    // Swap successful\n                    swapSuccessful = true;\n                    finalPayoutCurrency = _params.payoutCurrency;\n                    finalAmount = swapAmount;\n                } catch {\n                    // Swap failed, fallback to direct transfer\n                    sourceToken.safeTransfer(_params.to, _params.amount);\n                    finalPayoutCurrency = _params.amountCurrency;\n                }\n            } else {\n                // No valid route, fallback to direct transfer\n                sourceToken.safeTransfer(_params.to, _params.amount);\n                finalPayoutCurrency = _params.amountCurrency;\n            }\n        }\n\n        // Emit payment processed event\n        emit PaymentProcessed(\n            _params.listingId,\n            _params.from,\n            _params.to,\n            _params.amountCurrency,\n            _params.amount,\n            finalPayoutCurrency,\n            finalAmount,\n            _params.isFee,\n            swapRequested,\n            swapSuccessful,\n            _params.slippageBps\n        );\n    }\n\n    /// @dev Gets the application environment from the GildiExchange contract\n    /// @dev Returns the app environment structure containing all settings and roles\n    function _getAppEnvironment() internal view returns (IGildiExchange.AppEnvironment memory) {\n        return gildiExchange.getAppEnvironment();\n    }\n\n    // ---------------------------------------------------------------------------\n    // Fallback functions\n    // ---------------------------------------------------------------------------\n\n    /// @notice Fallback function to prevent direct Ether transfers\n    fallback() external payable {\n        revert SharedErrors.NotAllowed();\n    }\n\n    /// @notice Fallback function to prevent direct Ether transfers\n    receive() external payable {\n        revert SharedErrors.NotAllowed();\n    }\n}\n"
    },
    "contracts/marketplace/vault/GildiExchangePurchaseVault.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport {IGildiPriceOracle} from '../../interfaces/oracles/price/IGildiPriceOracle.sol';\nimport {IGildiPriceResolver} from '../../interfaces/oracles/price/IGildiPriceResolver.sol';\nimport {IGildiExchangePurchaseVault} from '../../interfaces/marketplace/vault/IGildiExchangePurchaseVault.sol';\nimport {IGildiExchangePaymentAggregator} from '../../interfaces/marketplace/exchange/IGildiExchangePaymentAggregator.sol';\nimport {IGildiExchangeSwapAdapter} from '../../interfaces/marketplace/exchange/IGildiExchangeSwapAdapter.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport {IERC20Metadata} from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\nimport {ReentrancyGuardUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol';\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport {EnumerableSet} from '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\nimport {Math} from '@openzeppelin/contracts/utils/math/Math.sol';\n\n/// @title USD Treasury Purchase Vault\n/// @notice A vault that allows creating USD purchase intents and fulfilling them with crypto tokens\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\ncontract GildiExchangePurchaseVault is\n    Initializable,\n    AccessControlUpgradeable,\n    ReentrancyGuardUpgradeable,\n    IGildiExchangePurchaseVault\n{\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    // -------------------- Constants --------------------\n    bytes32 public constant OPERATOR_ROLE = keccak256('OPERATOR_ROLE'); // create/cancel intents\n    bytes32 public constant ADMIN_ROLE = keccak256('ADMIN_ROLE'); // admin\n\n    // -------------------- Types --------------------\n    enum PurchaseStatus {\n        PENDING,\n        FUNDED,\n        SETTLED,\n        EXPIRED,\n        CANCELLED\n    }\n\n    /// @notice Represents a purchase intent within the vault lifecycle.\n    /// @dev Captures all metadata required to validate and settle a purchase.\n    struct PurchaseIntent {\n        /// @dev Unique identifier for the intent\n        bytes32 intentId;\n        /// @dev Address authorized to execute and settle this intent\n        address beneficiary;\n        /// @dev Total authorized value in USD cents (2 decimals)\n        uint256 valueUsd;\n        /// @dev Token used for funding the purchase\n        address debitedToken;\n        /// @dev Amount of token debited to the beneficiary\n        uint256 debitedTokenAmount;\n        /// @dev Token price in USD with 18 decimals at time of debit\n        uint256 debitedTokenPrice;\n        /// @dev Actual USD spent (in cents, 2 decimals)\n        uint256 settledUsd;\n        /// @dev Unix timestamp after which the intent is no longer valid\n        uint256 expiresAt;\n        /// @dev Unix timestamp of intent creation\n        uint256 createdAt;\n        /// @dev Unix timestamp of last update\n        uint256 updatedAt;\n        /// @dev Stored status; EXPIRED is derived in views for pending intents past expiry\n        PurchaseStatus status;\n        /// @dev Block number when executeIntent was called (0 = not executed)\n        uint256 executedAtBlock;\n    }\n\n    /// @notice Represents a token supported by the vault.\n    struct TokenView {\n        /// @dev The token address\n        address token;\n        /// @dev The feed ID for the token\n        bytes32 feedId;\n        /// @dev Whether this token is the default token\n        bool defaultToken;\n    }\n\n    // -------------------- State Variables --------------------\n    /// @notice Price oracle for token valuations\n    IGildiPriceOracle public gildiPriceOracle;\n\n    /// @notice Payment aggregator for purchase routing and estimation\n    IGildiExchangePaymentAggregator public paymentAggregator;\n\n    /// @notice Slippage and fee buffer in basis points (100 = 1%)\n    uint256 public slippageAndFeeBuffer;\n\n    /// @notice Preferred token to use if viable (acts as an override when set)\n    address public preferredToken;\n\n    /// @dev Supported tokens for vault operations\n    EnumerableSet.AddressSet private supportedTokens;\n\n    /// @notice Oracle feed IDs for supported tokens (token => feedId)\n    mapping(address => bytes32) public tokenFeedIds;\n\n    /// @dev Purchase intents storage\n    mapping(bytes32 => PurchaseIntent) private intents;\n\n    // -------------------- Errors --------------------\n    // Intent lifecycle errors\n    /// @dev Thrown when trying to create an intent that already exists\n    error IntentAlreadyExists(bytes32 intentId);\n    /// @dev Thrown when a referenced intent does not exist\n    error IntentDoesNotExist(bytes32 intentId);\n    /// @dev Thrown when an operation is invalid for the current intent state\n    error IntentWrongState(bytes32 intentId);\n    /// @dev Thrown when an operation is attempted on an expired intent\n    error IntentExpired(bytes32 intentId);\n    /// @dev Thrown when msg.sender is not the intent beneficiary\n    error NotBeneficiary(bytes32 intentId);\n    /// @dev Thrown when a debit would exceed remaining USD allowance\n    error UsdOverDebit(bytes32 intentId, uint256 want, uint256 remaining);\n\n    // Token and vault errors\n    /// @dev Thrown when a token is not supported by the vault\n    error TokenNotSupported(address token);\n    /// @dev Thrown when a provided token is not allowed for the operation\n    error NotAllowedToken(address token);\n    /// @dev Thrown when vault balance is insufficient for the transfer\n    error InsufficientVaultBalance(address token, uint256 want, uint256 have);\n    /// @dev Thrown when no viable token can be found to fund a purchase\n    error NoViableTokenFound(uint256 intentValueUsdCents);\n    /// @dev Thrown when oracle feed ID is missing for a token\n    error TokenFeedIdNotSet(address token);\n    /// @dev Thrown when zero address provided where non-zero is required\n    error ZeroAddressToken();\n\n    // Refund errors\n    /// @dev Thrown when attempting a refund before execution\n    error RefundWithoutExecution(bytes32 intentId);\n    /// @dev Thrown when refund is not performed within the same transaction as execution\n    error RefundNotSameTransaction(bytes32 intentId);\n    /// @dev Thrown when provided refund is insufficient to cover required delta\n    error InsufficientRefund(bytes32 intentId);\n    /// @dev Thrown when interacting with fee-on-transfer tokens (unsupported)\n    error FeeOnTransferNotSupported(address token);\n\n    // Configuration and validation errors\n    /// @dev Thrown when price data is considered too old\n    error PriceDataTooOld(uint256 age);\n    /// @dev Thrown when function parameters are invalid\n    error BadParams();\n    /// @dev Thrown when USD credit is below the minimum threshold\n    error UsdCreditTooLow(uint256 credited, uint256 minUsdCredit);\n    /// @dev Thrown when ETH is sent to a non-payable function\n    error EthNotAcceptedHere();\n\n    // -------------------- Events --------------------\n    // Intent lifecycle events\n    /// @notice Emitted when a purchase intent is created\n    event IntentCreated(bytes32 indexed intentId, address indexed beneficiary, uint256 valueUsd, uint256 expiresAt);\n\n    /// @notice Emitted when an intent is executed\n    event IntentExecuted(\n        bytes32 indexed intentId,\n        address indexed token,\n        uint256 tokenSent,\n        uint256 usdDebited,\n        uint256 tokenPrice\n    );\n\n    /// @notice Emitted when intent is settled with actual USD spent\n    event IntentSettled(bytes32 indexed intentId, uint256 actualUsdSpentCents);\n\n    /// @notice Emitted when an intent is cancelled\n    event IntentCancelled(bytes32 indexed intentId, uint8 reasonCode);\n\n    // Vault management events\n    /// @notice Emitted when vault is topped up with tokens\n    event VaultToppedUp(address indexed token, uint256 amount, address indexed from);\n\n    /// @notice Emitted when tokens are withdrawn from vault\n    event VaultWithdrawn(address indexed token, uint256 amount, address indexed to);\n\n    // Configuration events\n    /// @notice Emitted when price oracle is updated\n    event PriceOracleSet(address indexed priceOracle);\n\n    /// @notice Emitted when payment aggregator is updated\n    event PaymentAggregatorSet(address indexed paymentAggregator);\n\n    /// @notice Emitted when slippage and fee buffer is updated\n    event SlippageAndFeeBufferSet(uint256 slippageAndFeeBufferBps);\n\n    /// @notice Emitted when a token is added/removed from supported list\n    event TokenSupportUpdated(address indexed token, bool supported);\n\n    /// @notice Emitted when preferred token is updated (address(0) means cleared)\n    event PreferredTokenSet(address indexed token);\n\n    /// @notice Emitted when a token's oracle feed ID is updated\n    event TokenFeedIdSet(address indexed token, bytes32 feedId);\n\n    // -------------------- Admin --------------------\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Initializes the purchase vault\n    /// @param _defaultAdmin Default admin address\n    /// @param _contractAdmin Contract admin address\n    /// @param _operator Operator address\n    /// @param _gildiPriceOracle Price oracle contract address\n    /// @param _paymentAggregator Payment aggregator contract address\n    function initialize(\n        address _defaultAdmin,\n        address _contractAdmin,\n        address _operator,\n        IGildiPriceOracle _gildiPriceOracle,\n        IGildiExchangePaymentAggregator _paymentAggregator\n    ) public initializer {\n        if (\n            _defaultAdmin == address(0) ||\n            _contractAdmin == address(0) ||\n            _operator == address(0) ||\n            address(_gildiPriceOracle) == address(0) ||\n            address(_paymentAggregator) == address(0)\n        ) {\n            revert BadParams();\n        }\n\n        __AccessControl_init();\n        __ReentrancyGuard_init();\n\n        _grantRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\n        _grantRole(ADMIN_ROLE, _contractAdmin);\n        _grantRole(OPERATOR_ROLE, _operator);\n\n        gildiPriceOracle = _gildiPriceOracle;\n        paymentAggregator = _paymentAggregator;\n        emit PriceOracleSet(address(_gildiPriceOracle));\n        emit PaymentAggregatorSet(address(_paymentAggregator));\n\n        // Set default slippage buffer to 1% (100 BPS)\n        slippageAndFeeBuffer = 100;\n    }\n\n    function setPriceOracle(IGildiPriceOracle _gildiPriceOracle) external onlyRole(ADMIN_ROLE) {\n        if (address(_gildiPriceOracle) == address(0)) {\n            revert BadParams();\n        }\n        gildiPriceOracle = _gildiPriceOracle;\n        emit PriceOracleSet(address(_gildiPriceOracle));\n    }\n\n    /// @notice Gets the current slippage and fee buffer\n    /// @return bufferBps Current buffer in basis points\n    function getSlippageAndFeeBuffer() external view returns (uint256 bufferBps) {\n        return slippageAndFeeBuffer;\n    }\n\n    /// @notice Sets the slippage and fee buffer\n    /// @param _slippageAndFeeBufferBps New buffer in basis points (100 = 1%)\n    function setSlippageAndFeeBuffer(uint256 _slippageAndFeeBufferBps) external onlyRole(ADMIN_ROLE) {\n        if (_slippageAndFeeBufferBps > 2000) {\n            revert BadParams(); // Max 20%\n        }\n        slippageAndFeeBuffer = _slippageAndFeeBufferBps;\n        emit SlippageAndFeeBufferSet(_slippageAndFeeBufferBps);\n    }\n\n    /// @notice Sets the payment aggregator\n    /// @param _paymentAggregator Payment aggregator contract address\n    function setPaymentAggregator(IGildiExchangePaymentAggregator _paymentAggregator) external onlyRole(ADMIN_ROLE) {\n        if (address(_paymentAggregator) == address(0)) {\n            revert BadParams();\n        }\n        paymentAggregator = _paymentAggregator;\n        emit PaymentAggregatorSet(address(_paymentAggregator));\n    }\n\n    /// @notice Adds a token with oracle feed ID (enables support + sets feed ID)\n    /// @param _token Token address\n    /// @param _feedId Oracle feed ID for the token\n    /// @param _setAsPreferred Whether to set this as the preferred token\n    function addToken(address _token, bytes32 _feedId, bool _setAsPreferred) external onlyRole(ADMIN_ROLE) {\n        if (_token == address(0)) {\n            revert ZeroAddressToken();\n        }\n        if (_feedId == bytes32(0)) {\n            revert BadParams();\n        }\n\n        if (!supportedTokens.contains(_token)) {\n            supportedTokens.add(_token);\n\n            tokenFeedIds[_token] = _feedId;\n\n            if (_setAsPreferred) {\n                preferredToken = _token;\n                emit PreferredTokenSet(_token);\n            }\n\n            emit TokenSupportUpdated(_token, true);\n            emit TokenFeedIdSet(_token, _feedId);\n        }\n    }\n\n    /// @notice Removes a token (disables support + clears feed ID)\n    /// @param _token Token address to remove\n    function removeToken(address _token) external onlyRole(ADMIN_ROLE) {\n        if (_token == address(0)) {\n            revert ZeroAddressToken();\n        }\n\n        if (supportedTokens.contains(_token)) {\n            // Clear preferred token if this was the preferred token\n            if (preferredToken == _token) {\n                preferredToken = address(0);\n                emit PreferredTokenSet(address(0));\n            }\n\n            supportedTokens.remove(_token);\n            tokenFeedIds[_token] = bytes32(0);\n\n            emit TokenSupportUpdated(_token, false);\n            emit TokenFeedIdSet(_token, bytes32(0));\n        }\n    }\n\n    /// @notice Updates the oracle feed ID for an already supported token\n    /// @param _token Token address\n    /// @param _feedId New oracle feed ID\n    function setTokenFeedId(address _token, bytes32 _feedId) external onlyRole(ADMIN_ROLE) {\n        if (_token == address(0)) {\n            revert ZeroAddressToken();\n        }\n        if (!supportedTokens.contains(_token)) {\n            revert TokenNotSupported(_token);\n        }\n        if (_feedId == bytes32(0)) {\n            revert BadParams();\n        }\n        tokenFeedIds[_token] = _feedId;\n        emit TokenFeedIdSet(_token, _feedId);\n    }\n\n    /// @notice Sets the preferred token for intent execution\n    /// @param _token Preferred token address (must be configured)\n    function setPreferredToken(address _token) external onlyRole(ADMIN_ROLE) {\n        if (_token == address(0)) {\n            revert ZeroAddressToken();\n        }\n        if (!supportedTokens.contains(_token)) {\n            revert TokenNotSupported(_token);\n        }\n        preferredToken = _token;\n        emit PreferredTokenSet(_token);\n    }\n\n    /// @notice Clears the preferred token override\n    function clearPreferredToken() external onlyRole(ADMIN_ROLE) {\n        preferredToken = address(0);\n        emit PreferredTokenSet(address(0));\n    }\n\n    // -------------------- Lifecycle --------------------\n\n    /// @notice Backend creates an intent bound to the wallet (beneficiary)\n    /// @param _intentId Unique identifier for the intent\n    /// @param _valueUsd USD value in cents (2 decimals)\n    /// @param _beneficiary Who can execute this intent\n    /// @param _expiresAt Unix timestamp when intent expires\n    function createIntent(\n        bytes32 _intentId,\n        uint256 _valueUsd,\n        address _beneficiary,\n        uint256 _expiresAt\n    ) external onlyRole(OPERATOR_ROLE) {\n        if (_intentId == bytes32(0) || _beneficiary == address(0) || _valueUsd == 0 || _expiresAt == 0) {\n            revert BadParams();\n        }\n        if (_expiresAt <= block.timestamp) {\n            revert BadParams();\n        }\n        if (intents[_intentId].intentId != bytes32(0)) {\n            revert IntentAlreadyExists(_intentId);\n        }\n\n        intents[_intentId] = PurchaseIntent({\n            intentId: _intentId,\n            beneficiary: _beneficiary,\n            valueUsd: _valueUsd,\n            settledUsd: 0,\n            debitedToken: address(0),\n            debitedTokenPrice: 0,\n            debitedTokenAmount: 0,\n            expiresAt: _expiresAt,\n            createdAt: block.timestamp,\n            updatedAt: block.timestamp,\n            status: PurchaseStatus.PENDING,\n            executedAtBlock: 0\n        });\n\n        emit IntentCreated(_intentId, _beneficiary, _valueUsd, _expiresAt);\n    }\n\n    /// @inheritdoc IGildiExchangePurchaseVault\n    function executeIntent(\n        bytes32 _intentId,\n        address _tokenHint,\n        IGildiExchangePurchaseVault.ExecutionContext calldata _ctx\n    ) external override nonReentrant returns (address token, uint256 tokenAmount) {\n        PurchaseIntent storage intent = intents[_intentId];\n\n        // Validation checks\n        if (intent.intentId == bytes32(0)) {\n            revert IntentDoesNotExist(_intentId);\n        }\n        if (msg.sender != intent.beneficiary) {\n            revert NotBeneficiary(_intentId);\n        }\n        if (_derivedExpired(intent)) {\n            revert IntentExpired(_intentId);\n        }\n        if (intent.status != PurchaseStatus.PENDING) {\n            revert IntentWrongState(_intentId);\n        }\n\n        // Token selection business logic using optimal selection\n        address selectedToken = _selectToken(_tokenHint, intent.valueUsd, _ctx.releaseId, _ctx.amount, _ctx.buyer);\n\n        // Get current price with validation\n        uint256 tokenPriceUsd18 = _getTokenPriceUsd(selectedToken);\n\n        // Calculate token amount needed with slippage buffer\n        uint256 requiredTokenAmount = _calculateTokenAmountWithBuffer(selectedToken, intent.valueUsd);\n\n        // Check vault balance\n        uint256 vaultBalance = IERC20(selectedToken).balanceOf(address(this));\n        if (vaultBalance < requiredTokenAmount) {\n            revert InsufficientVaultBalance(selectedToken, requiredTokenAmount, vaultBalance);\n        }\n\n        // Transfer tokens; enforce non-FOT by verifying recipient received exact amount\n        uint256 recipientBefore = IERC20(selectedToken).balanceOf(msg.sender);\n        IERC20(selectedToken).safeTransfer(msg.sender, requiredTokenAmount);\n        uint256 recipientAfter = IERC20(selectedToken).balanceOf(msg.sender);\n        if (recipientAfter - recipientBefore != requiredTokenAmount) {\n            revert FeeOnTransferNotSupported(selectedToken);\n        }\n        uint256 actualSent = requiredTokenAmount;\n\n        // Update intent state\n        intent.debitedToken = selectedToken;\n        intent.debitedTokenAmount = actualSent;\n        intent.debitedTokenPrice = tokenPriceUsd18;\n        intent.executedAtBlock = block.number; // Track execution block\n        intent.status = PurchaseStatus.FUNDED; // Mark as funded\n        intent.updatedAt = block.timestamp;\n\n        emit IntentExecuted(_intentId, selectedToken, actualSent, intent.valueUsd, tokenPriceUsd18);\n\n        return (selectedToken, actualSent);\n    }\n\n    /// @inheritdoc IGildiExchangePurchaseVault\n    function settleIntent(\n        bytes32 _intentId,\n        uint256 _actualUsdSpentCents,\n        address _refundToken,\n        uint256 _refundTokenAmount\n    ) external override nonReentrant {\n        PurchaseIntent storage intent = intents[_intentId];\n\n        // Validation checks\n        if (intent.intentId == bytes32(0)) revert IntentDoesNotExist(_intentId);\n        if (msg.sender != intent.beneficiary) revert NotBeneficiary(_intentId);\n        if (intent.status != PurchaseStatus.FUNDED) revert IntentWrongState(_intentId);\n        // Allow no-refund path (both zero). If refunding, token must match debited token.\n        if (_refundToken == address(0)) {\n            if (_refundTokenAmount != 0) {\n                revert NotAllowedToken(_refundToken);\n            }\n        } else {\n            if (_refundToken != intent.debitedToken) {\n                revert NotAllowedToken(_refundToken);\n            }\n        }\n\n        // Enforce same-transaction requirement\n        if (intent.executedAtBlock != block.number) {\n            revert RefundNotSameTransaction(_intentId);\n        }\n\n        // Handle token refunds if provided\n        if (_refundToken != address(0) && _refundTokenAmount > 0) {\n            // Calculate the USD delta that needs to be covered by refund\n            uint256 intentValueCents = intent.valueUsd;\n            uint256 deltaUsdCents = 0;\n\n            if (intentValueCents > _actualUsdSpentCents) {\n                deltaUsdCents = intentValueCents - _actualUsdSpentCents;\n            }\n\n            // If there's a delta, validate refund covers it\n            if (deltaUsdCents > 0) {\n                // Use the same token price from when intent was executed (18 decimals)\n                uint256 refundTokenPriceUsd18 = intent.debitedTokenPrice;\n\n                // Measure actual tokens received (ban fee-on-transfer: must match requested)\n                uint256 balBefore = IERC20(_refundToken).balanceOf(address(this));\n                IERC20(_refundToken).safeTransferFrom(msg.sender, address(this), _refundTokenAmount);\n                uint256 balAfter = IERC20(_refundToken).balanceOf(address(this));\n                uint256 actualReceived = balAfter - balBefore;\n                if (actualReceived != _refundTokenAmount) {\n                    revert FeeOnTransferNotSupported(_refundToken);\n                }\n\n                // Get token decimals and calculate refund value in cents using FLOOR rounding\n                uint8 tokenDecimals = IERC20Metadata(_refundToken).decimals();\n                uint256 refundValueCents = Math.mulDiv(\n                    actualReceived,\n                    refundTokenPriceUsd18,\n                    (10 ** tokenDecimals) * 1e16,\n                    Math.Rounding.Floor\n                );\n\n                // Validate refund covers the delta (reverts entire tx including transfer if insufficient)\n                if (refundValueCents < deltaUsdCents) {\n                    revert InsufficientRefund(_intentId);\n                }\n            } else {\n                // No delta; still pull tokens if provided to avoid dangling approvals\n                IERC20(_refundToken).safeTransferFrom(msg.sender, address(this), _refundTokenAmount);\n            }\n        }\n\n        // Update intent with settled amount (already in cents) - clamp to intent value\n        intent.settledUsd = Math.min(_actualUsdSpentCents, intent.valueUsd);\n        intent.status = PurchaseStatus.SETTLED;\n        intent.updatedAt = block.timestamp;\n\n        emit IntentSettled(_intentId, intent.settledUsd);\n    }\n\n    /// @notice Backend cancels a pending/expired intent. No token movement here.\n    /// @param _intentId The intent to cancel\n    /// @param _reasonCode Reason for cancellation (for logging)\n    function cancelIntent(bytes32 _intentId, uint8 _reasonCode) external onlyRole(OPERATOR_ROLE) {\n        PurchaseIntent storage intent = intents[_intentId];\n        if (intent.intentId == bytes32(0)) {\n            revert IntentDoesNotExist(_intentId);\n        }\n        // Only pending intents can be cancelled (includes time-expired which are still stored as PENDING)\n        if (intent.status != PurchaseStatus.PENDING) {\n            revert IntentWrongState(_intentId);\n        }\n\n        intent.status = PurchaseStatus.CANCELLED;\n        intent.updatedAt = block.timestamp;\n        emit IntentCancelled(_intentId, _reasonCode);\n    }\n\n    // -------------------- Views --------------------\n\n    /// @notice Gets complete intent details\n    /// @param _intentId The intent to query\n    /// @return intent The purchase intent with derived status\n    function getIntent(bytes32 _intentId) external view returns (PurchaseIntent memory intent) {\n        intent = intents[_intentId];\n        if (intent.intentId == bytes32(0)) {\n            revert IntentDoesNotExist(_intentId);\n        }\n        if (_derivedExpired(intent) && intent.status == PurchaseStatus.PENDING) {\n            intent.status = PurchaseStatus.EXPIRED; // derived, not stored\n        }\n    }\n\n    /// @notice Gets the status of an intent\n    /// @param _intentId The intent to query\n    /// @return status The current intent status\n    function statusOf(bytes32 _intentId) external view returns (PurchaseStatus status) {\n        PurchaseIntent storage intent = intents[_intentId];\n        if (intent.intentId == bytes32(0)) {\n            revert IntentDoesNotExist(_intentId);\n        }\n        if (_derivedExpired(intent) && intent.status == PurchaseStatus.PENDING) {\n            return PurchaseStatus.EXPIRED;\n        }\n        return intent.status;\n    }\n\n    /// @notice Checks if an intent is expired\n    /// @param _intentId The intent to check\n    /// @return expired True if the intent is expired\n    function isExpired(bytes32 _intentId) external view returns (bool expired) {\n        PurchaseIntent storage intent = intents[_intentId];\n        if (intent.intentId == bytes32(0)) {\n            revert IntentDoesNotExist(_intentId);\n        }\n        return _derivedExpired(intent) && intent.status == PurchaseStatus.PENDING;\n    }\n\n    /// @inheritdoc IGildiExchangePurchaseVault\n    function remainingUsd(bytes32 _intentId) external view override returns (uint256 remaining) {\n        PurchaseIntent storage intent = intents[_intentId];\n        if (intent.intentId == bytes32(0)) {\n            revert IntentDoesNotExist(_intentId);\n        }\n        return _remainingUsd(intent);\n    }\n\n    // -------------------- Vault Ops (liquidity) --------------------\n\n    /// @notice Adds tokens to the vault for liquidity\n    /// @param _token Token address\n    /// @param _amount Amount to add\n    function topUp(address _token, uint256 _amount) external nonReentrant {\n        if (_token == address(0)) {\n            revert ZeroAddressToken();\n        }\n        if (!supportedTokens.contains(_token)) {\n            revert TokenNotSupported(_token);\n        }\n        uint256 beforeBal = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n        uint256 afterBal = IERC20(_token).balanceOf(address(this));\n        if (afterBal - beforeBal != _amount) {\n            revert FeeOnTransferNotSupported(_token);\n        }\n        emit VaultToppedUp(_token, _amount, msg.sender);\n    }\n\n    /// @notice Withdraws tokens from the vault\n    /// @param _token Token address\n    /// @param _amount Amount to withdraw\n    /// @param _to Recipient address (address(0) defaults to msg.sender)\n    function withdraw(address _token, uint256 _amount, address _to) external onlyRole(ADMIN_ROLE) nonReentrant {\n        if (_token == address(0)) {\n            revert ZeroAddressToken();\n        }\n        address recipient = _to == address(0) ? msg.sender : _to;\n        IERC20(_token).safeTransfer(recipient, _amount);\n        emit VaultWithdrawn(_token, _amount, recipient);\n    }\n\n    /// @notice Withdraws all tokens of a type from the vault\n    /// @param _token Token address\n    /// @param _to Recipient address (address(0) defaults to msg.sender)\n    function withdrawAll(address _token, address _to) external onlyRole(ADMIN_ROLE) nonReentrant {\n        if (_token == address(0)) {\n            revert ZeroAddressToken();\n        }\n        address recipient = _to == address(0) ? msg.sender : _to;\n        uint256 amount = IERC20(_token).balanceOf(address(this));\n        if (amount == 0) {\n            return;\n        }\n\n        IERC20(_token).safeTransfer(recipient, amount);\n\n        emit VaultWithdrawn(_token, amount, recipient);\n    }\n\n    /// @notice Gets vault balance for a token\n    /// @param _token Token address\n    /// @return balance The vault balance\n    function getVaultBalance(address _token) external view returns (uint256 balance) {\n        if (_token == address(0)) {\n            revert ZeroAddressToken();\n        }\n        return IERC20(_token).balanceOf(address(this));\n    }\n\n    /// @notice Gets the oracle feed ID for a token\n    /// @param _token Token address\n    /// @return feedId The oracle feed ID\n    function getTokenFeedId(address _token) external view returns (bytes32 feedId) {\n        if (_token == address(0)) {\n            revert ZeroAddressToken();\n        }\n        return tokenFeedIds[_token];\n    }\n\n    /// @notice Checks if a token is supported for vault operations\n    /// @param _token Token address\n    /// @return supported True if token is supported\n    function isTokenSupported(address _token) external view returns (bool supported) {\n        if (_token == address(0)) {\n            revert ZeroAddressToken();\n        }\n        return supportedTokens.contains(_token);\n    }\n\n    /// @notice Gets all supported tokens\n    /// @return tokens Array of supported token addresses\n    function getSupportedTokens() external view returns (address[] memory tokens) {\n        uint256 length = supportedTokens.length();\n        tokens = new address[](length);\n        for (uint256 i = 0; i < length; i++) {\n            tokens[i] = supportedTokens.at(i);\n        }\n    }\n\n    /// @notice Checks if a token is fully configured (supported + has feed ID)\n    /// @param _token Token address\n    /// @return configured True if token is supported and has feed ID set\n    function isTokenConfigured(address _token) external view returns (bool configured) {\n        if (_token == address(0)) {\n            revert ZeroAddressToken();\n        }\n        return supportedTokens.contains(_token) && tokenFeedIds[_token] != bytes32(0);\n    }\n\n    /// @notice Checks if vault can fund a purchase with current token balances\n    /// @param _intentValueUsdCents Intent value in USD cents\n    /// @param _releaseId Release ID for purchase estimation\n    /// @param _amount Amount of tokens to purchase\n    /// @param _buyer Buyer address for estimation\n    /// @return canFund True if purchase can be funded\n    /// @return bestToken Address of the most cost-effective token (zero if can't fund)\n    /// @return estimatedCost Estimated cost in best token (zero if can't fund)\n    /// @inheritdoc IGildiExchangePurchaseVault\n    function canFundPurchase(\n        uint256 _intentValueUsdCents,\n        uint256 _releaseId,\n        uint256 _amount,\n        address _buyer\n    ) external view override returns (bool canFund, address bestToken, uint256 estimatedCost) {\n        address optimalToken = address(0);\n        uint256 lowestCostDeviation = type(uint256).max;\n        uint256 bestEstimatedCost = 0;\n\n        uint256 tokenCount = supportedTokens.length();\n        for (uint256 i = 0; i < tokenCount; i++) {\n            address candidateToken = supportedTokens.at(i);\n\n            if (_isTokenViableForIntent(candidateToken, _intentValueUsdCents, _releaseId, _amount, _buyer)) {\n                uint256 costDeviation = _calculateCostDeviation(\n                    candidateToken,\n                    _intentValueUsdCents,\n                    _releaseId,\n                    _amount,\n                    _buyer\n                );\n\n                if (costDeviation < lowestCostDeviation) {\n                    lowestCostDeviation = costDeviation;\n                    optimalToken = candidateToken;\n\n                    // Get estimated cost for this token\n                    try paymentAggregator.estimatePurchase(_releaseId, _amount, _buyer, candidateToken) returns (\n                        uint256 sourceNeeded,\n                        address,\n                        IGildiExchangeSwapAdapter.QuoteRoute memory,\n                        uint256\n                    ) {\n                        bestEstimatedCost = sourceNeeded;\n                    } catch {\n                        // If estimation fails, calculate based on price oracle\n                        bestEstimatedCost = _calculateTokenAmountWithBuffer(candidateToken, _intentValueUsdCents);\n                    }\n                }\n            }\n        }\n\n        return (optimalToken != address(0), optimalToken, bestEstimatedCost);\n    }\n\n    /// @notice Gets the list of supported tokens\n    /// @return tokens Array of supported tokens\n    function listTokens() external view returns (TokenView[] memory tokens) {\n        address[] memory allTokens = supportedTokens.values();\n        tokens = new TokenView[](allTokens.length);\n        for (uint256 i = 0; i < allTokens.length; i++) {\n            address token = allTokens[i];\n            tokens[i] = TokenView({token: token, feedId: tokenFeedIds[token], defaultToken: token == preferredToken});\n        }\n    }\n\n    // -------------------- Internal --------------------\n\n    /// @dev Selects the optimal token for intent execution based on cost analysis\n    /// @param _tokenHint Optional token preference from beneficiary\n    /// @param _intentValueUsdCents Intent value in USD cents for cost calculation\n    /// @param _releaseId Release ID for purchase estimation\n    /// @param _amount Amount of tokens to purchase\n    /// @param _buyer Buyer address for estimation\n    /// @return selectedToken The token address to use\n    function _selectToken(\n        address _tokenHint,\n        uint256 _intentValueUsdCents,\n        uint256 _releaseId,\n        uint256 _amount,\n        address _buyer\n    ) internal view returns (address selectedToken) {\n        // If hint is provided and viable, use it\n        if (\n            _tokenHint != address(0) &&\n            _isTokenViableForIntent(_tokenHint, _intentValueUsdCents, _releaseId, _amount, _buyer)\n        ) {\n            return _tokenHint;\n        }\n\n        // Prefer preferred token if configured and viable\n        if (\n            preferredToken != address(0) &&\n            _isTokenViableForIntent(preferredToken, _intentValueUsdCents, _releaseId, _amount, _buyer)\n        ) {\n            return preferredToken;\n        }\n\n        // Otherwise, find the most cost-effective option\n        address optimalToken = _findOptimalToken(_intentValueUsdCents, _releaseId, _amount, _buyer);\n        if (optimalToken == address(0)) {\n            revert NoViableTokenFound(_intentValueUsdCents);\n        }\n        return optimalToken;\n    }\n\n    /// @dev Checks if a token is viable for the intent (sufficient balance + cost analysis)\n    function _isTokenViableForIntent(\n        address _token,\n        uint256 _intentValueUsdCents,\n        uint256 _releaseId,\n        uint256 _amount,\n        address _buyer\n    ) internal view returns (bool viable) {\n        if (!supportedTokens.contains(_token)) {\n            return false;\n        }\n\n        // Calculate required amount with slippage buffer\n        uint256 requiredAmountWithBuffer = _calculateTokenAmountWithBuffer(_token, _intentValueUsdCents);\n\n        // Check vault balance\n        if (IERC20(_token).balanceOf(address(this)) < requiredAmountWithBuffer) {\n            return false;\n        }\n\n        // If we have aggregator, do cost analysis\n        if (address(paymentAggregator) != address(0)) {\n            try paymentAggregator.estimatePurchase(_releaseId, _amount, _buyer, _token) returns (\n                uint256 sourceNeeded,\n                address,\n                IGildiExchangeSwapAdapter.QuoteRoute memory,\n                uint256\n            ) {\n                return sourceNeeded <= requiredAmountWithBuffer;\n            } catch {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /// @dev Finds the most cost-effective token from all supported options\n    function _findOptimalToken(\n        uint256 _intentValueUsdCents,\n        uint256 _releaseId,\n        uint256 _amount,\n        address _buyer\n    ) internal view returns (address bestToken) {\n        uint256 tokenCount = supportedTokens.length();\n        if (tokenCount == 0) {\n            return address(0);\n        }\n\n        uint256 lowestDeviationBps = type(uint256).max;\n        address candidateToken;\n\n        for (uint256 i = 0; i < tokenCount; i++) {\n            candidateToken = supportedTokens.at(i);\n\n            if (_isTokenViableForIntent(candidateToken, _intentValueUsdCents, _releaseId, _amount, _buyer)) {\n                uint256 deviationBps = _calculateCostDeviation(\n                    candidateToken,\n                    _intentValueUsdCents,\n                    _releaseId,\n                    _amount,\n                    _buyer\n                );\n\n                if (deviationBps < lowestDeviationBps) {\n                    lowestDeviationBps = deviationBps;\n                    bestToken = candidateToken;\n                }\n            }\n        }\n\n        return bestToken;\n    }\n\n    /// @dev Calculates cost deviation for a token compared to intent value\n    function _calculateCostDeviation(\n        address _token,\n        uint256 _intentValueUsdCents,\n        uint256 _releaseId,\n        uint256 _amount,\n        address _buyer\n    ) internal view returns (uint256 deviationBps) {\n        if (address(paymentAggregator) == address(0)) {\n            return 0;\n        }\n\n        try paymentAggregator.estimatePurchase(_releaseId, _amount, _buyer, _token) returns (\n            uint256 sourceNeeded,\n            address releaseCurrency,\n            IGildiExchangeSwapAdapter.QuoteRoute memory quoteRoute,\n            uint256\n        ) {\n            // Direct payment (no swap) = 0 deviation\n            if (releaseCurrency == _token) {\n                return 0;\n            }\n\n            // Calculate intent value in token with slippage buffer\n            uint256 intentValueInTokenWithBuffer = _calculateTokenAmountWithBuffer(_token, _intentValueUsdCents);\n\n            // Get actual swap input amount from quote\n            uint256 actualSwapAmount = quoteRoute.amounts.length > 0 ? quoteRoute.amounts[0] : sourceNeeded;\n\n            // Calculate deviation in BPS\n            if (actualSwapAmount > intentValueInTokenWithBuffer) {\n                return ((actualSwapAmount - intentValueInTokenWithBuffer) * 10000) / intentValueInTokenWithBuffer;\n            } else {\n                return ((intentValueInTokenWithBuffer - actualSwapAmount) * 10000) / intentValueInTokenWithBuffer;\n            }\n        } catch {\n            return type(uint256).max; // Max penalty for estimation failure\n        }\n    }\n\n    /// @dev Calculates token amount needed including slippage buffer\n    function _calculateTokenAmountWithBuffer(\n        address _token,\n        uint256 _intentValueUsdCents\n    ) internal view returns (uint256) {\n        uint256 price18 = _getTokenPriceUsd(_token);\n\n        uint8 dec = IERC20Metadata(_token).decimals();\n\n        // base = ceil( cents * 10^dec * 1e16 / price )\n        uint256 base = Math.mulDiv(_intentValueUsdCents, (10 ** dec) * 1e16, price18, Math.Rounding.Ceil);\n\n        // apply buffer with ceil\n        return Math.mulDiv(base, 10000 + slippageAndFeeBuffer, 10000, Math.Rounding.Ceil);\n    }\n\n    /// @dev Gets current USD price for a token with validation\n    /// @param _token Token address to get price for\n    /// @return priceUsd18 Price in USD with 18 decimals\n    function _getTokenPriceUsd(address _token) internal view returns (uint256 priceUsd18) {\n        if (!supportedTokens.contains(_token)) {\n            revert TokenNotSupported(_token);\n        }\n\n        bytes32 feedId = tokenFeedIds[_token];\n        if (feedId == bytes32(0)) {\n            revert TokenFeedIdNotSet(_token);\n        }\n\n        IGildiPriceResolver.PriceData memory priceData = gildiPriceOracle.getPriceNoOlderThan(\n            feedId,\n            300 // 5 minutes max age\n        );\n\n        // Normalize price to 18 decimals\n        if (priceData.decimals == 18) {\n            return priceData.price;\n        } else if (priceData.decimals < 18) {\n            return priceData.price * (10 ** (18 - priceData.decimals));\n        } else {\n            return priceData.price / (10 ** (priceData.decimals - 18));\n        }\n    }\n\n    /// @dev Computes remaining USD cents available for an intent.\n    function _remainingUsd(PurchaseIntent memory _intent) internal pure returns (uint256) {\n        return _intent.valueUsd - _intent.settledUsd;\n    }\n\n    /// @dev Returns true if the current timestamp is past the intent's expiry.\n    function _derivedExpired(PurchaseIntent memory _intent) internal view returns (bool) {\n        return block.timestamp > _intent.expiresAt;\n    }\n\n    /// @dev Converts USD cents to 18-decimal fixed-point amount.\n    function _valueUsdCentsToE18(uint256 _valueUsdCents) internal pure returns (uint256) {\n        return (_valueUsdCents * 1e18) / 1e2;\n    }\n\n    // -------------------- Fallbacks --------------------\n    /// @dev Rejects direct ETH transfers to force proper vault management\n    receive() external payable {\n        revert EthNotAcceptedHere();\n    }\n\n    /// @dev Rejects calls to non-existent functions\n    fallback() external payable {\n        revert EthNotAcceptedHere();\n    }\n}\n"
    },
    "contracts/mock/MockGildiExchangeUpgrade.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport '../marketplace/exchange/GildiExchange.sol';\nimport './MockUpgrade.sol';\n\ncontract MockGildiExchangeUpgrade is GildiExchange, MockUpgrade {}\n"
    },
    "contracts/mock/MockGildiWalletLogicUpgrade.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport {GildiWalletLogic} from '../wallet/GildiWalletLogic.sol';\nimport {MockUpgrade} from './MockUpgrade.sol';\n\ncontract MockGildiWalletLogicUpgrade is GildiWalletLogic, MockUpgrade {}\n"
    },
    "contracts/mock/MockUpgrade.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nabstract contract MockUpgrade {\n    bool private newFunctionValue;\n\n    /// @dev This function is used to test the upgradeability of the contract.\n    /// @return True if the function is called, false otherwise.\n    function newFunctionGetter() external view returns (bool) {\n        return newFunctionValue;\n    }\n\n    /// @dev This function is used to test the upgradeability of the contract.\n    /// @param _newFunctionValue The new value for the function.\n    function newFunctionSetter(bool _newFunctionValue) external {\n        newFunctionValue = _newFunctionValue;\n    }\n\n    /// @dev Returns true to indicate this is an upgraded contract\n    /// @return Boolean indicating upgrade status\n    function isUpgraded() public pure returns (bool) {\n        return true;\n    }\n}\n"
    },
    "contracts/royalties/RoyaltyClaimStorage.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport '../storage/AddressKeyValueStore.sol';\nimport './RoyaltyDistributionSharedStructs.sol';\n\n/// @title RoyaltyClaimStorage\n/// @notice A seperate contract to store the royalty claims.\n/// @dev Deployed by the Royalty Distributor. Might be switched to an off-chain solution in the future.\n/// @custom:security-contact security@gildi.io\n/// @author Patrick Fischer (Pathin) > https://pathin.me\ncontract RoyaltyClaimStorage is AddressKeyValueStore {\n    using RoyaltyDistributionSharedStructs for *;\n\n    constructor(uint256 distributionId) AddressKeyValueStore(_msgSender()) {\n        DISTRIBUTION_ID = distributionId;\n    }\n\n    /// @notice The ID of the Distribution.\n    uint256 immutable DISTRIBUTION_ID;\n\n    event ClaimDeleted(uint256 indexed releaseId, address indexed user);\n    event ClaimPushed(\n        uint256 indexed releaseId,\n        address indexed user,\n        address[] assets,\n        uint256[] values,\n        uint256 timestamp\n    );\n\n    /// @notice Sets a Claim for a user.\n    /// @param _user The user address.\n    /// @param _claim The new claim entry.\n    function setClaim(address _user, RoyaltyDistributionSharedStructs.Claim calldata _claim) external {\n        // Check if the user already has claims\n        set(_user, claimToBytes(_claim));\n\n        address[] memory assets = new address[](_claim.assetValues.length);\n        uint256[] memory values = new uint256[](_claim.assetValues.length);\n        for (uint256 i = 0; i < _claim.assetValues.length; i++) {\n            assets[i] = _claim.assetValues[i].assetAddress;\n            values[i] = _claim.assetValues[i].amount;\n        }\n\n        emit ClaimPushed(DISTRIBUTION_ID, _user, assets, values, block.timestamp);\n    }\n\n    /// @notice Checks if a user has a claim.\n    /// @param _user The user address.\n    /// @return Whether the user has a claim or not.\n    function hasClaim(address _user) external view returns (bool) {\n        return containsKey(_user);\n    }\n\n    /// @notice Fetch the claim of a user.\n    /// @param _user The user address.\n    /// @return The claim of the user.\n    function fetchClaim(address _user) external view returns (RoyaltyDistributionSharedStructs.Claim memory) {\n        bytes memory claimData = get(_user);\n        return bytesToClaim(claimData);\n    }\n\n    /// @notice Fetch all claims.\n    /// @return All claims.\n    function fetchAllClaims() external view returns (RoyaltyDistributionSharedStructs.Claim[] memory) {\n        RoyaltyDistributionSharedStructs.Claim[] memory claims = new RoyaltyDistributionSharedStructs.Claim[](\n            getNumberOfKeys()\n        );\n\n        bytes[] memory allData = getAll();\n        for (uint256 i = 0; i < allData.length; i++) {\n            claims[i] = bytesToClaim(allData[i]);\n        }\n\n        return claims;\n    }\n\n    /// @notice Fetch the users.\n    function fetchUsers() external view returns (address[] memory) {\n        return getAllKeys();\n    }\n\n    function claimToBytes(RoyaltyDistributionSharedStructs.Claim memory _claim) private pure returns (bytes memory) {\n        return abi.encode(_claim);\n    }\n\n    function bytesToClaim(bytes memory _data) private pure returns (RoyaltyDistributionSharedStructs.Claim memory) {\n        RoyaltyDistributionSharedStructs.Claim memory res = abi.decode(_data, (RoyaltyDistributionSharedStructs.Claim));\n        return res;\n    }\n}\n"
    },
    "contracts/royalties/RoyaltyDistributionSharedStructs.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\n/// @title RoyaltyDistributionSharedStructs\n/// @notice Library for shared structs used in the Royalty Distribution.\n/// @custom:security-contact security@gildi.io\n/// @author Patrick Fischer (Pathin) > https://pathin.me\nlibrary RoyaltyDistributionSharedStructs {\n    /// @notice A struct representing an asset value.\n    struct AssetValue {\n        /// @notice The address of the asset.\n        address assetAddress;\n        /// @notice The amount of the asset.\n        uint256 amount;\n    }\n\n    /// @notice A struct representing a royalty claim.\n    struct Claim {\n        /// @notice The ID of the distribution.\n        uint256 distributionId;\n        /// @notice The address of the user.\n        address user;\n        /// @notice The asset values.\n        AssetValue[] assetValues;\n        /// @notice The shares of the user the values are based on.\n        uint256 userShares;\n        /// @notice The date and time when the claim was created.\n        uint256 createdAt;\n        /// @notice The claim was claimed (paid out).\n        bool claimed;\n    }\n}\n"
    },
    "contracts/royalties/RoyaltyDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\n\npragma solidity 0.8.24;\n\nimport '../interfaces/manager/IGildiManager.sol';\nimport './RoyaltyDistributionSharedStructs.sol';\nimport './RoyaltyClaimStorage.sol';\n\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol';\nimport '@openzeppelin/contracts/interfaces/IERC165.sol';\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\nimport '@openzeppelin/contracts/utils/math/Math.sol';\n\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\n/// @title RoyaltyDistributor\n/// @notice A contract to distribute royalties in different currencies to users.\n/// @custom:security-contact security@gildi.io\n/// @author Patrick Fischer (Pathin) > https://pathin.me\ncontract RoyaltyDistributor is Initializable, AccessControlUpgradeable, ReentrancyGuardUpgradeable {\n    using SafeERC20 for IERC20;\n\n    bytes32 public constant ROYALTY_MANAGER_ROLE = keccak256('ROYALTY_MANAGER_ROLE');\n    bytes32 public constant ADMIN_ROLE = keccak256('ADMIN_ROLE');\n\n    /// @notice The Gildi Manager.\n    IGildiManager private gildiManager;\n    /// @notice The current distribution ID.\n    uint256 private currentDistributionId;\n\n    // All distributions and distributions to release mappings.\n    mapping(uint256 => Distribution) private distributions;\n    mapping(uint256 => uint256[]) private distributionsByReleaseId;\n    uint256[] private distributionIds;\n    uint256[] private releaseIds;\n\n    // Allowed assets we can generate distributions for.\n    mapping(address => bool) private allowedAssets;\n    address[] private allowedAssetsArray;\n\n    /// Storage where the claims are stored on a release ID basis, deployed for each distribution by the Royal Distributor smart contract.\n    mapping(uint256 => RoyaltyClaimStorage) public royaltyClaimStorages;\n\n    // Tracking of distribution claims.\n    mapping(address => uint256[]) private userClaimDistributionIds;\n    mapping(uint256 => address[]) private distributionClaimUsers;\n\n    // Tracking of distribution shares. Only used temporarily for the calculation of the claims.\n    mapping(uint256 => DistributionShares) private distributionShares;\n\n    struct Distribution {\n        /// @notice An internal ID for the distribution.\n        uint256 distributionId;\n        /// @notice The ID of the release.\n        uint256 rwaReleaseId;\n        /// @notice The start of the time period for the distribution.\n        uint256 start;\n        /// @notice The end of the time period for the distribution.\n        uint256 end;\n        /// @notice The date and time until the distribution must be claimed. = 0 forever\n        uint256 claimableUntil;\n        /// @notice The royalty amounts.\n        RoyaltyDistributionSharedStructs.AssetValue[] royaltiesToPayout;\n        /// @notice From ownership mapping calculated amounts.\n        RoyaltyDistributionSharedStructs.AssetValue[] calculatedRoyaltiesToPayout;\n        /// @notice The amounts distributed.\n        RoyaltyDistributionSharedStructs.AssetValue[] amountsDistributed;\n        /// @notice The total number of shares.\n        uint256 totalShares;\n        /// @notice Whether or not all shares are assigned. (needs to be true to init claims)\n        bool allSharesAssigned;\n        /// @notice Whether or not all claims are assigned. (needs to be true to prime the distribution)\n        bool allClaimsAssigned;\n        /// @notice Whether or not the distribution is primed. (needs to be true to activate the distribution)\n        bool primed;\n        /// @notice Whether or not the distribution is active.\n        bool active;\n        /// @notice Whether or not the distribution is cancelled.\n        bool cancelled;\n        /// @notice The date and time when the distribution was created.\n        uint256 createdAt;\n    }\n\n    event DistributionCreated(\n        uint256 indexed distributionId,\n        uint256 indexed rwaReleaseId,\n        uint256 start,\n        uint256 end,\n        uint256 claimUntil,\n        uint256 createdAt\n    );\n\n    struct DistributionShares {\n        uint256 totalNumberOfShares;\n        IGildiManager.UserShare[] userShares;\n        uint256 sharesReportNextCursor;\n        uint256 userSharesNextIndex;\n    }\n\n    event AssetAllowed(address indexed assetAddress, bool allowed);\n    event AssetTopUp(address indexed assetAddress, uint256 amount);\n    event AssetEmergencyWithdraw(address indexed assetAddress, address indexed to, uint256 amount);\n    event ClaimPeriodSet(uint256 indexed distributionId, uint256 claimUntil);\n    event DistributionSharesInitialised(uint256 indexed distributionId, uint256 batchSize, bool hasMore);\n    event ClaimAssigned(uint256 indexed distributionId, address indexed user, address[] tokens, uint256[] amounts);\n    event DistributionClaimsInitialised(uint256 indexed distributionId, uint256 batchSize, bool allClaimsAssigned);\n    event DistributionPrimed(uint256 indexed distributionId);\n    event DistributionActivated(uint256 indexed distributionId);\n    event DistributionClaimed(\n        uint256 indexed distributionId,\n        address indexed user,\n        address[] tokens,\n        uint256[] amounts\n    );\n    event AssetTransfer(address indexed assetAddress, address indexed from, address indexed to, uint256 amount);\n    event DistributionCancelled(uint256 indexed distributionId);\n\n    error DistributionDoesNotExist();\n    error ReleaseDoesNotExist();\n    error ReleaseSharesNotFullyAssigned();\n    error ClaimPeriodOver();\n    error AssetNotAllowed(address assetAddress);\n    error InvalidAssetAmount(address assetAddress);\n    error DistributionAssetsNotUnique(address assetAddress);\n    error SharesAlreadyAssigned();\n    error SharesNotAssigned();\n    error DistributionIsCancelled();\n    error ClaimsAlreadyAssigned();\n    error ClaimsNotAssigned();\n    error InsufficientFundsSent();\n    error DistributionAlreadyPrimed();\n    error InsufficientMessageValue();\n    error DistributionNotPrimed();\n    error DistributionAlreadyActive();\n    error DistributionIsActive();\n    error DistributionNotActive();\n    error ClaimDoesNotExist();\n    error ClaimAlreadyClaimed();\n    error DistributionNotClaimable();\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Initializes the contract.\n    /// @param _defaultAdmin The default admin.\n    /// @param _initialAdmin The initial admin.\n    /// @param _initialRoyaltyManager The initial royalty manager.\n    /// @param _gildiManager The Gildi Manager.\n    function initialize(\n        address _defaultAdmin,\n        address _initialAdmin,\n        address _initialRoyaltyManager,\n        IGildiManager _gildiManager\n    ) public initializer {\n        __AccessControl_init();\n        __ReentrancyGuard_init();\n\n        _grantRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\n        if (_initialAdmin != address(0)) {\n            _grantRole(ADMIN_ROLE, _initialAdmin);\n        }\n        if (_initialRoyaltyManager != address(0)) {\n            _grantRole(ROYALTY_MANAGER_ROLE, _initialRoyaltyManager);\n        }\n\n        gildiManager = _gildiManager;\n        currentDistributionId = 1;\n    }\n\n    function isUserClaimable(uint256 _distributionId, address _user) public view returns (bool) {\n        if (!distributionExists(_distributionId)) {\n            return false;\n        }\n        Distribution storage distribution = distributions[_distributionId];\n\n        if (!distribution.active) {\n            return false;\n        }\n\n        if (distribution.cancelled) {\n            return false;\n        }\n\n        if (distribution.claimableUntil != 0 && block.timestamp > distribution.claimableUntil) {\n            return false;\n        }\n\n        RoyaltyClaimStorage royaltyClaimStorage = royaltyClaimStorages[_distributionId];\n        RoyaltyDistributionSharedStructs.Claim memory userClaim;\n        if (royaltyClaimStorage.hasClaim(_user)) {\n            userClaim = royaltyClaimStorage.fetchClaim(_user);\n        }\n\n        if (userClaim.createdAt == 0) {\n            return false;\n        }\n\n        if (userClaim.claimed) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function distributionExists(uint256 _distributionId) public view returns (bool) {\n        return distributions[_distributionId].createdAt > 0;\n    }\n\n    function isAllowedAsset(address _assetAddress) public view returns (bool) {\n        return allowedAssets[_assetAddress];\n    }\n\n    /// @notice Creates a new distribution.\n    /// @param _rwaReleaseId The ID of the RWA release.\n    /// @param _start The start of the time period.\n    /// @param _end The end of the time period.\n    /// @param _claimableUntil The date and time until the distribution must be claimed.\n    /// @param _distributionAmounts The distribution amounts.\n    function createDistribution(\n        uint256 _rwaReleaseId,\n        uint256 _start,\n        uint256 _end,\n        uint256 _claimableUntil,\n        RoyaltyDistributionSharedStructs.AssetValue[] calldata _distributionAmounts\n    ) external onlyRole(ROYALTY_MANAGER_ROLE) {\n        if (!gildiManager.releaseExists(_rwaReleaseId)) {\n            revert ReleaseDoesNotExist();\n        }\n        if (_claimableUntil != 0 && _claimableUntil < block.timestamp) {\n            revert ClaimPeriodOver();\n        }\n        for (uint256 i = 0; i < _distributionAmounts.length; i++) {\n            if (!isAllowedAsset(_distributionAmounts[i].assetAddress)) {\n                revert AssetNotAllowed(_distributionAmounts[i].assetAddress);\n            }\n\n            if (_distributionAmounts[i].amount == 0) {\n                revert InvalidAssetAmount(_distributionAmounts[i].assetAddress);\n            }\n        }\n\n        for (uint256 i = 0; i < _distributionAmounts.length; i++) {\n            for (uint256 j = i + 1; j < _distributionAmounts.length; j++) {\n                if (_distributionAmounts[i].assetAddress == _distributionAmounts[j].assetAddress) {\n                    revert DistributionAssetsNotUnique(_distributionAmounts[i].assetAddress);\n                }\n            }\n        }\n\n        Distribution storage newDistribution = distributions[currentDistributionId];\n        newDistribution.distributionId = currentDistributionId++;\n        newDistribution.rwaReleaseId = _rwaReleaseId;\n        newDistribution.start = _start;\n        newDistribution.end = _end;\n        newDistribution.claimableUntil = _claimableUntil;\n        newDistribution.royaltiesToPayout = _distributionAmounts;\n        newDistribution.createdAt = block.timestamp;\n        newDistribution.calculatedRoyaltiesToPayout = new RoyaltyDistributionSharedStructs.AssetValue[](\n            _distributionAmounts.length\n        );\n        newDistribution.amountsDistributed = new RoyaltyDistributionSharedStructs.AssetValue[](\n            _distributionAmounts.length\n        );\n\n        for (uint256 i = 0; i < _distributionAmounts.length; i++) {\n            newDistribution.calculatedRoyaltiesToPayout[i] = RoyaltyDistributionSharedStructs.AssetValue(\n                _distributionAmounts[i].assetAddress,\n                0\n            );\n            newDistribution.amountsDistributed[i] = RoyaltyDistributionSharedStructs.AssetValue(\n                _distributionAmounts[i].assetAddress,\n                0\n            );\n        }\n\n        royaltyClaimStorages[newDistribution.distributionId] = new RoyaltyClaimStorage(newDistribution.distributionId);\n\n        if (distributionsByReleaseId[_rwaReleaseId].length == 0) {\n            releaseIds.push(_rwaReleaseId);\n        }\n        distributionsByReleaseId[_rwaReleaseId].push(newDistribution.distributionId);\n        distributionIds.push(newDistribution.distributionId);\n\n        emit DistributionCreated(\n            newDistribution.distributionId,\n            newDistribution.rwaReleaseId,\n            newDistribution.start,\n            newDistribution.end,\n            newDistribution.claimableUntil,\n            newDistribution.createdAt\n        );\n    }\n\n    /// @notice Gets the shares report batched and assigns the total number of shares to the distribution struct. Also assigns the user shares to a temporary storage.\n    /// @param distributionId The distribution ID.\n    /// @param batchSize The batch size.\n    function initDistributionSharesBatched(\n        uint256 distributionId,\n        uint256 batchSize\n    ) external onlyRole(ROYALTY_MANAGER_ROLE) {\n        if (!distributionExists(distributionId)) {\n            revert DistributionDoesNotExist();\n        }\n        Distribution storage distribution = distributions[distributionId];\n\n        if (!gildiManager.isFullyAssigned(distribution.rwaReleaseId)) {\n            revert ReleaseSharesNotFullyAssigned();\n        }\n\n        if (distribution.cancelled) {\n            revert DistributionIsCancelled();\n        }\n\n        if (distribution.allSharesAssigned) {\n            revert SharesAlreadyAssigned();\n        }\n\n        DistributionShares storage distributionSharesTracking = distributionShares[distributionId];\n\n        IGildiManager.SharesReport memory sharesReport = gildiManager.fetchSharesInPeriod(\n            distribution.rwaReleaseId,\n            distribution.start,\n            distribution.end,\n            distributionSharesTracking.sharesReportNextCursor,\n            batchSize\n        );\n\n        distributionSharesTracking.sharesReportNextCursor = sharesReport.nextCursor;\n        for (uint256 i = 0; i < sharesReport.userShares.length; i++) {\n            distributionSharesTracking.userShares.push(sharesReport.userShares[i]);\n        }\n\n        if (!sharesReport.hasMore) {\n            distribution.allSharesAssigned = true;\n        }\n        distributionSharesTracking.totalNumberOfShares += sharesReport.totalNumberOfShares;\n\n        emit DistributionSharesInitialised(distributionId, batchSize, sharesReport.hasMore);\n    }\n\n    /// @notice Calculates the claims and value needed for the distribution batched.\n    /// @param distributionId The distribution ID.\n    /// @param batchSize The batch size.\n    function initClaimsBatched(uint256 distributionId, uint256 batchSize) external onlyRole(ROYALTY_MANAGER_ROLE) {\n        if (!distributionExists(distributionId)) {}\n        Distribution storage distribution = distributions[distributionId];\n\n        if (distribution.cancelled) {\n            revert DistributionIsCancelled();\n        }\n\n        if (!distribution.allSharesAssigned) {\n            revert SharesNotAssigned();\n        }\n\n        if (distribution.allClaimsAssigned) {\n            revert ClaimsAlreadyAssigned();\n        }\n\n        DistributionShares storage distributionSharesTracking = distributionShares[distributionId];\n        RoyaltyClaimStorage royaltyClaimStorage = royaltyClaimStorages[distributionId];\n\n        uint256 count = 0;\n        for (\n            uint256 i = distributionSharesTracking.userSharesNextIndex;\n            i < distributionSharesTracking.userShares.length;\n            i++\n        ) {\n            if (count >= batchSize) {\n                break;\n            }\n\n            // Calculate the claims.\n            IGildiManager.UserShare memory userShare = distributionSharesTracking.userShares[i];\n            address user = userShare.user;\n            uint256 shareAmount = userShare.shares;\n\n            RoyaltyDistributionSharedStructs.Claim memory userClaim = RoyaltyDistributionSharedStructs.Claim(\n                distributionId,\n                user,\n                new RoyaltyDistributionSharedStructs.AssetValue[](distribution.royaltiesToPayout.length),\n                shareAmount,\n                block.timestamp,\n                false\n            );\n\n            address[] memory tokens = new address[](distribution.royaltiesToPayout.length);\n            uint256[] memory amounts = new uint256[](distribution.royaltiesToPayout.length);\n\n            for (uint256 j = 0; j < distribution.royaltiesToPayout.length; j++) {\n                uint256 amount = (distribution.royaltiesToPayout[j].amount * shareAmount) /\n                    distributionSharesTracking.totalNumberOfShares;\n                userClaim.assetValues[j] = RoyaltyDistributionSharedStructs.AssetValue(\n                    distribution.royaltiesToPayout[j].assetAddress,\n                    amount\n                );\n\n                distribution.calculatedRoyaltiesToPayout[j].amount += amount;\n\n                tokens[j] = distribution.royaltiesToPayout[j].assetAddress;\n                amounts[j] = amount;\n            }\n\n            royaltyClaimStorage.setClaim(user, userClaim);\n            userClaimDistributionIds[user].push(distributionId);\n            distributionClaimUsers[distributionId].push(user);\n\n            count++;\n            distributionSharesTracking.userSharesNextIndex++;\n\n            emit ClaimAssigned(distributionId, user, tokens, amounts);\n        }\n\n        if (distributionSharesTracking.userSharesNextIndex >= distributionSharesTracking.userShares.length) {\n            distribution.allClaimsAssigned = true;\n            distribution.totalShares = distributionSharesTracking.totalNumberOfShares;\n            delete distributionShares[distributionId];\n        }\n\n        emit DistributionClaimsInitialised(distributionId, batchSize, distribution.allClaimsAssigned);\n    }\n\n    function primeDistribution(uint256 _distributionId, address _fundsSource) external onlyRole(ROYALTY_MANAGER_ROLE) {\n        if (!distributionExists(_distributionId)) {\n            revert DistributionDoesNotExist();\n        }\n\n        if (_fundsSource == address(0)) {\n            _fundsSource = _msgSender();\n        }\n\n        Distribution storage distribution = distributions[_distributionId];\n\n        if (distribution.cancelled) {\n            revert DistributionIsCancelled();\n        }\n\n        if (!distribution.allClaimsAssigned) {\n            revert ClaimsNotAssigned();\n        }\n\n        if (distribution.primed) {\n            revert DistributionAlreadyPrimed();\n        }\n\n        // transfer funds to the contract\n        for (uint256 i = 0; i < distribution.calculatedRoyaltiesToPayout.length; i++) {\n            RoyaltyDistributionSharedStructs.AssetValue memory totalAmount = distribution.calculatedRoyaltiesToPayout[\n                i\n            ];\n\n            _transferAsset(totalAmount.assetAddress, _fundsSource, address(this), totalAmount.amount);\n        }\n\n        distribution.primed = true;\n        emit DistributionPrimed(_distributionId);\n    }\n\n    function activateDistribution(uint256 _distributionId) external onlyRole(ROYALTY_MANAGER_ROLE) {\n        if (!distributionExists(_distributionId)) {\n            revert DistributionDoesNotExist();\n        }\n        Distribution storage distribution = distributions[_distributionId];\n\n        if (distribution.cancelled) {\n            revert DistributionIsCancelled();\n        }\n\n        if (!distribution.primed) {\n            revert DistributionNotPrimed();\n        }\n\n        if (distribution.active) {\n            revert DistributionAlreadyActive();\n        }\n\n        distribution.active = true;\n\n        emit DistributionActivated(_distributionId);\n    }\n\n    function cancelDistribution(\n        uint256 _distributionId,\n        address _unclaimedAmountReceiver\n    ) external onlyRole(ADMIN_ROLE) {\n        if (_unclaimedAmountReceiver == address(0)) {\n            _unclaimedAmountReceiver = _msgSender();\n        }\n        _cancelAndWithdrawDistribution(_distributionId, _unclaimedAmountReceiver);\n    }\n\n    function claim(uint256 _distributionId) external nonReentrant {\n        if (!isUserClaimable(_distributionId, _msgSender())) {\n            revert DistributionNotClaimable();\n        }\n\n        _claimDistribution(_msgSender(), _distributionId);\n    }\n\n    function claimAllByReleaseId(uint256 _rwaReleaseId) external nonReentrant {\n        for (uint256 i = 0; i < distributionsByReleaseId[_rwaReleaseId].length; i++) {\n            uint256 distributionId = distributionsByReleaseId[_rwaReleaseId][i];\n            if (isUserClaimable(distributionId, _msgSender())) {\n                _claimDistribution(_msgSender(), distributionId);\n            }\n        }\n    }\n\n    function claimAll() external nonReentrant {\n        for (uint256 i = 0; i < userClaimDistributionIds[_msgSender()].length; i++) {\n            uint256 distributionId = userClaimDistributionIds[_msgSender()][i];\n            if (isUserClaimable(distributionId, _msgSender())) {\n                _claimDistribution(_msgSender(), distributionId);\n            }\n        }\n    }\n\n    function withdrawAsset(address _assetAddress, address _to, uint256 _amount) external onlyRole(ADMIN_ROLE) {\n        _transferAsset(_assetAddress, address(this), _to, _amount);\n\n        emit AssetEmergencyWithdraw(_assetAddress, _to, _amount);\n    }\n\n    function topUpAsset(address _assetAddress, uint256 _amount) external payable onlyRole(ADMIN_ROLE) {\n        _transferAsset(_assetAddress, _msgSender(), address(this), _amount);\n\n        emit AssetTopUp(_assetAddress, _amount);\n    }\n\n    function fetchDistributionById(uint256 _distributionId) external view returns (Distribution memory) {\n        if (!distributionExists(_distributionId)) {\n            revert DistributionDoesNotExist();\n        }\n        return distributions[_distributionId];\n    }\n\n    function fetchDistributionClaims(\n        uint256 _distributionId\n    ) external view returns (RoyaltyDistributionSharedStructs.Claim[] memory) {\n        if (!distributionExists(_distributionId)) {\n            revert DistributionDoesNotExist();\n        }\n        return royaltyClaimStorages[_distributionId].fetchAllClaims();\n    }\n\n    function fetchUserClaimsByReleaseId(\n        uint256 _rwaReleaseId,\n        address _userId\n    ) external view returns (RoyaltyDistributionSharedStructs.Claim[] memory) {\n        RoyaltyDistributionSharedStructs.Claim[] memory tempClaims = new RoyaltyDistributionSharedStructs.Claim[](\n            distributionsByReleaseId[_rwaReleaseId].length\n        );\n        uint256 count = 0;\n        for (uint256 i = 0; i < distributionsByReleaseId[_rwaReleaseId].length; i++) {\n            uint256 distributionId = distributionsByReleaseId[_rwaReleaseId][i];\n            RoyaltyClaimStorage royaltyClaimStorage = royaltyClaimStorages[distributionId];\n\n            RoyaltyDistributionSharedStructs.Claim memory userClaim;\n            if (royaltyClaimStorage.hasClaim(_userId)) {\n                userClaim = royaltyClaimStorage.fetchClaim(_userId);\n            }\n            if (userClaim.createdAt > 0) {\n                tempClaims[count++] = userClaim;\n            }\n        }\n\n        RoyaltyDistributionSharedStructs.Claim[] memory res = new RoyaltyDistributionSharedStructs.Claim[](count);\n        for (uint256 i = 0; i < count; i++) {\n            res[i] = tempClaims[i];\n        }\n\n        return res;\n    }\n\n    function fetchDistributionsByReleaseId(uint256 _rwaReleaseId) external view returns (Distribution[] memory) {\n        Distribution[] memory res = new Distribution[](distributionsByReleaseId[_rwaReleaseId].length);\n        for (uint256 i = 0; i < distributionsByReleaseId[_rwaReleaseId].length; i++) {\n            res[i] = distributions[distributionsByReleaseId[_rwaReleaseId][i]];\n        }\n        return res;\n    }\n\n    function fetchReleaseIdByDistributionId(uint256 _distributionId) external view returns (uint256) {\n        if (!distributionExists(_distributionId)) {\n            revert DistributionDoesNotExist();\n        }\n        return distributions[_distributionId].rwaReleaseId;\n    }\n\n    function fetchAllowedAssets() external view returns (address[] memory) {\n        return allowedAssetsArray;\n    }\n\n    function setAssetAllowed(address _assetAddress, bool _allowed) external onlyRole(ADMIN_ROLE) {\n        if (_assetAddress == address(0)) {\n            revert AssetNotAllowed(_assetAddress);\n        }\n\n        allowedAssets[_assetAddress] = _allowed;\n        if (_allowed) {\n            allowedAssetsArray.push(_assetAddress);\n        } else {\n            for (uint256 i = 0; i < allowedAssetsArray.length; i++) {\n                if (allowedAssetsArray[i] == _assetAddress) {\n                    allowedAssetsArray[i] = allowedAssetsArray[allowedAssetsArray.length - 1];\n                    allowedAssetsArray.pop();\n                    break;\n                }\n            }\n        }\n\n        emit AssetAllowed(_assetAddress, _allowed);\n    }\n\n    function _cancelAndWithdrawAllDistributionsOfRelease(\n        uint256 _rwaReleaseId,\n        address _unclaimedAmountReceiver\n    ) private {\n        uint256[] memory distributionIdsCopy = distributionsByReleaseId[_rwaReleaseId];\n        for (uint256 i = 0; i < distributionIdsCopy.length; i++) {\n            _cancelAndWithdrawDistribution(distributionIdsCopy[i], _unclaimedAmountReceiver);\n        }\n    }\n\n    function _cancelAndWithdrawDistribution(uint256 _distributionId, address _unclaimedAmountReceiver) private {\n        if (!distributionExists(_distributionId)) {\n            revert DistributionDoesNotExist();\n        }\n        Distribution storage distribution = distributions[_distributionId];\n\n        if (distribution.active && block.timestamp < distribution.end) {\n            revert DistributionIsActive();\n        }\n\n        if (distribution.cancelled) {\n            revert DistributionIsCancelled();\n        }\n\n        distribution.active = false;\n        distribution.cancelled = true;\n\n        if (distribution.primed) {\n            for (uint256 i = 0; i < distribution.calculatedRoyaltiesToPayout.length; i++) {\n                address assetAddress = distribution.calculatedRoyaltiesToPayout[i].assetAddress;\n                uint256 unclaimedAmount = distribution.calculatedRoyaltiesToPayout[i].amount -\n                    distribution.amountsDistributed[i].amount;\n\n                _transferAsset(assetAddress, address(this), _unclaimedAmountReceiver, unclaimedAmount);\n            }\n        }\n\n        delete distributionShares[_distributionId];\n\n        for (uint256 i = 0; i < distributionClaimUsers[_distributionId].length; i++) {\n            address user = distributionClaimUsers[_distributionId][i];\n            for (uint256 j = 0; j < userClaimDistributionIds[user].length; j++) {\n                if (userClaimDistributionIds[user][j] == _distributionId) {\n                    userClaimDistributionIds[user][j] = userClaimDistributionIds[user][\n                        userClaimDistributionIds[user].length - 1\n                    ];\n                    userClaimDistributionIds[user].pop();\n                    break;\n                }\n            }\n        }\n\n        delete distributionClaimUsers[_distributionId];\n\n        emit DistributionCancelled(_distributionId);\n    }\n\n    function _transferAsset(address _assetAddress, address _from, address _to, uint256 _amount) private {\n        if (_amount == 0) {\n            return;\n        }\n\n        IERC20 asset = IERC20(_assetAddress);\n        if (_from == address(this)) {\n            asset.safeTransfer(_to, _amount);\n        } else {\n            asset.safeTransferFrom(_from, _to, _amount);\n        }\n\n        emit AssetTransfer(_assetAddress, _from, _to, _amount);\n    }\n\n    function _claimDistribution(address _user, uint256 _distributionId) private {\n        if (!isUserClaimable(_distributionId, _user)) {\n            return;\n        }\n\n        RoyaltyClaimStorage royaltyClaimStorage = royaltyClaimStorages[_distributionId];\n        RoyaltyDistributionSharedStructs.Claim memory userClaim = royaltyClaimStorage.fetchClaim(_user);\n\n        Distribution storage distribution = distributions[_distributionId];\n\n        address[] memory assetAddresses = new address[](userClaim.assetValues.length);\n        uint256[] memory amounts = new uint256[](userClaim.assetValues.length);\n        for (uint256 i = 0; i < userClaim.assetValues.length; i++) {\n            RoyaltyDistributionSharedStructs.AssetValue memory assetValue = userClaim.assetValues[i];\n            if (assetValue.amount > 0) {\n                _transferAsset(assetValue.assetAddress, address(this), _user, assetValue.amount);\n            }\n\n            distribution.amountsDistributed[i].amount += assetValue.amount;\n\n            assetAddresses[i] = assetValue.assetAddress;\n            amounts[i] = assetValue.amount;\n        }\n\n        userClaim.claimed = true;\n        royaltyClaimStorage.setClaim(_user, userClaim);\n\n        emit DistributionClaimed(_distributionId, _user, assetAddresses, amounts);\n    }\n}\n"
    },
    "contracts/storage/AddressKeyValueStore.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport './base/KeyValueStore.sol';\n\n/// @title Address key value store contract.\n/// @notice This contract allows an owner to store, retrieve, and delete arbitrary data by an address key.\n/// @custom:security-contact security@gildi.io\n/// @author Patrick Fischer (Pathin) > https://pathin.me\ncontract AddressKeyValueStore is KeyValueStore {\n    constructor(address _owner) KeyValueStore(_owner) {}\n\n    /// @notice Gets the data stored against the given key.\n    /// @param _key The key to get the data for.\n    /// @return The data stored against the given key.\n    function get(address _key) internal view returns (bytes memory) {\n        return _get(addressToBytes32(_key));\n    }\n\n    /// notice Gets the key at the given index.\n    /// @param _index The index of the key to get.\n    /// @return The key at the given index.\n    function getKeyAtIndex(uint256 _index) internal view returns (address) {\n        return bytes32ToAddress(_getKeyAtIndex(_index));\n    }\n\n    /// @notice Gets all the data stored in the store.\n    /// @return All the data stored in the store.\n    function getAll() internal view returns (bytes[] memory) {\n        return _getAll();\n    }\n\n    /// @notice Gets all the keys used in the store.\n    /// @return All the keys used in the store.\n    function getAllKeys() internal view returns (address[] memory) {\n        bytes32[] memory keys = _getAllKeys();\n        address[] memory addressKeys = new address[](keys.length);\n        for (uint256 i = 0; i < keys.length; i++) {\n            addressKeys[i] = bytes32ToAddress(keys[i]);\n        }\n        return addressKeys;\n    }\n\n    /// @notice Gets the number of keys used in the store.\n    /// @return The number of keys used in the store.\n    function getNumberOfKeys() internal view returns (uint256) {\n        return _getNumberOfKeys();\n    }\n\n    /// @notice Checks if the given key exists in the store.\n    /// @param _key The key to check for existence.\n    function containsKey(address _key) internal view returns (bool) {\n        return _containsKey(addressToBytes32(_key));\n    }\n\n    /// @notice Sets the given value against the given key.\n    function set(address _key, bytes memory _value) internal {\n        _set(addressToBytes32(_key), _value);\n    }\n\n    /// @notice Deletes the data stored against the given key.\n    function del(address _key) internal {\n        _del(addressToBytes32(_key));\n    }\n\n    /// @inheritdoc KeyValueStore\n    function _initialize() internal virtual override initializeOnlyOnce {}\n\n    function bytes32ToAddress(bytes32 byteData) private pure returns (address) {\n        return address(uint160(uint256(byteData)));\n    }\n\n    function addressToBytes32(address addr) private pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n}\n"
    },
    "contracts/storage/base/KeyValueStore.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\n\n/// @title Store base contract.\n/// @notice This contract allows an owner to store, retrieve, and delete arbitrary data by an arbitrary key.\n/// @custom:security-contact security@gildi.io\n/// @author Patrick Fischer (Pathin) > https://pathin.me\nabstract contract KeyValueStore is Ownable {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    /// @notice Mapping that holds the stored data against their keys.\n    mapping(bytes32 => bytes) internal data;\n\n    /// @notice Set that keeps track of all keys used.\n    EnumerableSet.Bytes32Set internal keys;\n\n    /// @notice Whether the store has been initialized or not.\n    bool private _initialized;\n\n    /// @notice Emitted when data is added to the store.\n    event DataAdded(bytes32 key);\n\n    /// @notice Emitted when data is updated in the store.\n    event DataUpdated(bytes32 key);\n\n    /// @notice Emitted when data is deleted from the store.\n    event DataDeleted(bytes32 key);\n\n    /// @notice Emitted when the store is already initialized.\n    error AlreadyInitialized();\n\n    /// @notice Emitted when the key does not exist in the store.\n    error KeyNotExists(bytes32 key);\n\n    /// @notice Emitted when the index is out of bounds.\n    error IndexOutOfBounds(uint256 index);\n\n    /// @dev Initializes a new instance of the Store contract with the given owner.\n    /// @param _owner The address of the owner of the Store contract.\n    constructor(address _owner) Ownable(_owner) {\n        _initialize();\n    }\n\n    /// @notice Gets the data stored against the given key.\n    /// @param _key The key to get the data for.\n    /// @return The data stored against the given key.\n    function _get(bytes32 _key) internal view returns (bytes memory) {\n        if (!keys.contains(_key)) {\n            revert KeyNotExists(_key);\n        }\n        return data[_key];\n    }\n\n    /// notice Gets the key at the given index.\n    /// @param _index The index of the key to get.\n    /// @return The key at the given index.\n    function _getKeyAtIndex(uint256 _index) internal view returns (bytes32) {\n        if (_index >= keys.length()) {\n            revert IndexOutOfBounds(_index);\n        }\n        return keys.at(_index);\n    }\n\n    /// @notice Gets all the data stored in the store.\n    /// @return All the data stored in the store.\n    function _getAll() internal view returns (bytes[] memory) {\n        uint256 length = keys.length();\n        bytes[] memory result = new bytes[](length);\n        for (uint256 i = 0; i < length; i++) {\n            result[i] = data[keys.at(i)];\n        }\n        return result;\n    }\n\n    /// @notice Gets all the keys used in the store.\n    /// @return All the keys used in the store.\n    function _getAllKeys() internal view returns (bytes32[] memory) {\n        return keys.values();\n    }\n\n    /// @notice Gets the number of keys used in the store.\n    /// @return The number of keys used in the store.\n    function _getNumberOfKeys() internal view returns (uint256) {\n        return keys.length();\n    }\n\n    /// @notice Checks if the given key exists in the store.\n    /// @param _key The key to check for existence.\n    function _containsKey(bytes32 _key) internal view returns (bool) {\n        return keys.contains(_key);\n    }\n\n    /// @notice Sets the given value against the given key.\n    function _set(bytes32 _key, bytes memory _value) internal onlyOwner {\n        bool isNewKey = !keys.contains(_key);\n        if (isNewKey) {\n            keys.add(_key);\n            emit DataAdded(_key);\n        } else {\n            emit DataUpdated(_key);\n        }\n        data[_key] = _value;\n    }\n\n    /// @notice Deletes the data stored against the given key.\n    function _del(bytes32 _key) internal onlyOwner {\n        if (!keys.contains(_key)) {\n            revert KeyNotExists(_key);\n        }\n        keys.remove(_key);\n        delete data[_key];\n        emit DataDeleted(_key);\n    }\n\n    /// @notice Initializes the store.\n    /// @dev This function is called only once during the contract deployment.\n    function _initialize() internal virtual initializeOnlyOnce {}\n\n    // Modifier to make it impossible to call initialize twice\n    modifier initializeOnlyOnce() {\n        if (_initialized) {\n            revert AlreadyInitialized();\n        }\n        _;\n        _initialized = true;\n    }\n}\n"
    },
    "contracts/wallet/GildiWalletLogic.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Created for Soonami Venturethon prototype only.\n// No redistribution, modification, or commercial use without prior written consent.\n// Copyright (c) 2025 Patrick Fischer. All rights reserved.\npragma solidity 0.8.24;\n\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport {StorageSlot} from '@openzeppelin/contracts/utils/StorageSlot.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport {IGildiExchange} from '../interfaces/marketplace/exchange/IGildiExchange.sol';\nimport {IGildiExchangePaymentAggregator} from '../interfaces/marketplace/exchange/IGildiExchangePaymentAggregator.sol';\nimport {IGildiExchangePurchaseVault} from '../interfaces/marketplace/vault/IGildiExchangePurchaseVault.sol';\nimport {RoyaltyDistributor} from '../royalties/RoyaltyDistributor.sol';\nimport {IGildiManager} from '../interfaces/manager/IGildiManager.sol';\nimport {IGildiWalletConfigRegistry} from '../interfaces/wallet/IGildiWalletConfigRegistry.sol';\n\n/// @title GildiWalletLogic\n/// @notice Gildi proxy wallets business logic\n/// @custom:security-contact security@gildi.io\n/// @author Gildi Company\ncontract GildiWalletLogic is Initializable, AccessControlUpgradeable {\n    using SafeERC20 for IERC20;\n\n    /// @notice Role identifier for operator accounts that can execute certain business functions\n    bytes32 public constant OPERATOR_ROLE = keccak256('OPERATOR_ROLE');\n\n    /// @notice Version of this logic contract implementation\n    uint256 public constant VERSION = 10000;\n\n    /// @dev Storage slot for off-ramp guard mechanism to verify call path originates from proxy\n    bytes32 private constant OFFRAMP_GUARD_SLOT = 0xbf2e87ae6cef65f01e1c587276c96bbd9fc7ff1493647120ef7d93bf473a6640;\n    /// @dev Storage slot for wallet configuration to ensure future extensibility\n    bytes32 private constant WALLET_CONFIG_SLOT = 0x1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2d3e4f5a6b7c8d9e0f1a2b;\n\n    enum WithdrawType {\n        WITHDRAW_TYPE_CRYPTO_WALLET,\n        WITHDRAW_TYPE_TRANSAK_STREAM\n    }\n\n    /// @notice Versioned wallet configuration snapshot stored in the wallet.\n    /// @dev Holds a pointer to the registry and the active resolved configuration.\n    struct VersionedWalletConfig {\n        /// @dev Address of the configuration registry contract\n        address configRegistry;\n        /// @dev Local version of the applied configuration (compared to implementation VERSION)\n        uint256 version;\n        /// @dev Resolved configuration values used by this wallet\n        IGildiWalletConfigRegistry.WalletConfig config;\n    }\n\n    /// @notice Parameters for Transak stream withdrawal flow.\n    struct WithdrawTransakParams {\n        /// @dev Destination wallet that accepts Transak stream deposits\n        address transakStreamWallet;\n        /// @dev Token to stream; must be a Transak-supported asset\n        address transakStreamToken; // Need to swap to a transak stream supported token.\n    }\n\n    /// @dev Thrown when attempting to initialize with a zero address for owner\n    error ZeroOwnerAddress();\n\n    /// @dev Thrown when off-ramp function is called through invalid entry point\n    error InvalidEntryPoint();\n\n    /// @dev No remaining USD in the referenced intent\n    error NoRemainingUsd();\n    /// @dev Estimated cost exceeds remaining USD in the intent\n    error EstimatedCostExceedsIntent();\n    /// @dev Actual cost exceeds remaining USD in the intent\n    error ActualCostExceedsIntent();\n    /// @dev Provided arrays have mismatched lengths\n    error ArraysLengthMismatch();\n    /// @dev Invalid data payload provided for Transak withdrawal\n    error InvalidTransakData();\n    /// @dev Invalid data payload provided for address-based withdrawal\n    error InvalidAddressData();\n    /// @dev Invalid withdraw type selector\n    error InvalidWithdrawType();\n    /// @dev Zero address provided for recipient\n    error ZeroAddressRecipient();\n    /// @dev Invalid Transak wallet address\n    error InvalidTransakWallet();\n    /// @dev Invalid Transak token address\n    error InvalidTransakToken();\n    /// @dev Feature not yet implemented\n    error TransakWithdrawalNotImplemented();\n    /// @dev Configuration errors\n    error GildiManagerNotConfigured();\n    error RoyaltyDistributorNotConfigured();\n    error GildiExchangeNotConfigured();\n    error PaymentAggregatorNotConfigured();\n    error PurchaseVaultNotConfigured();\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Initializes the wallet logic with owner and operator roles, to be called from the factory.\n    /// @dev This function can only be called once due to the initializer modifier\n    /// @param _owner The address that will receive the DEFAULT_ADMIN_ROLE\n    /// @param _operator The address that will receive the OPERATOR_ROLE (can be zero address)\n    function initialize(address _owner, address _operator, address _configRegistry) public initializer {\n        if (_owner == address(0)) {\n            revert ZeroOwnerAddress();\n        }\n\n        __AccessControl_init();\n\n        _grantRole(DEFAULT_ADMIN_ROLE, _owner);\n        if (_operator != address(0)) {\n            _grantRole(OPERATOR_ROLE, _operator);\n        }\n\n        // Initialize wallet config storage\n        VersionedWalletConfig storage $ = _getWalletConfigStorage();\n        $.configRegistry = _configRegistry;\n\n        // Initialize with default config (version 0) from registry\n        if (_configRegistry != address(0)) {\n            IGildiWalletConfigRegistry registry = IGildiWalletConfigRegistry(_configRegistry);\n            $.config = registry.getDefaultConfig();\n            $.version = 0; // Start with default config version\n        }\n    }\n\n    /// @dev Internal function to get config with version check and update\n    function _getWalletConfigWithUpdate() internal returns (IGildiWalletConfigRegistry.WalletConfig memory config) {\n        return _getWalletConfig();\n    }\n\n    /// @notice Migrates configuration from registry (manual trigger)\n    /// @dev Can be called to force migration from registry\n    function migrateConfigFromRegistry() external {\n        _getWalletConfigWithUpdate();\n    }\n\n    // ========== Marketplace Functions ==========\n\n    /// @notice Creates a listing on the marketplace\n    /// @dev Only callable by accounts with OPERATOR_ROLE\n    /// @param _releaseId The ID of the release\n    /// @param _pricePerItem The price per item in USD\n    /// @param _quantity The quantity being listed\n    /// @param _payoutCurrency The currency the seller wants to receive payment in\n    /// @param _fundsReceiver The address to receive funds from the sale (if address(0), defaults to seller)\n    /// @param _slippageBps Slippage protection in basis points (100 = 1%, 500 = 5%)\n    function createListing(\n        uint256 _releaseId,\n        uint256 _pricePerItem,\n        uint256 _quantity,\n        address _payoutCurrency,\n        address _fundsReceiver,\n        uint16 _slippageBps\n    ) external onlyRole(OPERATOR_ROLE) {\n        IGildiExchange exchange = _getGildiExchange();\n\n        exchange.createListing(\n            _releaseId,\n            address(this),\n            _pricePerItem,\n            _quantity,\n            _payoutCurrency,\n            _fundsReceiver,\n            _slippageBps\n        );\n    }\n\n    /// @notice Creates a listing with default slippage on the marketplace\n    /// @dev Only callable by accounts with OPERATOR_ROLE\n    /// @param _releaseId The ID of the release\n    /// @param _pricePerItem The price per item in USD\n    /// @param _quantity The quantity being listed\n    /// @param _payoutCurrency The currency the seller wants to receive payment in\n    /// @param _fundsReceiver The address to receive funds from the sale (if address(0), defaults to seller)\n    function createListing(\n        uint256 _releaseId,\n        uint256 _pricePerItem,\n        uint256 _quantity,\n        address _payoutCurrency,\n        address _fundsReceiver\n    ) external onlyRole(OPERATOR_ROLE) {\n        IGildiExchange exchange = _getGildiExchange();\n\n        exchange.createListing(_releaseId, address(this), _pricePerItem, _quantity, _payoutCurrency, _fundsReceiver);\n    }\n\n    /// @notice Modifies an existing listing on the marketplace\n    /// @dev Only callable by accounts with OPERATOR_ROLE\n    /// @param _listingId The ID of the listing to modify\n    /// @param _pricePerItem The new price per item in USD\n    /// @param _quantity The new quantity (if 0, the listing will be removed)\n    /// @param _payoutCurrency The new payout currency\n    /// @param _fundsReceiver The address to receive funds from the sale (if address(0), defaults to seller)\n    /// @param _slippageBps New slippage protection in basis points\n    function modifyListing(\n        uint256 _listingId,\n        uint256 _pricePerItem,\n        uint256 _quantity,\n        address _payoutCurrency,\n        address _fundsReceiver,\n        uint16 _slippageBps\n    ) external onlyRole(OPERATOR_ROLE) {\n        IGildiExchange exchange = _getGildiExchange();\n\n        exchange.modifyListing(_listingId, _pricePerItem, _quantity, _payoutCurrency, _fundsReceiver, _slippageBps);\n    }\n\n    /// @notice Modifies an existing listing with default slippage on the marketplace\n    /// @dev Only callable by accounts with OPERATOR_ROLE\n    /// @param _listingId The ID of the listing to modify\n    /// @param _pricePerItem The new price per item in USD\n    /// @param _quantity The new quantity (if 0, the listing will be removed)\n    /// @param _payoutCurrency The new payout currency\n    function modifyListing(\n        uint256 _listingId,\n        uint256 _pricePerItem,\n        uint256 _quantity,\n        address _payoutCurrency,\n        address _fundsReceiver\n    ) external onlyRole(OPERATOR_ROLE) {\n        IGildiExchange exchange = _getGildiExchange();\n\n        exchange.modifyListing(_listingId, _pricePerItem, _quantity, _payoutCurrency, _fundsReceiver);\n    }\n\n    /// @notice Cancels a listing on the marketplace\n    /// @dev Only callable by accounts with OPERATOR_ROLE\n    /// @param _listingId The ID of the listing to cancel\n    function cancelListing(uint256 _listingId) external onlyRole(OPERATOR_ROLE) {\n        IGildiExchange exchange = _getGildiExchange();\n\n        exchange.cancelListing(_listingId);\n    }\n\n    /// @notice Claims all available royalty distributions for this wallet across all releases\n    /// @dev Uses RoyaltyDistributor to claim all available distributions\n    function claimAllRoyalties() external onlyRole(OPERATOR_ROLE) {\n        RoyaltyDistributor distributor = _getRoyaltyDistributor();\n        distributor.claimAll();\n    }\n\n    /// @notice Claims royalty distributions for this wallet from a specific release\n    /// @param _releaseId The ID of the release to claim royalties from\n    function claimReleaseRoyalties(uint256 _releaseId) external onlyRole(OPERATOR_ROLE) {\n        RoyaltyDistributor distributor = _getRoyaltyDistributor();\n        distributor.claimAllByReleaseId(_releaseId);\n    }\n\n    /// @notice Claims a specific royalty distribution\n    /// @param _distributionId The ID of the distribution to claim\n    function claimRoyalties(uint256 _distributionId) external onlyRole(OPERATOR_ROLE) {\n        RoyaltyDistributor distributor = _getRoyaltyDistributor();\n        distributor.claim(_distributionId);\n    }\n\n    /// @notice Purchases tokens from a release using vault-based USD treasury system (fill or kill)\n    /// @dev Only callable by accounts with OPERATOR_ROLE. Works exclusively through vault.\n    /// @param _intentId The purchase intent ID from the vault\n    /// @param _releaseId The release ID to purchase from\n    /// @param _amount The amount of tokens to purchase\n    /// @param _tokenHint An optional token hint to use for purchase\n    function purchase(\n        bytes32 _intentId,\n        uint256 _releaseId,\n        uint256 _amount,\n        address _tokenHint\n    ) external onlyRole(OPERATOR_ROLE) {\n        IGildiExchangePurchaseVault vault = _getPurchaseVault();\n        IGildiExchangePaymentAggregator aggregator = _getPaymentAggregator();\n\n        // 1. Check remaining USD from intent (must be > 0)\n        uint256 remainingUsdCents = vault.remainingUsd(_intentId);\n        if (remainingUsdCents == 0) {\n            revert NoRemainingUsd();\n        }\n\n        // 2. Execute intent to get tokens from vault\n        (address vaultToken, uint256 tokenAmount) = vault.executeIntent(\n            _intentId,\n            _tokenHint,\n            IGildiExchangePurchaseVault.ExecutionContext({releaseId: _releaseId, amount: _amount, buyer: address(this)})\n        );\n\n        // 3. Estimate purchase cost and validate against intent balance\n        (, , , uint256 totalPriceUsdExchange) = aggregator.estimatePurchase(\n            _releaseId,\n            _amount,\n            address(this),\n            vaultToken\n        );\n        uint256 estimatedCostCents = _convertExchangeUsdToCents(totalPriceUsdExchange);\n\n        if (estimatedCostCents > remainingUsdCents) {\n            revert EstimatedCostExceedsIntent();\n        }\n\n        // 4. Approve tokens to aggregator (zero-reset pattern for USDT-style tokens)\n        IERC20(vaultToken).forceApprove(address(aggregator), tokenAmount);\n\n        // 5. Track vault token balance before purchase to detect refunds\n        uint256 vaultTokenBalanceBefore = IERC20(vaultToken).balanceOf(address(this)) - tokenAmount;\n\n        // 6. Execute marketplace purchase and get actual USD spent\n        uint256 actualUsdSpentExchangeDecimals = aggregator.purchase(_releaseId, _amount, vaultToken, tokenAmount);\n        // Clear aggregator allowance after use\n        IERC20(vaultToken).approve(address(aggregator), 0);\n\n        // 7. Check for leftover vault tokens returned by aggregator\n        uint256 vaultTokenBalanceAfter = IERC20(vaultToken).balanceOf(address(this));\n\n        address refundToken = address(0);\n        uint256 refundTokenAmount = 0;\n\n        if (vaultTokenBalanceAfter > vaultTokenBalanceBefore) {\n            refundTokenAmount = vaultTokenBalanceAfter - vaultTokenBalanceBefore;\n            refundToken = vaultToken;\n\n            // Approve vault to take back the leftover tokens (zero-reset pattern)\n            IERC20(vaultToken).forceApprove(address(vault), refundTokenAmount);\n        }\n\n        // 8. Convert actual USD spent to vault cents and settle intent with refund info\n        uint256 actualUsdSpentCents = _convertExchangeUsdToCents(actualUsdSpentExchangeDecimals);\n\n        if (actualUsdSpentCents > remainingUsdCents) {\n            revert ActualCostExceedsIntent();\n        }\n\n        vault.settleIntent(_intentId, actualUsdSpentCents, refundToken, refundTokenAmount);\n\n        // Clear vault allowance after settlement (if any)\n        if (refundToken != address(0) && refundTokenAmount > 0) {\n            IERC20(refundToken).approve(address(vault), 0);\n        }\n    }\n\n    /// @notice Withdraws multiple tokens from the wallet to a specified beneficiary\n    /// @dev Allows batch withdrawal of different tokens and amounts\n    /// @param _tokens Array of token contract addresses to withdraw\n    /// @param _amounts Array of amounts to withdraw (must match tokens array length)\n    /// @param _data The data to pass to the withdraw function\n    function withdrawFunds(\n        address[] calldata _tokens,\n        uint256[] calldata _amounts,\n        WithdrawType _withdrawType,\n        bytes calldata _data\n    ) external onlyRole(OPERATOR_ROLE) {\n        if (_tokens.length != _amounts.length) {\n            revert ArraysLengthMismatch();\n        }\n\n        if (_withdrawType == WithdrawType.WITHDRAW_TYPE_TRANSAK_STREAM) {\n            if (_data.length == 0) {\n                revert InvalidTransakData();\n            }\n            WithdrawTransakParams memory params = abi.decode(_data, (WithdrawTransakParams));\n            _handleWithdrawTransak(params, _tokens, _amounts);\n        } else if (_withdrawType == WithdrawType.WITHDRAW_TYPE_CRYPTO_WALLET) {\n            if (_data.length != 32) {\n                revert InvalidAddressData();\n            }\n            address to = abi.decode(_data, (address));\n            _handleWithdrawCryptoWallet(to, _tokens, _amounts);\n        } else {\n            revert InvalidWithdrawType();\n        }\n    }\n\n    function _handleWithdrawTransak(\n        WithdrawTransakParams memory _params,\n        address[] calldata /* _tokens */,\n        uint256[] calldata /* _amounts */\n    ) private pure {\n        if (_params.transakStreamWallet == address(0)) {\n            revert InvalidTransakWallet();\n        }\n        if (_params.transakStreamToken == address(0)) {\n            revert InvalidTransakToken();\n        }\n\n        // TODO: Implement token swapping logic and Transak stream integration\n        // For now, revert to prevent unintended usage\n        revert TransakWithdrawalNotImplemented();\n    }\n\n    function _handleWithdrawCryptoWallet(address _to, address[] calldata _tokens, uint256[] calldata _amounts) private {\n        if (_to == address(0)) {\n            revert ZeroAddressRecipient();\n        }\n\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            if (_amounts[i] > 0) {\n                IERC20(_tokens[i]).safeTransfer(_to, _amounts[i]);\n            }\n        }\n    }\n\n    // ========== GildiManager Functions ==========\n\n    /// @notice Transfers right ownership of tokens within GildiManager from this wallet to another address\n    /// @dev Only callable by accounts with OPERATOR_ROLE\n    /// @param _releaseId The ID of the release\n    /// @param _to The address to transfer right ownership to\n    /// @param _amount The amount of right shares to transfer\n    function transferRightOwnership(uint256 _releaseId, address _to, uint256 _amount) external onlyRole(OPERATOR_ROLE) {\n        IGildiManager manager = _getGildiManager();\n        manager.transferOwnership(_releaseId, address(this), _to, _amount);\n    }\n\n    // ========== Internal functions ==========\n    function _getWalletConfigStorage() internal pure returns (VersionedWalletConfig storage $) {\n        assembly {\n            $.slot := WALLET_CONFIG_SLOT\n        }\n    }\n\n    function _getWalletConfig() internal returns (IGildiWalletConfigRegistry.WalletConfig memory) {\n        VersionedWalletConfig storage $ = _getWalletConfigStorage();\n\n        // Update logic...\n        if (address($.configRegistry) != address(0)) {\n            IGildiWalletConfigRegistry registry = IGildiWalletConfigRegistry($.configRegistry);\n            // Always fetch the best available config for our version\n            if ($.version != VERSION) {\n                $.config = registry.getConfigForVersion(VERSION);\n                $.version = VERSION; // Update version after migration\n            }\n        }\n\n        return $.config;\n    }\n\n    function _getGildiManager() internal returns (IGildiManager) {\n        IGildiWalletConfigRegistry.WalletConfig memory config = _getWalletConfig();\n        if (config.gildiManager == address(0)) {\n            revert GildiManagerNotConfigured();\n        }\n        return IGildiManager(config.gildiManager);\n    }\n\n    function _getRoyaltyDistributor() internal returns (RoyaltyDistributor) {\n        IGildiWalletConfigRegistry.WalletConfig memory config = _getWalletConfig();\n        if (config.royaltyDistributor == address(0)) {\n            revert RoyaltyDistributorNotConfigured();\n        }\n        return RoyaltyDistributor(config.royaltyDistributor);\n    }\n\n    function _getGildiExchange() internal returns (IGildiExchange) {\n        IGildiWalletConfigRegistry.WalletConfig memory config = _getWalletConfig();\n        if (config.gildiExchangeV2 == address(0)) {\n            revert GildiExchangeNotConfigured();\n        }\n        return IGildiExchange(config.gildiExchangeV2);\n    }\n\n    function _getPaymentAggregator() internal returns (IGildiExchangePaymentAggregator) {\n        IGildiWalletConfigRegistry.WalletConfig memory config = _getWalletConfig();\n        if (config.paymentAggregator == address(0)) {\n            revert PaymentAggregatorNotConfigured();\n        }\n        return IGildiExchangePaymentAggregator(config.paymentAggregator);\n    }\n\n    function _getPurchaseVault() internal returns (IGildiExchangePurchaseVault) {\n        IGildiWalletConfigRegistry.WalletConfig memory config = _getWalletConfig();\n        if (config.purchaseVault == address(0)) {\n            revert PurchaseVaultNotConfigured();\n        }\n        return IGildiExchangePurchaseVault(config.purchaseVault);\n    }\n\n    /// @dev Internal function to convert USD from exchange decimals to cents\n    function _convertExchangeUsdToCents(uint256 _usdPriceExchangeDecimals) internal returns (uint256 usdCents) {\n        IGildiExchange exchange = _getGildiExchange();\n        IGildiExchange.AppEnvironment memory env = exchange.getAppEnvironment();\n        uint8 exchangeDecimals = env.settings.priceAskDecimals;\n\n        // Convert from exchange decimals to cents (2 decimals)\n        if (exchangeDecimals >= 2) {\n            usdCents = _usdPriceExchangeDecimals / (10 ** (exchangeDecimals - 2));\n        } else {\n            usdCents = _usdPriceExchangeDecimals * (10 ** (2 - exchangeDecimals));\n        }\n    }\n\n    /// @dev Internal function to convert USD from cents to exchange decimals\n    function _convertCentsToExchangeUsd(uint256 _usdCents) internal returns (uint256 usdExchangeDecimals) {\n        IGildiExchange exchange = _getGildiExchange();\n        IGildiExchange.AppEnvironment memory env = exchange.getAppEnvironment();\n        uint8 exchangeDecimals = env.settings.priceAskDecimals;\n\n        // Convert from cents (2 decimals) to exchange decimals\n        if (exchangeDecimals >= 2) {\n            usdExchangeDecimals = _usdCents * (10 ** (exchangeDecimals - 2));\n        } else {\n            usdExchangeDecimals = _usdCents / (10 ** (2 - exchangeDecimals));\n        }\n    }\n\n    /// @dev Removes operator role from specified address when called through proxy's guarded flow\n    /// @param _operator The operator address to remove role from\n    function offRampOperator(address _operator) external {\n        // Only callable via proxy's guarded flow\n        if (!StorageSlot.getBooleanSlot(OFFRAMP_GUARD_SLOT).value) {\n            revert InvalidEntryPoint();\n        }\n        // Revoke operator role if currently granted; bypass external access checks using internal hook\n        if (_operator != address(0) && hasRole(OPERATOR_ROLE, _operator)) {\n            _revokeRole(OPERATOR_ROLE, _operator);\n        }\n    }\n\n    /// @dev Updates admin role when called through proxy's guarded flow\n    /// @param _oldAdmin The old admin address to remove role from\n    /// @param _newAdmin The new admin address to grant role to\n    function offRampUpdateAdmin(address _oldAdmin, address _newAdmin) external {\n        // Only callable via proxy's guarded flow\n        if (!StorageSlot.getBooleanSlot(OFFRAMP_GUARD_SLOT).value) {\n            revert InvalidEntryPoint();\n        }\n        // Remove old admin role if currently granted\n        if (_oldAdmin != address(0) && hasRole(DEFAULT_ADMIN_ROLE, _oldAdmin)) {\n            _revokeRole(DEFAULT_ADMIN_ROLE, _oldAdmin);\n        }\n        // Grant new admin role\n        if (_newAdmin != address(0)) {\n            _grantRole(DEFAULT_ADMIN_ROLE, _newAdmin);\n        }\n    }\n\n    /// @dev Updates operator role when called through proxy's guarded flow\n    /// @param _oldOperator The old operator address to remove role from\n    /// @param _newOperator The new operator address to grant role to\n    function offRampUpdateOperator(address _oldOperator, address _newOperator) external {\n        // Only callable via proxy's guarded flow\n        if (!StorageSlot.getBooleanSlot(OFFRAMP_GUARD_SLOT).value) {\n            revert InvalidEntryPoint();\n        }\n        // Remove old operator role if currently granted\n        if (_oldOperator != address(0) && hasRole(OPERATOR_ROLE, _oldOperator)) {\n            _revokeRole(OPERATOR_ROLE, _oldOperator);\n        }\n        // Grant new operator role\n        if (_newOperator != address(0)) {\n            _grantRole(OPERATOR_ROLE, _newOperator);\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}